<style>
    #detail {
        display: inline-block;
        padding: 10px;
    }

    .info {
        display: flex;
        justify-content: center;
    }

</style>
<div id="input" style=" position: sticky; top: 20px;">
    <div class="group">
        <h4 class="conts_s-tit collapse_head">
            {{ message('item.com.087') }}
            <div class="btn_group iconbtns" style="margin-right: 7px;" id="responseDate">
            </div>
            <button type="button" class="icon_btn collapse_btn">
                <i class="ic ic-arrow"></i>
                <span class="tooltip">{{ message('item.dfccy.038') }}</span>
            </button>
            <button type="button" class="icon_btn collapse_btn" style="position: absolute; right: 10px;" onclick="response.closeForm()">
                <i class="ic ic-close"></i>
                <span class="tooltip">닫기</span>
            </button>
        </h4>
        <div class="collapse collapse_body">
            <div class="btn_area s_default _outline" style="margin-bottom: .35em; display: none;" id="inputBtn">
                {{ btnHtml | raw }}
            </div>
            <div class="form_box" id="inputForm">
                <!-- detail -->
                <div class="group">
                    <div class="row" id="detail" style="display: none;">
                        <div class="info" >
                            <p class="data_info">
                                {{ message('msg.dfccy.004') }}
                            </p>
                        </div>
                    </div>
                </div>
                <form name="form" id="form" style="display: none;">
                    <div class="group">
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label requireCheck">{{ message('item.dfccy.039') }}</div>
                                <div class="form_data">
                                    <span class="selectbox" id="selectBox">
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.dfccy.040') }}</div>
                                <div class="form_data">
                                    <textarea id="rplyCntnts" class="form-control maxlength" maxlength="1024"></textarea>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row" id="formAttach">
                            <div class="col">
                                <div class="form_label">{{ message('item.com.062') }}</div> <!-- 첨부파일 -->
                                <div class="form_data">

                                    <div class="attach_wrap">
                                        <div class="attach_toolbar">
                                            <div class="btn_area s_small">
                                                <div class="attach_btn">
                                                    <input class="file" id="chooseFile" type="file" style="display:none;" multiple="multiple" onchange="response.attach.handleFiles(this.files)">
                                                    <button type="button" class="btn _fill" onclick="response.attach.add();">{{message('btn.021') }}</button>
                                                </div>
                                                <button type="button" class="btn _outline" onclick="response.attach.deleteAll();">{{message('btn.020') }}</button>
                                            </div>
                                            <!-- 첨부파일 업로드 정보 -->
                                            <div class="attach_info" id="attachInfo"></div>
                                        </div>

                                        <div class="attach_area upload-box fileContents drag-file">
                                            <!-- 첨부파일 미등록 시 -->
                                            <p class="data_info" id="uploadMsg">
                                                {{ message('msg.pinstall.003') }}
                                            </p>

                                            <!-- 첨부파일 등록 시 활성화 'hide'제거-->
                                            <div class="attach_list" id="cu_attach_list" style="display: none;">
                                                <!-- 첨부파일 업로드 시-->
                                                <ul class="file_header" id="uploadList">
                                                    <li class="header_item" id="header_item">
                                                        <button class="icon_btn" class="icon_btn" onclick="response.attach.deleteAll()">
                                                            <i class="ic ic-close" id="fileIcon"></i>
                                                            <span class="blind">{{ message('item.com.020') }}</span>
                                                            <!-- 파일명 -->
                                                        </button>
                                                        <span class="f_name">{{ message('item.com.020') }}</span>
                                                        <span class="f_progress">{{ message('item.info.036') }}</span>
                                                        <span class="f_capacity">{{ message('item.com.021') }}</span>
                                                    </li>
                                                </ul>
                                                <!-- 첨부파일 조회 시-->
                                                <ul class="file_header" id="readList" style="display: none;">
                                                    <li class="header_item" style="grid-template-columns: min-content auto 80px;">
                                                        <button type="button" class="icon_btn">
                                                            <i class="ic ic-folder-open"></i>
                                                            <span class="blind">{{ message('item.com.020') }}</span>
                                                            <!-- 파일명 -->
                                                        </button>
                                                        <span class="f_name">{{ message('item.com.020') }}</span>
                                                        <!-- 파일명 -->
                                                    </li>
                                                </ul>
                                                <ul class="file_list" id="fileList">
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.dfccy.041') }}</div>
                                <div class="form_data">
                                    <input class="check_mark " type="checkbox" id="rplyYn">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
<script src="/assets/js/validation.js"></script>
<script>
    var maxFilecount = 10;
    var uploadSize = 100;
    var maxUploadSize = 100;

    var response = {
        init: function () {
            let replySeq = page.currentReplySeq;
            if (!replySeq || replySeq === "null") {
                $("#cu_deleteBtn").hide()
                page.currentReplySeq = null;
            }
            response.loadData();
        },
        save: function () {
            const rplyCd = $("#rplyCd").val();
            const rplyCntnts = $("#rplyCntnts").val();
            const rplyYn = $("#rplyYn").prop("checked") ? "Y" : "N";

            if (!rplyCd) {
                gaiaCommon.customAlert("{{ message('msg.dfccy.005') }}");
                return false;
            }

            var formData = new FormData();

            let data = {
                pjtNo: commonJs.getSessionStorage("pageCommonData").pjtNo,
                cntrctNo: $("#cntrctNo").val(),
                dfccyNo: page.currentDfccyNo,
                replySeq: page.currentReplySeq,
                rplyCd: rplyCd,
                rplyCntnts: rplyCntnts,
                rplyYn: rplyYn,
                delFileList: response.attach.delFileList
            };

            formData.delete('files');
			response.attach.fileList.forEach(file => {
				formData.append('files', file);
			});

            formData.append(
                "data",
                new Blob([JSON.stringify(data)], {
                    type: "application/json",
                })
            );

            let isNew = page.currentReplySeq == null;
            if (rplyYn == "Y") {
                gaiaCommon.customConfirm("{{ message('item.dfccy.042') }}", "{{ message('msg.dfccy.006') }}", "{{ message('msg.dfccy.007') }}", function () {
                    response.goSave(formData, isNew)
                });
            } else {
                response.goSave(formData, isNew)
            }
        },
        goSave(formData, isNew) {
            let msg = isNew ? "{{ message('msg.005') }}" : "{{ message('msg.007') }}";
            let saveType = isNew ? "save" : "update";

            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.post(`/api/defecttracking/responses/${saveType}`, formData, function(result) {
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert(msg);
                page.table(currentPage, page.currentDfccyNo);
            });
        },
        loadData: function () {
            let params = {
                pjtNo: commonJs.getSessionStorage("pageCommonData").pjtNo,
                cntrctNo: $("#cntrctNo").val(),
                dfccyPhaseNo: dfccyPhaseNo,
                dfccyNo: page.currentDfccyNo,
                replySeq: page.currentReplySeq
            }
            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.post(`/api/defecttracking/responses/detail`, params, function(data) {
                let returnMap = data.details.returnMap;
                let phase = returnMap.phase[0];
                let responseData = returnMap.response;
                let responseFiles = returnMap.files;
                let $this = response.attach;

                setTimeout(function () {
                    $("#rplyCd").val(responseData.rplyCd);
                    let today = new Date().setHours(0, 0, 0, 0);
                    let startDate = new Date(phase.response_bgn_date).setHours(0, 0, 0, 0);
                    let endDate = new Date(phase.response_end_date).setHours(0, 0, 0, 0);

                    let statusText = endDate < today ? "{{ message('item.dfccy.004') }}" : startDate > today ? "{{ message('item.dfccy.002') }}" : "{{ message('item.dfccy.003') }}";
                    $("#responseDate").html(`${phase.response_bgn_date} ~ ${phase.response_end_date} <div style='color: red; padding:.35em;'>[ ${statusText} ]</div>`);

                    let isEnded = endDate < today;
                    let hasResponse = responseData && responseData.rplyCd != null;

                    $("#inputBtn").toggle(!isEnded && responseData.rplyYn != "Y");

                    if (hasResponse) {
                        const formatHTML = function (str) {
                            const txt = document.createElement('textarea');
                            txt.innerHTML = str;
                            return txt.value;
                        }
                        $("#rplyCntnts").val(formatHTML(responseData.rplyCntnts));

                        if (responseData.rplyYn === "Y") $("#rplyYn").prop("checked", true).css("display", "block");
                        const isReadOnly = isEnded || responseData.rplyYn === "Y";

                        if (isReadOnly) {
                            $("#readList").show();
                            $("#uploadList").hide();
                            // $("#fList").html(fileListHtml);
                            $(".char-counter").hide();
                            $('#selectBox').toggleClass('readonly', true);
                            $('.attach_toolbar').hide();
                            $('#rplyCntnts').on('focus', function () { this.blur(); })
                                            .css({
                                                'overflow': 'auto',
                                                'cursor': 'default',
                                            });
                        } else {
                            $("#readList").hide();
                            $("#uploadList").show();
                        }

                        if(responseFiles && responseFiles.length > 0) {
                            $('#attachInfo').show();
                            $("#uploadMsg").hide();
                            $('#cu_attach_list').show();

                            let fileListHtml = responseFiles.map(file => {
                                let html = '';
                                $this.fileList.push(file.fileNm);
                                $this.fileSizeList.push(file.fileSize);
                                $this.fileNameList.push(file.fileNm);

                                const fileUrl = `/api/defecttraking/tool/defectTracking/${file.fileNo}/${file.sno}/file-download`;
                                if(isReadOnly) {
                                    html += `<li class="list_item readList" style="grid-template-columns: min-content auto 80px;">
                                                        <a class="icon_btn" href='javascript:page.download("${fileUrl}");'>
                                                            <i class="ic ic-folder-open"></i>
                                                            <span class="blind">${file.fileNm}</span>
                                                        </a>
                                                        <a class="f_name" href='javascript:page.download("${fileUrl}");'>${file.fileNm}</a>
                                                    </li>`;
                                } else {
                                    html += `<li class="list_item attach_item" data-status="OLD" data-fileNo="${file.fileNo}" data-sno="${file.sno}">
                                                        <button type="button" id="delFile" class="icon_btn" onclick="response.attach.deletefile(event, ${$this.fileIndex})">
                                                            <i class="ic ic-close"></i>
                                                            <span class="blind">삭제</span>
                                                        </button>
                                                        <span class="f_name">${file.fileNm}</span>
                                                        <span class="f_progress">
                                                            <span class="sucess">
                                                                <i class="ic ic-check"></i>
                                                            </span>
                                                        </span>
                                                        <span class="f_capacity">${$this.getFileSize(file.fileSize)}</span>
                                                    </li>`;
                                }
                                $this.fileIndex++;
                                return html;
                            }).join("");

                            // 업로드 파일 개수 & 용량 표시
                            $this.totalFileSize = responseFiles.reduce((acc, file) => acc + file.fileSize, 0);
                            $this.fileListCnt = responseFiles.length;
                            $this.setFilesInfo();
                            $('#formAttach .file_list').append(fileListHtml);
                        } else {
                            $("#cu_attach_list").hide();
                            $("#uploadMsg").show();
                        }
                    }

                    $("#form").toggle(!isEnded || hasResponse);
                    $("#detail").toggle(isEnded && !hasResponse);
                    $(".requireCheck").toggleClass("required", !hasResponse);

                    gaiaCommon.LoadingOverlay('body', false);

                }, 300);

            }, function (xhr, status, error) {
                console.error(status, error);
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert("{{ message('msg.060') }}");
            });
        },

        delete: function () {
            let dfccyNo = page.currentDfccyNo;
            let replySeq = page.currentReplySeq;
            let data = {
                ["responsesList"]: [{ replySeq, dfccyNo }]
            };

            gaiaCommon.customConfirm("{{ message('item.dfccy.032') }}", "{{ message('item.dfccy.028') }}", "{{ message('msg.009') }}", function () {
                gaiaCommon.LoadingOverlay('body', true);
                gaiaCommon.post("/api/defecttracking/responses/delete", data, function(result) {
                    gaiaCommon.LoadingOverlay('body', false);
                    gaiaCommon.customAlert("{{ message('msg.006') }}");
                    page.table(currentPage, page.currentDfccyNo);
                }, function (xhr) {
                    console.error("Error deleting data:", xhr.responseText);
                    gaiaCommon.LoadingOverlay('body', false);
                });
            })
        },

        makeSelectBox: function () {
            let selectData =
            {
                cmnGrpCd: "86bac69f-e72e-4612-8c70-546cf20c65fe",
                selectBoxId: "rplyCd",
                selectBoxNmType: "KOR",
                ckeckedValue: "",
                orderByCol: "",
                orderByType: "",
                initText: "==선택==",
                paramNm: "rplyCd",
                funName: "",
                funParam: "this.value",
                funtype: "",
            }

            gaiaCommon.post("/api/util/make-selectBox", [selectData], function(data) {
                let returnMap = data.details.returnMap;
                let addAppLineContent = document.getElementById(selectData.selectBoxId);
                let categorySelect = `${returnMap[selectData.selectBoxId]}`;
                if (addAppLineContent) {
                    addAppLineContent.innerHTML = returnMap[selectData.selectBoxId];
                }
                $(`#selectBox`).append(categorySelect);
            });
        },

        closeForm(){
            $('.gridContainer').removeClass('active');
            $("#popup").empty();

            const container = document.querySelector(".gridContainer");
            const table = document.querySelector(".table ");
            const newWidth = container.clientWidth;
            if(container.clientWidth < table.clientWidth) {
                $("#grid table").css("width", "max-content");
            } else {
                $("#grid table").css("width", "");
            }
            $('#grid').css("maxWidth", newWidth + "px");
        },
        // 파일첨부
        attach: {
            fileIndex: 0,                       // 파일 리스트 번호
            totalFileSize: 0,                   // 등록할 전체 파일 사이즈
            fileListCnt: 0,                     // 업로드할 파일 수
            fileList: [],                       // 파일 리스트
            fileSizeList: [],                   // 파일 사이즈 리스트
            fileNameList: [],                   // 파일명 리스트
            delFileList: [],
            newFileList: [],

            // 초기화
            reset(resetType){
                Object.keys(this).forEach((key) => {
                    if (Array.isArray(this[key])) {
                        if(!resetType || (key !== 'delFileList' && key !== 'newFileList'))
                        this[key] = [];
                    } else if (typeof this[key] === "number") {
                        this[key] = 0;
                    }
                });
            },
            // 파일 사이즈 형식 변경
            getFileSize(filesize){
                if (filesize >= 1024 * 1024) {
                    return (filesize / (1024 * 1024)).toFixed(2) + ' MB';
                } else if (filesize >= 1024) {
                    return (filesize / 1024).toFixed(2) + ' KB';
                } else {
                    return filesize + ' bytes';
                }
            },
            //업로드 파일 갯수 및 용량 셋팅
            setFilesInfo() {
                $('#attachInfo').children().remove();
                this.fileListCnt = this.fileList.filter(item => item !== 'undefined').length;
                let fileSize = !this.totalFileSize ? 0 : this.getFileSize(this.totalFileSize);
                let spanClass = this.fileListCnt > 0 ? 'sucess' : 'fail';
                let iClass = this.fileListCnt > 0 ? 'ic-check' : 'ic-close';
                if(this.fileListCnt > 0) {
                    let resultHtml = `
                                    <span class="attach_result">
                                        <span class="${spanClass}">
                                            <i class="ic ${iClass}"></i>
                                            <b class="num">${this.fileListCnt}</b>
                                        </span>
                                    </span>
                                    <span class="attach_capacity">
                                        <span class="item" id="fileSize">${fileSize}</span>
                                        <span class="item">${maxUploadSize}MB</span>
                                    </span>
                                    `
                    $('#attachInfo').append(resultHtml);
                }
            },
            handleFiles(files) {
                files = [...files];

                //최대 첨부파일 갯수 체크
                if(maxFilecount < files.length + this.fileIndex) {
                    gaiaCommon.customAlert("{{ message('msg.app.010') }}".replace('{0}', maxFilecount));
                    return;
                }

                //동일 파일명 업로드 여부 체크
                if(this.fileIndex > 0) {
                    if(this.fileNameList.filter(item => files.some(i => i.name === item)).length > 0) {
                        gaiaCommon.customAlert("{{ message('msg.app.011') }}");
                        return;
                    }
                }

                //최대 업로드 용량 체크
                let attFileSize = 0;
                files.forEach(file => attFileSize += file.size);
                if(1024 * 1024 * maxUploadSize < this.totalFileSize + attFileSize) {
                    gaiaCommon.customAlert("{{ message('msg.app.012') }}".replace('{0}', maxUploadSize));
                    return;
                }

                //개별 파일 용량 체크
                var returnValue = false;
                files.forEach(function(files) {
                    if(files.size > 1024 * 1024 * uploadSize) {
                        gaiaCommon.customAlert("{{ message('msg.app.013') }}".replace('{0}', uploadSize));
                        returnValue = true;
                        return;
                    }
                    if(files.size <= 0) {
                        gaiaCommon.customAlert("{{ message('msg.app.014') }}");
                        returnValue = true;
                        return;
                    }
                });

                if(returnValue) {
                    return;
                }
                // 파일선택 값 초기화
                $('#chooseFile').val(null);
                // 초기 업로드 안내 요소 삭제
                if(this.fileListCnt < 1) {
                    $("#uploadMsg").hide();
                }
                //파일 리스트 처리
                files.forEach(file => {
                    this.previewFile(file)
                    this.newFileList.push(file);
                });
                //업로드 파일 정보 셋팅
                this.setFilesInfo();
            },
            previewFile(file) {
                $('#uploadMsg').hide();
                $('#attachInfo').show();
                if(this.fileListCnt < 1) {
                    $('#cu_attach_list').show();
                }
                let attachListHtml = `<li class="list_item attach_item" data_status="NEW">
                                        <button type="button" id="delFile" class="icon_btn" onclick="response.attach.deletefile(event, ${this.fileIndex})">
                                            <i class="ic ic-close"></i>
                                            <span class="blind">삭제</span>
                                        </button>
                                        <span class="f_name">${file.name}</span>
                                        <span class="f_progress">
                                            <span class="sucess">
                                                <i class="ic ic-check"></i>
                                            </span>
                                        </span>
                                        <span class="f_capacity">${this.getFileSize(file.size)}</span>
                                    </li>`
                $('#formAttach .file_list').append(attachListHtml);

                this.fileList[this.fileIndex] = file;
                this.fileSizeList[this.fileIndex] = file.size;
                this.fileNameList[this.fileIndex] = file.name;
                this.fileIndex = this.fileIndex + 1;
                this.totalFileSize = this.totalFileSize + file.size;
            },
            // 업로드 파일 삭제
            deletefile(event, index) {
                this.totalFileSize -= this.fileSizeList[index];     // 전체 파일 사이즈 수정
                delete this.fileList[index];                        // 파일 배열에서삭제
                delete this.fileSizeList[index];                    // 파일 사이즈 배열 삭제
                delete this.fileNameList[index];                    // 파일 이름 배열 삭제

                // 업로드 파일 삭제목록에 추가
                let li = $(event.target).closest('li');
                if(li.data('status') === 'OLD') {
                    this.delFileList.push({fileNo: li.data('fileno'), sno: li.data('sno')});
                }

                // 업로드 파일 목록에서 삭제
                li.remove();

                this.setFilesInfo();

                this.fileListCnt = this.fileList.filter(item => item !== 'undefined').length;

                if(this.fileListCnt < 1) {
                    $('#cu_attach_list').hide();
                    $("#uploadMsg").show();
                    $('#attachInfo').children().remove();

                    // 파일 변수 초기화
                    this.reset('delete');
                }

            },
            // 업로드 파일 전체 삭제
            deleteAll(){
                if(this.fileListCnt === 0) {
                    gaiaCommon.customAlert("{{ message('msg.app.020') }}");
                    return false;
                }

                gaiaCommon.customConfirm("{{ message('item.app.010') }}", "{{ message('msg.app.021') }}", "", () => {
                    $('#fileList .attach_item').map(function() {
                        if($(this).data('status') === 'OLD') {
                            response.attach.delFileList.push({fileNo: $(this).data('fileno'), sno: $(this).data('sno')});
                        };
                    })

                    $('#formAttach .attach_item').remove();
                    $('#cu_attach_list').hide();
                    $("#uploadMsg").show();
                    $('#attachInfo').children().remove();

                    // 파일 변수 초기화
                    this.reset('delete');
                })
            },
            add(){
                $('#chooseFile').click();
            }
        },
    };



    $(document).ready(function () {
        response.makeSelectBox();
        response.init()

        var cTargetBtn = $(".collapse_btn");
        var cTargetArea = $(".collapse_body");
        $(cTargetBtn).click(function () {
            $(this).toggleClass('collapsed');
            $(this).parent().next(cTargetArea).slideToggle();
        });

        // 드래그 오버 이벤트
        $(document).on('dragover', '.attach_area', function (event) {
            event.preventDefault();
            $(this).addClass('dragging');
        });

        // 드래그 리브 이벤트
        $(document).on('dragleave', '.attach_area', function () {
            $(this).removeClass('dragging');
        });

        // 드롭 이벤트
        $(document).on('drop', '.attach_area', function (event) {
            event.preventDefault();
            event.stopPropagation();
            $(this).removeClass('dragging');

            const newFiles = event.originalEvent.dataTransfer.files;
            if (newFiles.length > 0) {
                response.attach.handleFiles(newFiles);
            }
        });
        gaia.loaded = true;
    });
</script>