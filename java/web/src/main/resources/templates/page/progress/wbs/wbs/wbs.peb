{% extends 'layout/base_content' %} {% block head %}
<style>
    .s_conts {
        height: calc(100dvh - 445px);
    }

    .treeview_area {
        height: calc(100dvh - 445px);
    }

    .treeview_area .treeview {
        height: calc(100dvh - 500px);
        overflow: auto;
    }
</style>
{% endblock %} {% block content %}
<article class="conts g-row" id="container">
    <div class="group">
        <div class="conts_form">
            <h3 class="conts_tit">{{ message("item.sub.040") }}</h3>
            <span class="selectbox">
                <select id="cntrctChgId" style="line-height:1.1"></select>
            </span>
        </div>
    </div>
    <div class="group">
        <h3 class="conts_tit">{{ message('item.wbs.001') }}</h3>
        <div class="s_conts ty1 conts">
            <div class="g-group g-col2 ty1">
                <!-- 트리 -->
                <div class="treeview_area">
                    <div class="treeview ty_pd0" id="jstree"></div>
                </div>

                <div class="conts_area">
                    <div class="conts_grid">
                        <div class="toolbar">
                            <div class="searchbox_wrap">
                                <input type="text" id="searchText" name="searchText"
                                    onkeypress="if( event.keyCode == 13 ){wbsGrid.search();}"
                                    placeholder="{{ message('item.wbs.002') }}, {{ message('item.wbs.003') }}" />
                                <button type="submit" class="icon_btn search" onclick="wbsGrid.search()">
                                    <i class="ic ic-search"></i>
                                    <span class="blind">{{ message('item.com.014') }}</span>
                                </button>
                            </div>
                        </div>
                        <div class="toolbar">
                            <div class="btn_area s_default">
                                {{ btnHtml | raw }}
                            </div>
                        </div>
                        <!-- 그리드 -->
                        <div class="grid" id="wbs-grid"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</article>
{% endblock content %}
{% block footer_script %}
<script>
    let pjtNo;
    var cntrctNo;
    var cntrctChgId;
    var upWbsCd;

    var init = function () {
        var searchText = null;
        cntrcNoSelectBox.init()
        // wbsGrid.init(searchText, cntrctChgId);
    }

    // 계약 selectBox
    var cntrcNoSelectBox = {
        init: function () {
            pjtNo = pjtInfo.pjtNo;

            if(isCAIROS()){
                document.querySelector('.s_conts').style.height = 'calc(100dvh - 365px)';
                document.querySelector('.treeview_area').style.height = 'calc(100dvh - 365px)';
                document.querySelector('.treeview_area .treeview').style.height = 'calc(100dvh - 420px)';
            }

            gaiaCommon.makeCntrctAndChgIdSelectBox(
                    "#container",
                    "#cntrctChgId",
                    () => {
                        wbsGrid.init();
                    },
                    (cntrctChgId) => {
                        upWbsCd = ''
                        wbsTree.clear(cntrctChgId);
                        wbsGrid.init(searchText, cntrctChgId, upWbsCd);
                    },
                    (cntrctChgId) => {
                        upWbsCd = ''
                        wbsTree.clear(cntrctChgId);
                        wbsGrid.init(searchText, cntrctChgId, upWbsCd);
                    }
            );
        }
    }

    // WBS 트리
    var wbsTree = {
        obj: null,
        clear: function (cntrctChgId) {
            if (this.obj) {
                $("#jstree").jstree(true).destroy();
            }
            this.init(cntrctChgId);
            $("#searchText").val("")
        },
        init: function (cntrctChgId) {

            this.obj = $("#jstree").jstree({

                core: {
                    data: function (obj, cb) {
                        gaiaCommon.get(`/api/progress/wbs/wbs/treeList?cntrctChgId=${cntrctChgId}`, {}, function (result) {
                            var data = [];
                            if (result.details?.wbsList) {
                                result.details?.wbsList.forEach((item, index) => {
                                    data.push({
                                        id: item.wbsCd,
                                        parent: (!item.upWbsCd || item.upWbsCd === "") ? "#" : item.upWbsCd,
                                        text: item.wbsNm,
                                        state: { opened: true },
                                        data: item,
                                        icons: 'fa-solid fa-caret-right',
                                    });
                                });
                                cb.call(obj, data);
                            }
                        });
                    },
                    check_callback: true,
                    themes: {
                        "theme": "default",
                        "dots": false,
                        "responsive": false,
                        "icons": false
                    }
                },
            });

            if (this.obj && $.isFunction(this.obj.on))
                this.obj.on("select_node.jstree", function (e, data) {
                    $('.jstree-anchor').siblings('nav.item_opt').css('display', 'none');
                    $('.jstree-anchor.jstree-clicked.current').siblings('nav.item_opt').css('display', 'contents');
                    upWbsCd = data.node?.data.wbsCd;
                    wbsGrid.init(searchText, cntrctChgId, upWbsCd);
                    $("#searchText").val("")
                });
        }
    }



    // WBS 그리드
    var wbsGrid = {
        data: {},
        init: function (searchText, cntrctChgId, upWbsCd) {
            const Grid = tui.Grid;
            let _this = this;

            if (this.wbsGrid) {
                this.wbsGrid.destroy(); // 기존 인스턴스 제거
                this.wbsGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/progress/wbs/wbs/grideList",
                    method: "Get",
                    initParams: {
                        searchText: searchText,
                        cntrctChgId: cntrctChgId,
                        upWbsCd: upWbsCd
                    },
                }
            });

            if (!this.wbsGrid) {

                let bodyHeight;

                if (gaiaCommon.me.isAdmin() || isGAIA()) {
                    bodyHeight = window.innerHeight - 570;
                } else if (isCAIROS()) {
                    bodyHeight = window.innerHeight - 490;
                }

                this.wbsGrid = new Grid({
                    el: document.getElementById("wbs-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: true,
                    draggable: false,
                    contextMenu: null,
                    bodyHeight: bodyHeight,
                    rowHeaders: [{ type: 'rowNum' }],
                    columns: [
                        {
                            header: "{{ message('item.wbs.002') }}",
                            name: "wbsCd",
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.wbs.003') }}",
                            name: "wbsNm",
                            width: 200,
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.wbs.004') }}",
                            name: "earlyStart",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.wbs.005') }}",
                            name: "earlyFinish",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.wbs.006') }}",
                            name: "actualStart",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.wbs.007') }}",
                            name: "actualFinish",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.wbs.008') }}",
                            name: "actual",
                            formatter: function (e) {
                                return e.row.actualFinish ? "100%" : e.row.actualFinish;
                            },
                            align: "center",
                        },

                    ],
                });
                this.wbsGrid.on('onGridUpdated', ev => {
                    let cnt = this.wbsGrid.getRowCount();
                    let minLevel = Number.MAX_SAFE_INTEGER;

                    for (let i = 0; i < cnt; i++) {
                        let level = this.wbsGrid.getValue(i, "wbsLevel");
                        if (level !== null && !isNaN(level)) {
                            this.wbsGrid.addRowClassName(i, `bg-lv${level}`);
                        }
                    }
                });
                this.wbsGrid.on("errorResponse", function (ev) {
                    // ev.xhr: XMLHttpRequest 객체를 참조
                    const statusCode = ev.xhr.status;
                    if (statusCode === 403) {
                        gaiaCommon.customAlert(SESSION_EXPIRED_MSG, () => { location.reload(); });
                    } else {
                        console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                    }
                });
            }
            refreshGrid(wbsGrid.wbsGrid);
        },
        search() {
            const searchText = $("#searchText").val();
            wbsGrid.init(searchText, cntrctChgId, upWbsCd);
        },
        exportToExcel: function () {
            const options = {
                includeHiddenColumns: false,
                onlySelected: true,
                fileName: "{{ message('item.wbs.001') }}",
            };

            this.wbsGrid.export("xlsx", options);
        },
    }

    $(function () {
        gaia.create({
            $init: function ($params) {
                gaiaPortal.navMenuInit("M020202", "{{ message('item.wbs.009') }}");
                init();

                gaia.loaded = true
            }
        });
    })
</script>
<script src="/webjars/jstree/jstree.min.js"></script>
{% endblock footer_script %}