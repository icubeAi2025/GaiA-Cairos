{% extends 'layout/base_content' %} {% block content %}
<section class="contents_wrap g-row">

    <article class="conts g-row" id="contract_container">
        <div class="group">

            <h3 class='conts_tit' >{{ message('item.sub.040') }}</h3>
            <div class="search_wrap" >
                <span class='selectbox'>
                    <select name='cntrctChgId' id='cntrctChgId' style='width: 250px;' disabled></select>
                </span>
            </div>
            <div class="toolbar" style="margin-top: 30px;">
                <div class="item_group" role="group" aria-label="Basic radio group" id="grid_radio">
                    <label class="form_check">
                        <input type="radio" id="month" name="useYnGrid" class="check_mark" value="month" checked />
                        <span class="check_label">{{ message('item.plan.002') }}</span> <!-- 월별 -->
                    </label>
                    <label class="form_check">
                        <input type="radio" id="quarter" name="useYnGrid" class="check_mark" value="quarter" />
                        <span class="check_label">{{ message('item.plan.001') }}</span> <!-- 분기별 -->
                    </label>
                    <div class="btn_area s_default" style="margin-left: 50px;">
                        <nav class="tab_nav">
                            <ul class="tab_list tab_btngroup">
                                <li class="tab_item active" data-id="tabs01">{{message('item.plan.003')}}</li>
                                <!-- 그래프 -->
                                <li class="tab_item" data-id="tabs02">{{message('item.plan.004')}}</li>
                                <!-- 바차트 -->
                            </ul>
                        </nav>
                    </div>
                </div>

            </div>

            <div class="tab_conts_wrap">
                <div id="tabs01" class="tab_conts active">
                    <div class="put_txt _unit_won" id="graph_unit"></div>
                    <!-- 그래프 -->
                    <div class="graph" id="chart-container" style="width: 100%; height: 400px;">
                        <canvas class="grid" id="graph"></canvas>
                    </div>
                </div>

                <div id="tabs02" class="tab_conts active" style="visibility:hidden; height: 0">
                    <div class="color-legend" style="margin-top: 5px; margin-bottom: 10px;">
                        <span
                            style="display: inline-block; width: 15px; height: 15px; background-color: #9DC3E6; margin-right: 5px; vertical-align: middle;"></span>
                        <span style="vertical-align: middle;">{{ message('item.plan.009') }}</span>
                        <span
                            style="display: inline-block; width: 15px; height: 15px; background-color: #00B050; margin-right: 5px; margin-left: 20px; vertical-align: middle;"></span>
                        <span style="vertical-align: middle;">{{ message('item.plan.010') }}(BL)</span>
                        <div
                            style="display: inline-block; width: 30px; height: 0; border-top: 2px dashed red; margin-right: 5px; margin-left: 20px; vertical-align: middle;">
                        </div>
                        <span id="today-date" style="vertical-align: middle;">{{ message('item.plan.015') }}</span>
                    </div>
                    <!-- 바차트 -->
                    <div class="grid" id="chartGrid"></div>
                </div>
            </div>
        </div>

        <div class="group">
            <div class="conts_grid">
                <div class="toolbar">
                    <div class="btn_area s_default">
                        <button type="button" class="btn _outline" onclick="planGrid.exportToExcel()"
                            style="display:none;">
                            {{ message('btn.023') }}
                        </button>
                    </div>
                </div>
                <div class="grid" id="planGrid"></div>
            </div>
        </div>
    </article>
</section>
{% endblock content %}
{% block footer_script %}
<style>
    #graph {
        width: 100% !important;
    }

    .tab_item.active {
        background-color: #FFF000 !important;
        color: var(--color-default) !important;
    }

    #chartGrid .tui-grid-cell-content {
        padding: 0 !important;
    }


    #chartGrid .tui-grid-cell-has-input:not(.activity) {
        border-right: none !important;
        border-left: none !important;
        position: relative;
    }

    .today-line {
        position: absolute;
        top: 0;
        left: 50%;
        height: 100%;
        width: 0px;
        border: 2px dashed red;
    }

    #graph_unit {
        top: -10px;
        position: relative;
    }

    #graph_unit.put_txt._unit_won:after {
        content: '금액 단위: 십만원\A\A누계 단위: 백만원';
        white-space: pre;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var cntrctChgId;
    var cntrctNo;
    var pjtNo;
    var graphInstance;
    var viewType = 'month';
    var planGridData = [];

    

    $(function () {
        gaia.create({
            $init: function ($params) {
                init();
                gaia.loaded = true;
            }
        });
    });

    var init = function () {
        pjtNo = pjtInfo.pjtNo;

        $(function () {
            var title = "{{ message('item.plan.000') }}"  // 계획 대비 실적
            gaiaPortal.navMenuInit('M0205', title);
        })

        if (!planGrid.planGrid) {
            planGrid.init();
        }

        // 분기별/월별 선택
        $('#grid_radio input').on('change', function () {
            $('#tabs02').addClass('active')
            viewType = $(this).val();
            planGrid.get(viewType);
            chartGrid.init(viewType);   // 바차트 그리드
        });

        // 그리드&바차트 탭 클릭
        $(".tab_nav .tab_item").on("click", function () {
            const target = $(this).data("id");
            if (target === "tabs02") {
                $('#tabs02').css('visibility','visible').css('height','auto')
            }
        });


        gaiaCommon.makeCntrctAndChgIdSelectBox(
                "#contract_container",
                "#cntrctChgId",
                () => {
                    planGrid.init(viewType);
                },
                (cntrctChgId) => {
                    planGrid.get(viewType);
                    chartGrid.init(viewType);
                },
                (cntrctChgId) => {
                    planGrid.get(viewType);
                    chartGrid.init(viewType);
                }
        );

        // 오늘 날짜 추가
        var today = new Date();
        var formattedDate = today.getFullYear() + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0');
        $("#today-date").text("{{ message('item.plan.015') }}(" + formattedDate + ")");
    };

    // 계획대비실적 그리드
    let planGrid = {
        init: function () {
            let _this = this;

            if (!this.planGrid) {
                this.planGrid = new tui.Grid({
                    el: document.getElementById('planGrid'),
                    bodyHeight: 350,
                    scrollX: false,
                    scrollY: true,
                    contextMenu: null,
                    columns: [
                        {
                            header: "{{ message('item.com.051') }}",   // 일정
                            name: 'dt', align: 'center', width: 250,
                        },
                        {
                            header: "{{ message('item.plan.007') }}",   // 당기
                            name: 'plan_cst', align: 'right',
                        },
                        {
                            header: "{{ message('item.plan.008') }}",   // 누계
                            name: 'plan_cum', align: 'right',
                        },
                        {
                            header: "{{ message('item.plan.007') }}",   // 당기
                            name: 'actual_cst', align: 'right',
                        },
                        {
                            header: "{{ message('item.plan.008') }}",   // 누계
                            name: 'actual_cum', align: 'right',
                        },
                        {
                            header: "{{ message('item.plan.007') }}",   // 당기
                            name: 'plan_cst_per', align: 'center'
                        },
                        {
                            header: "{{ message('item.plan.008') }}",   // 누계
                            name: 'plan_cum_per', align: 'center'
                        },
                        {
                            header: "{{ message('item.plan.007') }}",   // 당기
                            name: 'actual_cst_per', align: 'center'
                        },
                        {
                            header: "{{ message('item.plan.008') }}",   // 누계
                            name: 'actual_cum_per', align: 'center'
                        },
                        { header: "cntrctno", name: "cntrctno", hidden: true }
                    ],
                    header: {
                        height: 110,
                        complexColumns: [
                            {
                                header: "{{ message('item.construction.018') }}",   // 계획
                                name: 'cost_plan',
                                childNames: ['plan_cst', 'plan_cum'],
                            },
                            {
                                header: "{{ message('item.construction.019') }}",   // 실적
                                name: 'cost_performance',
                                childNames: ['actual_cst', 'actual_cum']
                            },
                            {
                                header: "{{ message('item.plan.006') }}",   //비용(원)
                                name: 'cost',
                                childNames: ['cost_plan', 'cost_performance'],
                            },
                            {
                                header: "{{ message('item.construction.018') }}",   // 계획
                                name: 'progress_plan',
                                childNames: ['plan_cst_per', 'plan_cum_per']
                            },
                            {
                                header: "{{ message('item.construction.019') }}",   // 실적
                                name: 'progress_performance',
                                childNames: ['actual_cst_per', 'actual_cum_per']
                            },
                            {
                                header: "{{ message('item.progressstatus.009') }}",   // 보할(%)
                                name: 'progress',
                                childNames: ['progress_plan', 'progress_performance'],
                            }
                        ]
                    }

                });
                let list = this.get(viewType);
                if (list) {
                    refreshGrid(this.planGrid);
                }
            }
        },
        exportToExcel: function () {
            const options = {
                includeHiddenColumns: false,
                onlySelected: true,
                fileName: "계획 대비 실적",
            };

            this.planGrid.export("xlsx", options);
        },
        get: function (viewType) {
            cntrctChgId = $('#cntrctChgId').val();
            if (!this.planGrid) {
                return;
            }
            let _this = this;
            let data = [];

            var param = {
                cntrctChgId: cntrctChgId,
                viewType: viewType
            }

            gaiaCommon.post('/api/progress/actualtoplan/actualtoplanData', param, function (result) {
                data = result.details.data;
                planGridData = data;

                let formattedData = data.map((item, index) => ({
                    dt: item.dt,
                    plan_cst: roundToInt(item.plan_sum),
                    plan_cum: roundToInt(item.plan_max),
                    actual_cst: roundToInt(item.actual_sum),
                    actual_cum: roundToInt(item.actual_max),
                    plan_cst_per: roundToTwo(item.plan_cst_per),
                    plan_cum_per: roundToTwo(item.plan_cum_per),
                    actual_cst_per: roundToTwo(item.actual_cst_per),
                    actual_cum_per: roundToTwo(item.actual_cum_per),
                    cntrctno: item.cntrctno
                }));

                _this.planGrid.resetData(formattedData);
                renderGraph.init();
            });

            return data;

            // 소수점 없애고 반올림
            function roundToInt(value) {
                if (value === null || value === undefined || value === '') {
                    return 0;
                } else {
                    return Math.round(value).toLocaleString();
                }
            }

            // 소수점 두자리 반올림
            function roundToTwo(value) {
                if (value === null || value === undefined || value === '') {
                    return 0;
                } else {
                    return Math.round(value * 100) / 100;
                }
            }
        }
    }

    // 바차트 그리드
    let chartGrid = {
        init: function (viewType) {
            let _this = this;
            const today = new Date();
            const todayYear = today.getFullYear();
            const todayMonth = today.getMonth() + 1;

            if (!cntrctChgId) {
                return;
            }

            this.getYearData().then(yearData => {
                const minYear = yearData.min_year;
                const maxYear = yearData.max_year;

                if (this.chartGrid) {
                    this.chartGrid.destroy();
                    this.chartGrid = null;
                    document.getElementById('chartGrid').innerHTML = '';
                }

                if (viewType === "quarter") {
                    // 분기별 컬럼 설정
                    columns = [
                        { header: "Activity ID", name: 'activityId', resizable: true, align: 'center', width: 200, className: 'activity' },
                        { header: "Activity 이름", name: 'activityNm', resizable: true, align: 'center', width: 300, className: 'activity' },
                    ];

                    for (let year = minYear; year <= maxYear; year++) {
                        for (let quarter = 1; quarter <= 4; quarter++) {
                            const quarterHeader = `Q${quarter}`;
                            const quarterName = `${year}_${quarter}`;   // 2024_1형식(2024년 1분기)
                            columns.push({
                                header: quarterHeader,
                                name: quarterName,
                                align: 'center',
                                formatter: function (item) {
                                    const planStart = new Date(item.row.planStart);
                                    const planFinish = new Date(item.row.planFinish);
                                    const actualStart = new Date(item.row.actualStart);
                                    const actualFinish = new Date(item.row.actualFinish);

                                    // 바 생성 또는 투명 바 유지
                                    const planBars = _this.generateQuarterBars(
                                        planStart && planFinish ? planStart : new Date(),
                                        planStart && planFinish ? planFinish : new Date(),
                                        quarterName,
                                        planStart && planFinish ? '#9DC3E6' : 'rgba(0,0,0,0)' // 투명 바 처리
                                    );

                                    // 바 생성 또는 투명 바 유지
                                    const actualBars = _this.generateQuarterBars(
                                        actualStart && actualFinish ? actualStart : new Date(),
                                        actualStart && actualFinish ? actualFinish : new Date(),
                                        quarterName,
                                        actualStart && actualFinish ? '#00B050' : 'rgba(0,0,0,0)' // 투명 바 처리
                                    );

                                    // 오늘 날짜가 해당 분기에 속하는지 확인
                                    const todayLine = (year === todayYear && _this.isQuarterMatching(todayMonth, quarter))
                                        ? _this.getTodayLine()
                                        : '';

                                    // 바 스타일 설정
                                    return `
                                            <div style="height: 100%; display: flex; flex-direction: column; align-items: center;">
                                                ${planBars}
                                                ${actualBars}
                                                ${todayLine}
                                            </div>
                                        `;

                                }
                            });
                        }
                    }
                    complexColumns = [];
                    for (let year = minYear; year <= maxYear; year++) {
                        complexColumns.push({
                            header: year.toString(),
                            name: year.toString(),
                            childNames: [`${year}_1`, `${year}_2`, `${year}_3`, `${year}_4`] // Q1, Q2, Q3, Q4
                        });
                    }
                } else {
                    // 월별 컬럼 설정
                    columns = [
                        { header: "Activity ID", name: 'activityId', resizable: true, align: 'center', width: 200, className: 'activity' },
                        { header: "Activity 이름", name: 'activityNm', resizable: true, align: 'center', width: 300, className: 'activity' },
                    ];
                    for (let year = minYear; year <= maxYear; year++) {
                        for (let month = 1; month <= 12; month++) {
                            const monthHeader = `${month}월`;
                            const monthName = `${year}-${month < 10 ? '0' + month : month}`; // '1' -> '01' 형식
                            columns.push({
                                header: monthHeader,
                                name: monthName,
                                align: 'center',
                                formatter: function (item) {
                                    const planStart = new Date(item.row.planStart);
                                    const planFinish = new Date(item.row.planFinish);
                                    const actualStart = new Date(item.row.actualStart);
                                    const actualFinish = new Date(item.row.actualFinish);

                                    const planBars = _this.generateBars(
                                        item.row.planStart ? planStart : new Date(),
                                        item.row.planFinish ? planFinish : new Date(),
                                        monthName,
                                        item.row.planStart && item.row.planFinish ? '#9DC3E6' : 'rgba(0,0,0,0)' // 투명 바 처리
                                    );

                                    const actualBars = _this.generateBars(
                                        item.row.actualStart ? actualStart : new Date(),
                                        item.row.actualFinish ? actualFinish : new Date(),
                                        monthName,
                                        item.row.actualStart && item.row.actualFinish ? '#00B050' : 'rgba(0,0,0,0)' // 투명 바 처리
                                    );

                                    // 오늘 날짜가 해당 월에 속하는지 확인
                                    const todayLine = (year === todayYear && month === todayMonth)
                                        ? _this.getTodayLine()
                                        : '';

                                    // 바 스타일 설정
                                    return `
                                            <div style="height: 100%; display: flex; flex-direction: column; align-items: center;">
                                                ${planBars}
                                                ${actualBars}
                                                ${todayLine}
                                            </div>
                                        `;
                                }
                            });
                        }
                    }
                    complexColumns = [];
                    for (let year = minYear; year <= maxYear; year++) {
                        const childNames = [];
                        for (let month = 1; month <= 12; month++) {
                            childNames.push(`${year}-${month < 10 ? '0' + month : month}`); // '1' -> '01' 형식
                        }
                        complexColumns.push({ header: year.toString(), name: year.toString(), childNames: childNames });
                    }
                }

                if (!this.chartGrid) {
                    this.chartGrid = new tui.Grid({
                        el: document.getElementById('chartGrid'),
                        bodyHeight: 400,
                        scrollX: true,
                        scrollY: true,
                        contextMenu: null,
                        columns: columns,
                        header: {
                            height: 70,
                            complexColumns: complexColumns
                        }
                    })
                }

                let list = this.get();
                if (list) {
                    refreshGrid(this.chartGrid);
                }
            });
        },
        // 오늘 날짜가 해당 분기에 속하는지 확인하는 함수
        isQuarterMatching: function (month, quarter) {
            const quarterStartMonth = (quarter - 1) * 3 + 1; // 해당 분기의 시작 달
            const quarterEndMonth = quarterStartMonth + 2;   // 해당 분기의 마지막 달
            return month >= quarterStartMonth && month <= quarterEndMonth;
        },
        // 오늘 날짜가 속한 위치에 세로선을 그리기 위한 함수
        getTodayLine: function () {
            return `<div class="today-line"></div>`; // 선을 중앙에 배치
        },
        // 분기별 바
        generateQuarterBars: function (startDate, endDate, quarterName, color) {
            let bars = '';
            const startYear = startDate.getFullYear();
            const endYear = endDate.getFullYear();

            const startQuarter = Math.floor(startDate.getMonth() / 3) + 1;
            const endQuarter = Math.floor(endDate.getMonth() / 3) + 1;

            let hasData = false; // 데이터 여부 체크

            for (let year = startYear; year <= endYear; year++) {
                const quarterStart = (year === startYear) ? startQuarter : 1;
                const quarterEnd = (year === endYear) ? endQuarter : 4;

                for (let quarter = quarterStart; quarter <= quarterEnd; quarter++) {
                    const periodIdentifier = `${year}_${quarter}`;
                    if (periodIdentifier === quarterName) {
                        hasData = true;
                        bars += `<div style="width: 100%; height: 10px; background-color: ${color};"></div>`;
                    }
                }
            }

            // 데이터가 없으면 투명 바 추가
            if (!hasData) {
                bars = `<div style="width: 100%; height: 10px; background-color: rgba(0,0,0,0);"></div>`;
            }
            return bars;
        },

        // 월별 바
        generateBars: function (startDate, endDate, monthName, color) {
            let bars = '';
            const currentMonth = new Date(startDate.getTime());

            let hasData = false; // 데이터 여부 체크

            while (
                currentMonth.getFullYear() < endDate.getFullYear() ||
                (currentMonth.getFullYear() === endDate.getFullYear() && currentMonth.getMonth() <= endDate.getMonth())
            ) {
                const yearMonth = `${currentMonth.getFullYear()}-${(currentMonth.getMonth() + 1).toString().padStart(2, '0')}`;

                if (yearMonth === monthName) {
                    hasData = true;
                    bars += `<div style="width: 100%; height: 10px; background-color: ${color};"></div>`;
                }

                currentMonth.setMonth(currentMonth.getMonth() + 1);
            }

            // 데이터가 없으면 투명 바 추가
            if (!hasData) {
                bars = `<div style="width: 100%; height: 10px; background-color: rgba(0,0,0,0);"></div>`;
            }
            return bars;
        },
        getYearData: function () {  // header에 들어갈 연도
            return new Promise((resolve, reject) => {
                var param = {
                    cntrctChgId: cntrctChgId !== null ? cntrctChgId : null
                };
                $.ajax({
                    url: '/api/progress/actualtoplan/chartYear',
                    method: 'POST',
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(param),
                    success: function (response) {
                        if (response.ok) {
                            resolve(response.details.year);
                        } else {
                            reject(new Error("Failed to retrieve year data"));
                        }
                    },
                    error: function (response) {
                        console.error(response);
                        reject(response);
                    }
                });
            });
        },
        get: function () {
            if (!this.chartGrid) {
                return;
            }
            let _this = this;
            let data = [];

            var param = {
                cntrctChgId: cntrctChgId !== null ? cntrctChgId : null
            }
            $.ajax({
                url: '/api/progress/actualtoplan/activityList',
                method: 'POST',
                dataType: 'json',
                contentType: 'application/json; charset-utf-8',
                data: JSON.stringify(param),
                async: false,
                success: function (response) {
                    data = response.details.activityList;

                    let formattedData = data.map((item, index) => ({
                        activityId: item.activityId,
                        activityNm: item.activityNm,
                        planStart: item.planStart,
                        planFinish: item.planFinish,
                        actualStart: item.actualStart,
                        actualFinish: item.actualFinish
                    }));

                    if (data.length > 0) {
                        chartGrid.chartGrid.resetData(formattedData);
                    } else {
                        chartGrid.chartGrid.resetData([]);
                    }
                },
                error: function (response) {
                    console.log(response);
                }
            });
            return data;
        },
    };

    /*  실적은 오늘 날짜 기준으로 지난 달, 지난 달이 속한 분기 까지만 */
    // 그래프 생성
    let renderGraph = {
        init: function (){
            if (graphInstance) {
                graphInstance.destroy(); // 그래프 인스턴스 삭제
                graphInstance = null;
            }

            let data = planGridData;

            // 오늘 날짜 가져오기
            const today = new Date();
            const currentYear = today.getFullYear();
            const currentMonth = today.getMonth();  // 0부터 11까지(1월 = 0, 2월 = 1, ..., 12월 = 11)
            const currentQuarter = Math.floor(currentMonth / 3) + 1; // 1분기부터 4분기 계산
            const previousQuarter = currentQuarter - 1; // 이전 분기 계산

            // 이전 분기가 1분기보다 작으면 전년도 4분기로 설정
            const targetYear = previousQuarter < 1 ? currentYear - 1 : currentYear;
            const targetQuarter = previousQuarter < 1 ? 4 : previousQuarter;

            // 지난 달/지난 분기
            const todayLabel = viewType === 'quarter'
                    ? `${targetYear}-${targetQuarter}분기`
                    : `${currentYear}-${(currentMonth === 0 ? 12 : currentMonth).toString().padStart(2, '0')}`;

            // 그래프의 기준(가로)
            var labels = data.map(item => item.dt);

            // 계획 월별의 데이터
            var data1 = data.map(item => Math.round(item.plan_sum / 100000));
            var data1formax = data.map(item => Math.round(item.plan_sum / 1000000));

            // 실적 월별의 데이터
            var data2 = data.map(item => Math.round(item.actual_sum / 100000));
            var data2formax = data.map(item => Math.round(item.actual_sum / 1000000));

            // 계획 누계의 데이터
            var data3 = data.map(item => Math.round(item.plan_max / 1000000));

            // 실적 누계의 데이터
            var data4 = data.map(item => Math.round(item.actual_max / 1000000));

            // 실적 누계에서 지난 달/ 지난 분기까지만 포함
            var filteredData = data.filter(item => {
                return item.dt <= todayLabel;
            });
            var filteredLabels = filteredData.map(item => item.dt);
            var filteredData4 = filteredData.map(item => Math.round(item.actual_max / 1000000));

            // 모든 데이터에서 최대값 찾기
            var allData = [...data1formax, ...data2formax, ...data3, ...data4];
            var maxValue = Math.max(...allData);

            // y축의 최대값 계산 (최대값을 반올림하여 1,000 단위로 설정)
            var yAxisMax = Math.ceil(maxValue / 1000) * 1000;
            var stepSize = Math.pow(10, Math.floor(Math.log10(yAxisMax)));  // y축 범위(yAxisMax의 자릿수)

            var graphElement = document.getElementById('graph');

            graphInstance = new Chart(graphElement, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            type: 'bar', // 막대 그래프
                            label: '계획 월별',
                            data: data1,
                            backgroundColor: '#ffd865',
                            maxBarThickness: 50,
                            order: 1, // 막대 그래프 우선 순위
                            barThickness: 15, // 막대 너비 조정
                            categoryPercentage: 1.0, // 막대 간격 조정
                            barPercentage: 1.0, // 막대 너비 조정
                        },
                        {
                            type: 'bar',
                            label: '실적 월별',
                            data: data2,
                            backgroundColor: '#0070bf',
                            maxBarThickness: 50,
                            order: 1,
                            barThickness: 15, // 막대 너비 조정
                            categoryPercentage: 1.0, // 막대 간격 조정
                            barPercentage: 1.0, // 막대 너비 조정

                        },
                        {
                            type: 'line', // 선형 그래프
                            label: '계획 누계',
                            data: data3,
                            borderColor: '#40c37c',
                            fill: false, // 선형 그래프는 채우기 없음
                            order: 0, // 선형 그래프 우선 순위 (가장 앞에)
                            pointRadius: 0,

                        },
                        {
                            type: 'line',
                            label: '실적 누계',
                            data: filteredData4,
                            borderColor: '#ff4343',
                            fill: false,
                            order: 0,
                            pointRadius: 0,

                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 0
                    },
                    plugins: {
                        legend: {
                            align: 'start',
                            display: true,
                            labels: {
                                usePointStyle: true,
                                generateLabels: function (chart) {
                                    const datasets = chart.data.datasets;
                                    return datasets.map((dataset, i) => {
                                        const isLineType = dataset.type === 'line';
                                        return {
                                            text: dataset.label,
                                            fillStyle: isLineType ? 'transparent' : dataset.backgroundColor,
                                            strokeStyle: dataset.borderColor || dataset.backgroundColor,
                                            hidden: !chart.isDatasetVisible(i),
                                            lineWidth: 2,
                                            borderDash: isLineType ? [1, 1] : [],
                                            pointStyle: isLineType ? 'line' : 'rect',
                                            datasetIndex: i
                                        };
                                    });
                                },
                            },
                            onClick: function (e, legendItem, legend) {
                                const index = legendItem.datasetIndex;
                                const chart = legend.chart;
                                // 클릭 시 데이터셋 토글 (보이기/숨기기)
                                chart.setDatasetVisibility(index, !chart.isDatasetVisible(index));
                                chart.update();
                            },
                        },
                    },
                    scales: {
                        y: {
                            min: 0,
                            max: yAxisMax,
                            ticks: {
                                stepSize: stepSize,
                                callback: function (value) {
                                    return value;
                                }
                            }
                        },
                        x: {
                            stacked: false, // x축에 스택 비활성화
                        }
                    }
                }
            });
        },
      }
</script>
{% endblock footer_script %}