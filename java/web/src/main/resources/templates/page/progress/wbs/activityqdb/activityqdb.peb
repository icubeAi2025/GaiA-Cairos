{% extends 'layout/base_content' %}
{% block content %}
<style>
    #wbs_activity_grid .tui-grid-cell-current-row,
    #cbs_detail_grid .tui-grid-cell-current-row {
        background-color: var(--select-list-bg);
    }

    .conts_area {
        overflow: auto;
    }

    .s_conts {
        overflow: unset !important;
    }

    .treeview_area .treeview {
        height: 1150px;
        overflow: auto;
    }
</style>
<section class="contents_wrap">
    <article class="conts" id="cnt-select-box">
        <div class="group">
            <div class="conts_form">
                <h3 class="conts_tit">{{ message("item.sub.040") }}</h3>
                <span class="selectbox">
                    <select id="cntrctChg_select" class="">
                    </select>
                </span>
            </div>
        </div>
        <div class="group">
            <div class="s_conts g-group" id="page_box">
                <div class="conts_tab">
                    <nav class="tab_nav">
                        <ul class="tab_list tab_default">
                            <li class="tab_item" data-id="tabs01">WBS {{ message('item.activityQdb.001') }}</li>
                            <li class="tab_item" data-id="tabs02">CBS {{ message('item.activityQdb.001') }}</li>
                        </ul>
                    </nav>

                    <div class="tab_conts_wrap" style="height: unset;">
                        <div id="tabs01" class="tab_conts">
                            <article class="s_conts ty1 conts">
                                <div class="g-group g-col2 ty1">
                                    <div class="treeview_area">
                                        <div class="treeview ty_pd0" id="wbstree"></div>
                                    </div>

                                    <div class="conts_area">
                                        <div class="group">
                                            <h3 class="conts_tit">Activity</h3>
                                            <div class="conts_grid">
                                                <div class="search_wrap">
                                                    <div class="searchbox_wrap">
                                                        <input type="text" id="wbsActiSearchText" name="searchText"
                                                            placeholder="WBS, Act.Id, Act.{{ message('item.com.024') }}"
                                                            onkeyup="if(window.event.keyCode == 13) wbs.activityGrid.search();" />
                                                        <button type="submit" class="icon_btn search"
                                                            onclick="wbs.activityGrid.search()">
                                                            <i class="ic ic-search"></i>
                                                            <span class="blind">검색</span>
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="toolbar">
                                                    <div class="btn_area s_default">
                                                        <button type="button" class="btn _outline"
                                                            onclick="wbs.activityGrid.excel()" style="display: none;">
                                                            {{message('btn.023') }}
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="grid" id="wbs_activity_grid"></div>
                                            </div>
                                        </div>
                                        <div class="group">
                                            <h3 class="conts_tit">CBS</h3>
                                            <div class="conts_grid">
                                                <div class="search_wrap">
                                                    <div class="searchbox_wrap">
                                                        <input type="text" id="qdbSearchText" name="searchText"
                                                            placeholder="{{ message('item.projectcost.001') }}, {{ message('item.projectcost.002') }}"
                                                            onkeyup="if(window.event.keyCode == 13) wbs.wbsQdbGrid.search();" />
                                                        <button type="submit" class="icon_btn search"
                                                            onclick="wbs.wbsQdbGrid.search()">
                                                            <i class="ic ic-search"></i>
                                                            <span class="blind">검색</span>
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="grid" id="wbs_qdb_grid"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </article>
                        </div>

                        <div id="tabs02" class="tab_conts">
                            <article class="s_conts ty1 conts" style="height: auto;">
                                <div class="g-group g-col2 ty1">
                                    <div class="treeview_area">
                                        <div class="treeview ty_pd0" id="cbstree"></div>
                                    </div>

                                    <div class="conts_area">
                                        <div class="group">
                                            <h3 class="conts_tit">CBS</h3>
                                            <div class="conts_grid">
                                                <div class="search_wrap">
                                                    <div class="searchbox_wrap">
                                                        <input type="text" id="cbsSearchText" name="searchText"
                                                            placeholder="CBS, {{ message('item.projectcost.001') }}, {{ message('item.projectcost.002') }}"
                                                            onkeyup="if(window.event.keyCode == 13) cbs.cbsGrid.search();" />
                                                        <button type="submit" class="icon_btn search"
                                                            onclick="cbs.cbsGrid.search()">
                                                            <i class="ic ic-search"></i>
                                                            <span class="blind">검색</span>
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="toolbar">
                                                    <div class="btn_area s_default">
                                                        <button type="button" class="btn _outline"
                                                            onclick="cbs.cbsGrid.excel()" style="display: none;">
                                                            {{message('btn.023') }}
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="grid" id="cbs_detail_grid"></div>
                                            </div>
                                        </div>
                                        <div class="group">
                                            <h3 class="conts_tit">Activity</h3>
                                            <div class="conts_grid">
                                                <div class="search_wrap">
                                                    <div class="searchbox_wrap">
                                                        <input type="text" id="cbsActiSearchText" name="searchText"
                                                            placeholder="WBS, Act.Id, Act.{{ message('item.com.024') }}"
                                                            onkeyup="if(window.event.keyCode == 13) cbs.cbsQdbGrid.search();" />
                                                        <button type="submit" class="icon_btn search"
                                                            onclick="cbs.cbsQdbGrid.search();">
                                                            <i class="ic ic-search"></i>
                                                            <span class="blind">검색</span>
                                                        </button>
                                                    </div>
                                                </div>

                                                <div class="grid" id="cbs_qdb_grid"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </article>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </article>

</section>

{% endblock content %}
{% block footer_script %}

<script>
    var BASEPATH = '/api/progress/wbs/activityqdb';

    var selectCntrctChgId;
    var selectWbsCd;
    var selectActivityId;
    var selectUnitCnstType;
    var selectCnsttyCd;
    var selectCnsttySn;
    var selectDtlCnsttySn

    var activityQdb = {
        init() {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;

            gaiaCommon.makeCntrctAndChgIdSelectBox(
                    "#cnt-select-box",
                    "#cntrctChg_select",
                    () => {
                        wbs.init(null);
                    },
                    (cntrctChgId) => {
                        selectCntrctChgId = cntrctChgId
                        if ($('.tab_item.active').data('id') === 'tabs01') {
                            wbs.init(cntrctChgId);
                        } else {
                            cbs.init(cntrctChgId);
                        }
                    },
                    (cntrctChgId) => {
                        selectCntrctChgId = cntrctChgId
                        if ($('.tab_item.active').data('id') === 'tabs01') {
                            wbs.init(cntrctChgId);
                        } else {
                            cbs.init(cntrctChgId);
                        }
                    }
            );

            gaia.loaded = true;
        },
    }

    // WBS 탭 함수
    var wbs = {
        init(chgId) {
            selectCntrctChgId = chgId;
            wbs.activityWbsTree.init();
        },
        activityWbsTree: {
            wbsObj: null,
            refresh: function () {
                this.wbsObj.jstree(true).refresh();
            },

            getNode: function (id) {
                return this.wbsObj.jstree("get_node", id);
            },
            init: function () {
                if (this.wbsObj) {
                    this.wbsObj.jstree(true).destroy();
                    $('#wbstree').empty();
                }
                let param = {
                    cntrctChgId: selectCntrctChgId
                }
                this.wbsObj = $("#wbstree").jstree({
                    plugins: ["search"],
                    core: {
                        data: function (obj, cb) {
                            gaiaCommon.get(BASEPATH + '/wbsTreeList', param, function (result) {
                                var data = [];
                                if (result.details?.wbsTreeList) {
                                    result.details?.wbsTreeList.forEach((item, index) => {
                                        data.push({
                                            id: item.wbs_cd,
                                            parent: item.up_wbs_cd,
                                            text: item.wbs_nm,
                                            state: { opened: true },
                                            data: item,
                                            icons: 'fa-solid fa-caret-right',
                                        });
                                    });
                                    cb.call(obj, data);
                                }
                            });
                        },
                        check_callback: true,
                        themes: {
                            "theme": "default",
                            "dots": false,
                            "responsive": false,
                            "icons": false
                        }
                    },
                });
                $("#wbstree").on("ready.jstree", () => {
                    selectWbsCd = this.wbsObj.jstree("get_node", "#").children[0];
                    this.wbsObj.jstree("select_node", selectWbsCd);
                    wbs.activityGrid.init(selectWbsCd);
                    wbs.wbsQdbGrid.init();

                    this.wbsObj.on("select_node.jstree", function (e, data) {
                        let selectedNode = data.node.data;
                        selectWbsCd = selectedNode.wbs_cd;
                        if (selectWbsCd) {
                            wbs.activityGrid.init(selectWbsCd);
                            wbs.wbsQdbGrid.init();
                        }
                        selectActivityId = '';
                    });
                })
            }
        },
        activityGrid: {
            init: function (wbsCd, searchText) {
                const Grid = tui.Grid;
                let _this = this;

                if (this.actiGrid) {
                    this.actiGrid.destroy(); // 기존 인스턴스 제거
                    this.actiGrid = null;
                }

                const dataSource = createDataSource({
                    readData: {
                        url: "/api/progress/wbs/activity/gridList",
                        method: "GET",
                        initParams: {
                            cntrctChgId: selectCntrctChgId,
                            wbsCd: wbsCd,
                            searchText: searchText
                        },
                    }
                });

                if (!this.actiGrid) {
                    this.actiGrid = new Grid({
                        el: document.getElementById("wbs_activity_grid"),
                        data: dataSource,
                        scrollX: true,
                        scrollY: true,
                        contextMenu: null,
                        minBodyHeight: 40,
                        width: 'auto',
                        bodyHeight: 400,
                        header: {
                            height: 100,
                            complexColumns: [
                                {
                                    header: "{{ message('item.com.048') }}",
                                    name: "days",
                                    childNames: [
                                        "intlDuration",
                                        "remndrDuration"
                                    ],
                                },
                                {
                                    header: "{{ message('item.com.050') }}",
                                    name: "cost",
                                    childNames: [
                                        "exptCost",
                                        "acmtlCost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.com.051') }}",
                                    name: "date",
                                    childNames: [
                                        "planStart",
                                        "planFinish",
                                        "actualStart",
                                        "actualFinish",
                                    ],
                                },
                            ],
                        },
                        columns: [
                            { name: 'wbsNm', header: "WBS", align: 'left', resizable: true, ellipsis: true, width: 180, },
                            { name: 'activityId', header: "Activity ID", align: 'left', resizable: true, ellipsis: true, width: 150, sortable: true },
                            { name: 'activityNm', header: "Activity {{ message('item.com.024') }}", align: 'left', resizable: true, ellipsis: true, width: 250, },
                            { name: 'activityKindKrn', header: "{{ message('item.com.052') }}", align: 'center', resizable: true, ellipsis: true, },
                            {
                                name: 'intlDuration', header: "{{ message('item.com.053') }}", align: 'center', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR') : "0";
                                }
                            },
                            {
                                name: 'remndrDuration', header: "{{ message('item.com.054') }}", align: 'center', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR') : "0";
                                }
                            },
                            {
                                name: 'exptCost', header: "{{ message('item.com.055') }}", align: 'right', resizable: true, ellipsis: true, width: 100,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { maximumFractionDigits: 0 }) : "0";
                                }
                            },
                            {
                                name: 'acmtlCost', header: "{{ message('item.com.056') }}", align: 'right', resizable: true, ellipsis: true, width: 100,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { maximumFractionDigits: 0 }) : "0";
                                }
                            },
                            { name: 'planStart', header: "PS", align: 'center', resizable: true, ellipsis: true },
                            { name: 'planFinish', header: "PF", align: 'center', resizable: true, ellipsis: true },
                            { name: 'actualStart', header: "AS", align: 'center', resizable: true, sortable: true },
                            { name: 'actualFinish', header: "AF", align: 'center', resizable: true, sortable: true },
                        ],
                    })

                    // 행 클릭 이벤트 설정
                    this.actiGrid.on('click', (ev) => {
                        const rowKey = ev.rowKey;
                        const rowData = this.actiGrid.getRow(rowKey);
                        if (rowData) {
                            selectActivityId = rowData.activityId;
                            if (selectActivityId) {
                                wbs.wbsQdbGrid.init(selectCntrctChgId, selectActivityId);
                            }
                        }

                    });

                    this.actiGrid.on('onGridUpdated', ev => {
                        let cnt = this.actiGrid.getRowCount();
                        const firstRow = this.actiGrid.getRowAt(0);

                        let minLevel = Number.MAX_SAFE_INTEGER;

                        for (let i = 0; i < cnt; i++) {
                            let level = this.actiGrid.getValue(i, "wbsLevel");
                            if (level !== null && !isNaN(level)) {
                                this.actiGrid.addRowClassName(i, `bg-lv${level}`);
                            }
                        }
                    });

                } else {
                    this.actiGrid.resetData([]);
                }
                refreshGrid(this.actiGrid);
            },
            search() {
                let searchText = $('#wbsActiSearchText').val();
                wbs.activityGrid.init(selectWbsCd, searchText);
                wbs.wbsQdbGrid.init();
            },
            excel() {
                if (this.actiGrid.getData().length === 0) {
                    gaiaCommon.customAlert("{{ message('msg.activityQdb.001') }}");
                    return
                }
                const options = {
                    includeHiddenColumns: false,
                    fileName: 'Activity',
                };
                this.actiGrid.export('xlsx', options);
            }
        },
        wbsQdbGrid: {
            init: function (cntrctChgID, activityId, searchText) {
                let _this = this;

                if (this.wbsQdbGrid) {
                    this.wbsQdbGrid.destroy(); // 기존 인스턴스 제거
                    this.wbsQdbGrid = null;
                }

                const dataSource = createDataSource({
                    readData: {
                        url: BASEPATH + '/wbs-qdbList',
                        method: "POST",
                        initParams: {
                            cntrctChgId: cntrctChgID,
                            activityId: activityId,
                            searchText: searchText
                        },
                    }
                });

                if (!this.wbsQdbGrid) {
                    this.wbsQdbGrid = new tui.Grid({
                        el: document.getElementById("wbs_qdb_grid"),
                        data:dataSource,
                        scrollX: true,
                        scrollY: true,
                        contextMenu: null,
                        minBodyHeight: 40,
                        width: 'auto',
                        bodyHeight: 400,
                        header: {
                            height: 100,
                            complexColumns: [
                                {
                                    header: "{{ message('item.projectcost.012') }}",
                                    name: "mtrl",
                                    childNames: [
                                        "mtrl_uprc",
                                        "mtrl_cost"
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.013') }}",
                                    name: "lbr",
                                    childNames: [
                                        "lbr_uprc",
                                        "lbr_cost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.014') }}",
                                    name: "gnrlexpns",
                                    childNames: [
                                        "gnrlexpns_uprc",
                                        "gnrlexpns_cost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.009') }}",
                                    name: "total",
                                    childNames: [
                                        "total_uprc",
                                        "total_cost",
                                    ],
                                },
                            ],
                        },
                        columns: [
                            { name: 'rsce_cd', header: "{{ message('item.projectcost.001') }}", align: 'center', resizable: true, ellipsis: true, width: 160 },
                            { name: 'dtl_cnstty_nm', header: "{{ message('item.projectcost.002') }}", align: 'left', resizable: true, ellipsis: true, width: 200 },
                            { name: 'spec_nm', header: "{{ message('item.projectcost.003') }}", align: 'left', resizable: true, ellipsis: true, width: 180 },
                            { name: 'unit', header: "{{ message('item.projectcost.004') }}", align: 'center', resizable: true, ellipsis: true, width: 100 },
                            {
                                name: 'rsce_qty', header: "{{ message('item.projectcost.005') }}", align: 'center', resizable: true, ellipsis: true, width: 100,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '';
                                }
                            },
                            { name: 'mtrl_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'mtrl_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'lbr_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'lbr_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'gnrlexpns_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'gnrlexpns_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'total_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'total_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                        ],
                    })

                }
                refreshGrid(this.wbsQdbGrid);
            },
            search: function () {
                let searchText = $('#qdbSearchText').val();
                wbs.wbsQdbGrid.init(selectCntrctChgId, selectActivityId, searchText);
            }
        },
    };

    // cbs 탭 함수
    var cbs = {
        init(chgId) {
            cbs.activityCbsTree.init();
            cbs.cbsGrid.init();
            cbs.cbsQdbGrid.init();
        },
        activityCbsTree: {
            cbsObj: null,
            refresh: function () {
                this.cbsObj.jstree(true).refresh();
            },

            getNode: function (id) {
                return this.cbsObj.jstree("get_node", id);
            },
            init: function () {
                if (this.cbsObj) {
                    this.cbsObj.jstree(true).destroy();
                    $('#cbstree').empty();
                }
                let param = {
                    cntrctChgId: selectCntrctChgId
                }
                // wbs.activityWbsTree.cbsObj = $("#cbstree").jstree({
                this.cbsObj = $("#cbstree").jstree({
                    plugins: ["search"],
                    core: {
                        data: function (obj, cb) {

                            gaiaCommon.get(BASEPATH + '/cbsTreeList', param, function (result) {
                                var data = [];
                                if (result.details?.cbsTreeList) {
                                    result.details?.cbsTreeList.forEach((item, index) => {
                                        data.push({
                                            id: item.code,
                                            parent: item.upcode,
                                            text: item.cnstty_nm,
                                            state: { opened: true },
                                            data: item,
                                            icons: 'fa-solid fa-caret-right',
                                        });
                                    });
                                    cb.call(obj, data);
                                }
                            });
                        },
                        check_callback: true,
                        themes: {
                            "theme": "default",
                            "dots": false,
                            "responsive": false,
                            "icons": false
                        }
                    },
                });
                $("#cbstree").on("ready.jstree", () => {
                    let firstNode = this.cbsObj.jstree("get_node", "#").children[0];
                    if (firstNode) {
                        let data = this.cbsObj.jstree("get_node", firstNode).data;
                        this.cbsObj.jstree("select_node", firstNode);
                        selectUnitCnstType = data.unit_cnst_type;
                        selectCnsttyCd = data.cnstty_cd;
                        cbs.cbsGrid.init(selectUnitCnstType, selectCnsttyCd);
                    }

                    this.cbsObj.on("select_node.jstree", function (e, data) {
                        let selectedNode = data.node.data;
                        if (selectedNode) {
                            selectUnitCnstType = selectedNode.unit_cnst_type;
                            selectCnsttyCd = selectedNode.cnstty_cd;

                            cbs.cbsGrid.init(selectUnitCnstType, selectCnsttyCd);
                            cbs.cbsQdbGrid.cQdbGrid.resetData([]);
                        }
                        selectCnsttySn = '';
                    });
                })
            }
        },
        cbsGrid: {
            init: function (selectUnitCnstType, selectCnsttyCd, searchText) {
                let _this = this;

                if (this.cGrid) {
                    this.cGrid.destroy();
                    this.cGrid = null;
                }

                const dataSource = createDataSource({
                    readData: {
                        url: BASEPATH + '/cbsList',
                        method: "POST",
                        initParams: {
                            cntrctChgId: selectCntrctChgId,
                            unitCnstType: selectUnitCnstType,
                            cnsttyCd: selectCnsttyCd,
                            searchText: searchText
                        },
                    }
                });

                if (!this.cGrid) {
                    this.cGrid = new tui.Grid({
                        el: document.getElementById('cbs_detail_grid'),
                        data: dataSource,
                        scrollX: true,
                        scrollY: true,
                        contextMenu: null,
                        minBodyHeight: 40,
                        width: 'auto',
                        bodyHeight: 400,
                        header: {
                            height: 100,
                            complexColumns: [
                                {
                                    header: "{{ message('item.projectcost.012') }}",
                                    name: "mtrl",
                                    childNames: [
                                        "mtrl_uprc",
                                        "mtrl_cost"
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.013') }}",
                                    name: "lbr",
                                    childNames: [
                                        "lbr_uprc",
                                        "lbr_cost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.014') }}",
                                    name: "gnrlexpns",
                                    childNames: [
                                        "gnrlexpns_uprc",
                                        "gnrlexpns_cost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.projectcost.009') }}",
                                    name: "total",
                                    childNames: [
                                        "total_uprc",
                                        "total_cost",
                                    ],
                                },
                            ],
                        },
                        columns: [
                            { name: 'cnstty_nm', header: "CBS", align: 'center', resizable: true, ellipsis: true, width: 150 },
                            { name: 'rsce_cd', header: "{{ message('item.projectcost.001') }}", align: 'center', resizable: true, ellipsis: true, width: 160, },
                            { name: 'dtl_cnstty_nm', header: "{{ message('item.projectcost.002') }}", align: 'left', resizable: true, ellipsis: true, width: 200 },
                            { name: 'spec_nm', header: "{{ message('item.projectcost.003') }}", align: 'left', resizable: true, ellipsis: true, width: 180 },
                            { name: 'unit', header: "{{ message('item.projectcost.004') }}", align: 'center', resizable: true, ellipsis: true, width: 100 },
                            {
                                name: 'rsce_qty', header: "{{ message('item.projectcost.005') }}", align: 'center', resizable: true, ellipsis: true, width: 100,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '';
                                }
                            },
                            { name: 'mtrl_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'mtrl_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'lbr_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'lbr_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'gnrlexpns_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'gnrlexpns_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'total_uprc', header: "{{ message('item.projectcost.006') }}", align: 'right', resizable: true, ellipsis: true },
                            { name: 'total_cost', header: "{{ message('item.projectcost.007') }}", align: 'right', resizable: true, ellipsis: true },
                        ],
                    })

                    this.cGrid.on('click', (ev) => {
                        const rowKey = ev.rowKey;
                        const rowData = this.cGrid.getRow(rowKey);

                        if (rowData) {
                            selectCnsttySn = rowData.cnstty_sn;
                            selectDtlCnsttySn = rowData.dtl_cnstty_sn;
                            cbs.cbsQdbGrid.init(selectCnsttySn, selectDtlCnsttySn);
                        }

                    });
                } else {
                    this.cGrid.resetData([]);
                }
                refreshGrid(this.cGrid);
            },
            search() {
                let searchText = $('#cbsSearchText').val()
                cbs.cbsGrid.init(selectUnitCnstType, selectCnsttyCd, searchText);
                cbs.cbsQdbGrid.init();
                $('#cbsSearchText').val('');
            },
            excel() {
                if (this.cGrid.getData().length === 0) {
                    gaiaCommon.customAlert("{{ message('msg.activityQdb.001') }}");
                    return
                }
                const options = {
                    includeHiddenColumns: false,
                    fileName: 'CBS',
                };
                this.cGrid.export('xlsx', options);
            }
        },
        cbsQdbGrid: {
            init: function (selectCnsttySn,selectDtlCnsttySn,searchText) {
                let _this = this;

                if (this.cQdbGrid) {
                    this.cQdbGrid.destroy();
                    this.cQdbGrid = null;
                }

                const dataSource = createDataSource({
                    readData: {
                        url: BASEPATH + '/cbs-qdbList',
                        method: "POST",
                        initParams: {
                            cntrctChgId: selectCntrctChgId,
                            cnsttySn: selectCnsttySn,
                            dtlCnsttySn: selectDtlCnsttySn,
                            searchText: searchText
                        },
                    }
                });

                if (!this.cQdbGrid) {
                    this.cQdbGrid = new tui.Grid({
                        el: document.getElementById('cbs_qdb_grid'),
                        data: dataSource,
                        scrollX: true,
                        scrollY: true,
                        contextMenu: null,
                        minBodyHeight: 40,
                        width: 'auto',
                        bodyHeight: 400,
                        header: {
                            height: 100,
                            complexColumns: [
                                {
                                    header: "{{ message('item.com.048') }}",
                                    name: "days",
                                    childNames: [
                                        "intl_duration",
                                        "remndr_duration"
                                    ],
                                },
                                {
                                    header: "{{ message('item.com.050') }}",
                                    name: "cost",
                                    childNames: [
                                        "expt_cost",
                                        "acmtl_cost",
                                    ],
                                },
                                {
                                    header: "{{ message('item.com.051') }}",
                                    name: "date",
                                    childNames: [
                                        "plan_start",
                                        "plan_finish",
                                        "actual_start",
                                        "actual_finish",
                                    ],
                                },
                            ],
                        },
                        columns: [
                            { name: 'wbs_nm', header: "WBS", align: 'center', resizable: true, ellipsis: true, width: 180, },
                            { name: 'activity_id', header: "Activity ID", align: 'center', resizable: true, ellipsis: true, sortable: true, width: 150 },
                            { name: 'activity_nm', header: "Activity {{ message('item.com.024') }}", align: 'center', resizable: true, ellipsis: true, width: 250 },
                            { name: 'activity_kind_krn', header: "{{ message('item.com.052') }}", align: 'center', resizable: true, ellipsis: true },
                            {
                                name: 'intl_duration', header: "{{ message('item.com.053') }}", align: 'center', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR') : "0";
                                }
                            },
                            {
                                name: 'remndr_duration', header: "{{ message('item.com.054') }}", align: 'center', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR') : "0";
                                }
                            },
                            {
                                name: 'expt_cost', header: "{{ message('item.com.055') }}", align: 'right', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { maximumFractionDigits: 0 }) : "0";
                                }
                            },
                            {
                                name: 'acmtl_cost', header: "{{ message('item.com.056') }}", align: 'right', resizable: true, ellipsis: true, width: 80,
                                formatter: function (e) {
                                    return e.value ? e.value.toLocaleString('ko-KR', { maximumFractionDigits: 0 }) : "0";
                                }
                            },
                            { name: 'plan_start', header: "PS", align: 'center', resizable: true, ellipsis: true },
                            { name: 'plan_finish', header: "PF", align: 'center', resizable: true, ellipsis: true },
                            { name: 'actual_start', header: "AS", align: 'center', resizable: true, ellipsis: true, sortable: true },
                            { name: 'actual_finish', header: "AF", align: 'center', resizable: true, ellipsis: true, sortable: true },
                        ],
                    })

                } else {
                    this.cQdbGrid.resetData([]);
                }
                refreshGrid(this.cQdbGrid);
            },
            search() {
                let searchText = $('#cbsActiSearchText').val();
                cbs.cbsQdbGrid.init(selectCnsttySn, selectDtlCnsttySn, searchText);
                $('#cbsActiSearchText').val('');
            }
        }
    }

    $('.tab_item').click(function () {
        var selectedTabId = $(this).data('id');
        if (selectedTabId === 'tabs01') {
            wbs.init(selectCntrctChgId);
        } else {
            cbs.init(selectCntrctChgId);
        }
    })

    $(function () {
        gaia.create({
            $init: function ($params) {

                gaiaPortal.navMenuInit("M020204", "{{ message('item.activityQdb.002') }}");
                activityQdb.init();
            }
        });
    })


</script>

<script src="/webjars/jstree/jstree.min.js"></script>

{% endblock footer_script %}