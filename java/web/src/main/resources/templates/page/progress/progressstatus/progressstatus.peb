    {% extends 'layout/base_content' %} {% block content %}
    <section class="contents_wrap g-row">

        <article class="conts g-row" id="contract_container">
            <div class="group">

                <div class="conts_grid">
                    <h3 class='conts_tit' id="change_tit">{{ message('item.sub.040') }} & {{
                    message("item.progressstatus.006") }}</h3>
                    <!-- 변경차수 & 기간설정 -->
                    <div class="search_wrap" id="change_container">
                        <span class='selectbox'><select name='cntrctChgId' id='cntrctChgId' style='width: 250px;'></select></span>
                    <span class="selectbox">
                        <select name="dateTerm" id="dateTerm" onchange="toggleDateRange()">
                            <option value="2">
                                {{ message("item.progressstatus.014") }} <!-- 전주 -->
                            </option>
                            <option value="0">
                                {{ message("item.progressstatus.005") }} <!-- 금주 -->
                            </option>
                            <option value="1">
                                {{ message("item.progressstatus.015") }} <!-- 차주 -->
                            </option>
                            <option value="3">
                                {{ message("item.com.013") }} <!-- 직접입력 -->
                            </option>
                        </select>
                    </span>
                        <div id="dateRange" class="search_wrap" style="display: none">
                            <input type="date" id="startDate" name="startDate" class="date w-md" />
                            <input type="date" id="endDate" name="endDate" class="date w-md" />
                        </div>
                    </div>

                    <div class="toolbar">
                        <button type="button" class="btn _outline" id="exportButton" style="display:none;">
                            {{ message('btn.023') }} <!-- Excel -->
                        </button>
                    </div>
                </div>

                <!-- TAB NAV -->
                <div class="conts_tab">
                    <nav class="tab_nav">
                        <ul class="tab_list tab_default">
                            <li class="tab_item" data-id="tabs01">{{ message('item.progressstatus.007') }}</li>
                            <!-- 공정률 현황 -->
                            <li class="tab_item" data-id="tabs02">{{ message('item.progressstatus.008') }}</li>
                            <!-- 주요작업 현황 -->
                        </ul>
                    </nav>

                    <!-- TAB Conts -->
                    <div class="tab_conts_wrap">
                        <div id="tabs01" class="tab_conts">
                            <article class="conts g-row">
                                <div class="conts_grid">
                                    <div class="toolbar">
                                        <div class="item_group" role="group" aria-label="Basic radio group" id="grid_radio">
                                            <label class="form_check">
                                                <input type="radio" id="gridUseY" name="useYnGrid" class="check_mark"
                                                       value="Y" checked />
                                                <span class="check_label">{{ message('item.projectcost.007') }}</span>
                                                <!-- 금액 -->
                                            </label>
                                            <label class="form_check">
                                                <input type="radio" name="useYnGrid" class="check_mark"
                                                       value="N" />
                                                <span class="check_label">{{ message('item.progressstatus.009') }}</span>
                                                <!-- 보할 -->
                                            </label>
                                        </div>
                                    </div>
                                    <div class="grid" id="processRateStatusGrid">
                                        <!--공정률 현황-->
                                    </div>
                                </div>

                            </article>
                        </div>

                        <div id="tabs02" class="tab_conts">
                            <article class="conts g-row">
                                <div class="conts_grid">
                                    <div class="grid" id="mainTaskStatusGrid"> <!--주요작업 현황-->
                                    </div>
                                </div>
                            </article>
                        </div>
                    </div>

                </div>
            </div>

        </article>
    </section>
    {% endblock content %}
    {% block footer_script %}
    <script src="/assets/js/grid.js"></script>
    <script src="/assets/js/fetch_options_data.js"></script>
    <script>
        var cntrctChgId;
        var cntrctNo;
        var pjtNo;
        var list = [];
        var cntrctAmt;

        let selectedWeek = `금주 (${getWeekDates(0)})`;

        $(function () {
            gaia.create({
                $init: function ($params) {
                    init();
                }
            });
        });

        var init = function () {

            pjtNo = pjtInfo.pjtNo;

            // 페이지 로딩 시
            gaiaPortal.navMenuInit('M0203', "{{ message('item.progressstatus.000') }}");   // 공정 현황
            var title = "{{ message('item.progressstatus.007') }}"  // 공정률 현황
            $("#menuDepth").append(`<li class=\"breadcrumb_item\" id=\"depth_txt\">${title}</li>`);

            $('#dateTerm').val('0');
            $('#dateTerm option[value="0"]').text("{{ message('item.progressstatus.005') }}");

            processRateStatusGrid.init();
            mainTaskStatusGrid.init();

            changeEvent.init();

            gaiaCommon.makeCntrctAndChgIdSelectBox(
                    "#contract_container",
                    "#cntrctChgId",
                    () => {
                    },
                    (cntrctChgId) => {
                        $("#change_tit").show();
                        $("#change_container").show();

                        if ($(".tab_item.active").data('id') === "tabs01") {
                            $('#gridUseY').prop('checked', true);
                            processRateStatusGrid.get();
                        } else if ($(".tab_item.active").data('id') === "tabs02") {
                            mainTaskStatusGrid.get();
                        }
                    },
                    (cntrctChgId) => {
                        if (!$(".tab_item.active").data('id')) return;
                        $('#dateTerm').val("0");
                        $('#dateTerm option[value="0"]').text("{{ message('item.progressstatus.005') }}");
                        document.getElementById("dateRange").style.display = "none";
                        document.getElementById("startDate").value = "";
                        document.getElementById("endDate").value = "";

                        if ($(".tab_item.active").data('id') === "tabs01") {
                            processRateStatusGrid.get();
                            $('#gridUseY').prop('checked', true);
                            processRateStatusGrid.setGridColumn('Y');
                        } else if ($(".tab_item.active").data('id') === "tabs02") {
                            mainTaskStatusGrid.get();
                        }
                    }
            );
        };

        let processRateStatusGrid = {   //공정률 현황
            init: function () {
                let _this = this;
                let bodyHeight;

                if (gaiaCommon.me.isAdmin() || isGAIA()) {
                    bodyHeight = window.innerHeight - 600;
                } else if (isCAIROS()) {
                    bodyHeight = window.innerHeight - 520;
                }

                if (!this.processRateStatusGrid) {  // 금액
                    this.processRateStatusGrid = new tui.Grid({
                        el: document.getElementById('processRateStatusGrid'),
                        bodyHeight: bodyHeight,
                        scrollX: false,
                        scrollY: true,
                        contextMenu: null,
                        rowHeight: 10,
                        header: {
                            height: 80,
                            complexColumns: [
                                {
                                    header: `전주 누계`,
                                    name: 'prevToatl',
                                    childNames: ['prevPlanCum', 'prevActualCum']
                                },
                                {
                                    header: selectedWeek,
                                    name: 'thisAmtTotal',
                                    childNames: ['thisPlanAmt', 'actualAmt']
                                },
                                {
                                    header: `금주 누계`,
                                    name: 'thisCumTotal',
                                    childNames: ['thisPlanCum', 'thisActualCum']
                                },
                                {
                                    header: `차주 누계`,
                                    name: "plan",
                                    childNames: ['nextPlanAmt']
                                }
                            ],
                        },
                        columns: [
                            {
                                header: "공종코드", // 공종코드
                                name: 'cnsttyCd', allowMerging: true, width: 100
                            },
                            {
                                header: "{{ message('item.progressstatus.010') }}", // 공종
                                name: 'cnsttyNm', resizable: true, width: 150
                            },
                            {
                                header: "{{ message('item.projectcost.007') }}", // 금액
                                name: 'cntCost', resizable: true, width: 150, align: 'right',
                            },
                            {
                                header: "{{ message('item.progressstatus.009') }}", // 보할
                                name: 'allocation', hidden: true, resizable: true, width: 100
                            },
                            {
                                header: "{{ message('item.construction.018') }}", // 기준 이전 주차 누계 계획
                                name: 'prevPlanCum', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.019') }}", // 기준 이전 주차 누계 실적
                                name: 'prevActualCum', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.018') }}", // 기준 주차 계획
                                name: 'thisPlanAmt', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.019') }}", // 기준 주차 실적
                                name: 'actualAmt', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.018') }}", // 기준 주차 누계 계획
                                name: 'thisPlanCum', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.019') }}", // 기준 주차 누계 실적
                                name: 'thisActualCum', align: 'right',
                            },
                            {
                                header: "{{ message('item.construction.018') }}", // 기준 다음 주차 계획
                                name: "nextPlanAmt", align: 'right'
                            },
                            { header: "{{ message('item.com.022') }}", name: 'rmrk', width: 100 },	//비고
                        ]
                    })
                }

                this.isAllocationMode = false;


            },
            setGridColumn(type) {
                if (type === 'N') {
                    this.processRateStatusGrid.showColumn('allocation');
                } else {
                    this.processRateStatusGrid.hideColumn('allocation');
                }
                const complexColumns = [
                    {
                        header: `전주 누계`,
                        name: 'prevToatl',
                        childNames: ['prevPlanCum', 'prevActualCum']
                    },
                    {
                        header: selectedWeek,
                        name: 'thisAmtTotal',
                        childNames: ['thisPlanAmt', 'actualAmt']
                    },
                    {
                        header: `금주 누계`,
                        name: 'thisCumTotal',
                        childNames: ['thisPlanCum', 'thisActualCum']
                    },
                    {
                        header: `차주 계획`,
                        name: "plan",
                        childNames: ['nextPlanAmt']
                    }
                ];

                this.processRateStatusGrid.setHeader({ complexColumns });
            },
            setAllocationMode: function (isAllocation) {    // 버튼 클릭 이벤트 처리(금액/보할)
                if (this.isAllocationMode === isAllocation) return;
                let cntrctAmt = $('#cntrctChgId option:selected').attr("cntrct_amt") ;

                let data = isAllocation
                        ? this.originalData.map(item => ({
                            ...item,
                            cntCost: formatNumber(item.cntCost),
                            prevPlanCum: this.formatPercentage(item.prevPlanCum / cntrctAmt),
                            prevActualCum: this.formatPercentage(item.prevActualCum / cntrctAmt),
                            thisPlanAmt: this.formatPercentage(item.thisPlanAmt / cntrctAmt),
                            actualAmt: this.formatPercentage(item.actualAmt / cntrctAmt),
                            thisPlanCum: this.formatPercentage(item.thisPlanCum / cntrctAmt),
                            thisActualCum: this.formatPercentage(item.thisActualCum / cntrctAmt),
                            nextPlanAmt: formatNumber(item.nextPlanAmt),
                        }))
                        : this.originalData.map(item => ({
                            ...item,
                            prevPlanCum: formatNumber(item.prevPlanCum),
                            prevActualCum: formatNumber(item.prevActualCum),
                            thisPlanAmt: formatNumber(item.thisPlanAmt),
                            actualAmt: formatNumber(item.actualAmt),
                            thisPlanCum: formatNumber(item.thisPlanCum),
                            thisActualCum: formatNumber(item.thisActualCum),
                            cntCost: formatNumber(item.cntCost),
                            nextPlanAmt: formatNumber(item.nextPlanAmt),
                        }));
                if (isAllocation) {
                    const totalRow = {
                        seqNum: "",
                        cnsttyNm: "합계",
                        cntCost: "",
                        prevPlanCum: "",
                        prevActualCum: "",
                        thisPlanAmt: "",
                        actualAmt: "",
                        thisPlanCum: "",
                        thisActualCum: "",
                        nextPlanAmt: "",
                        allocation: "100%",
                    };
                    data.push(totalRow);  // '합계' 행 추가
                }
                this.processRateStatusGrid.resetData(data);
                this.isAllocationMode = isAllocation;
            },
            formatPercentage: function (value) {
                if (isNaN(value) || value === 0 || value === null) {
                    return "0";
                }

                let formatted = value.toFixed(3);
                return formatted === "0.000" ? "0" : `${formatted}%`;
            },
            get: function () {
                gaiaCommon.LoadingOverlay('body', true);
                if (!this.processRateStatusGrid) {
                    return;
                }
                let _this = this;
                let data = [];

                let weekTypeElement = document.getElementById("dateTerm");
                let weekType = weekTypeElement ? weekTypeElement.value : "";

                let startDateElement = document.getElementById("startDate");
                let startDate = startDateElement ? startDateElement.value : null;

                let endDate = null;
                if (startDate) {
                    const end = new Date(startDate);
                    end.setDate(end.getDate() + 6);
                    endDate = end.toISOString().split('T')[0];
                }

                cntrctChgId = $("#cntrctChgId").val();

                var param = {
                    cntrctChgId: cntrctChgId,
                    weekType: weekType,
                    startDate: weekType === "3" ? startDate : (weekType !== "3" ? new Date().toISOString().split('T')[0] : null),
                    endDate: weekType === "3" ? endDate : null
                };

                gaiaCommon.post('/api/progress/progressstatus/ProcessRate', param, function (response) {
                    gaiaCommon.LoadingOverlay('body', false);
                    data = response.details.ProcessRate;
                    processRateStatusGrid.originalData = data;

                    let formattedData = data.map((item, index) => ({
                        seqNum: item.seqNum,
                        cnsttyNm: item.cnsttyNm,
                        cnsttyCd: item.cnsttyCd,
                        cntCost: formatNumber(item.cntCost),
                        prevPlanCum: formatNumber(item.prevPlanCum),
                        prevActualCum: formatNumber(item.prevActualCum),
                        thisPlanAmt: formatNumber(item.thisPlanAmt),
                        actualAmt: formatNumber(item.actualAmt),
                        thisPlanCum: formatNumber(item.thisPlanCum),
                        thisActualCum: formatNumber(item.thisActualCum),
                        nextPlanAmt: formatNumber(item.nextPlanAmt),
                        rmrk: item.rmrk_cntnts
                    }));

                    _this.processRateStatusGrid.resetData(formattedData);
                }, function (xhr, status, error){
                    gaiaCommon.LoadingOverlay('body', false);
                });

                refreshGrid(this.processRateStatusGrid);
                return data;
            },
            exportToExcel: function () {
                const options = {
                    includeHiddenColumns: false,
                    onlySelected: true,
                    fileName: "{{ message('item.progressstatus.007') }}",
                };
                this.processRateStatusGrid.export("xlsx", options);
            },
        }

        let mainTaskStatusGrid = {   //주요작업 현황
            init: function () {
                let _this = this;
                let bodyHeight;
                if (gaiaCommon.me.isAdmin() || isGAIA()) {
                    bodyHeight = window.innerHeight - 537;
                } else if (isCAIROS()) {
                    bodyHeight = window.innerHeight - 457;
                }

                if (!this.mainTaskStatusGrid) {  // 금액
                    this.mainTaskStatusGrid = new tui.Grid({
                        el: document.getElementById('mainTaskStatusGrid'),
                        bodyHeight: bodyHeight,
                        scrollX: false,
                        scrollY: true,
                        contextMenu: null,
                        rowHeight: 10,
                        header: {
                            height: 40,
                        },
                        columns: [
                            {
                                header: " ", // 번호
                                align: 'center', width: 80,
                                formatter: function (item) {
                                    return item.row.seqNum;
                                }
                            },
                            {
                                header: "WBS 코드",
                                name: 'wbsCd', width: 300
                            },
                            {
                                header: "WBS 명",
                                name: 'wbsNm',
                            },
                            {
                                header: "Activity ID",
                                name: 'activityId',
                            },
                            {
                                header: "Activity 명",
                                name: 'activityNm', resizable: true, width: 500
                            },
                            {
                                header: "계획시작일",
                                name: 'planBgnDate',
                            },
                            {
                                header: "계획종료일",
                                name: 'planEndDate',
                            },
                            {
                                header: "실제시작일",
                                name: 'actualBgnDate',
                            },
                            {
                                header: "실제종료일",
                                name: 'actualEndDate',
                            },
                        ]
                    })
                }
            },
            get: function () {
                if (!this.mainTaskStatusGrid) {
                    return;
                }
                let _this = this;
                let data = [];

                let weekTypeElement = document.getElementById("dateTerm");
                let weekType = weekTypeElement ? weekTypeElement.value : "";

                let startDateElement = document.getElementById("startDate");
                let startDate = startDateElement ? startDateElement.value : null;

                let endDateElement = document.getElementById("endDate");
                let endDate = endDateElement ? endDateElement.value : null;

                cntrctChgId = $("#cntrctChgId").val();

                var param = {
                    cntrctChgId: cntrctChgId,
                    weekType: weekType,
                    startDate: weekType === "3" ? startDate : (weekType !== "3" ? new Date().toISOString().split('T')[0] : null),
                    endDate: weekType === "3" ? endDate : null
                };

                gaiaCommon.post('/api/progress/progressstatus/activityList', param, function (response) {
                    data = response.details.activityList;

                    let formattedData = data.map((item, index) => ({
                        seqNum: item.seqNum,
                        wbsCd: item.wbsCd,
                        wbsNm: item.wbsNm,
                        activityId: item.activityId,
                        activityNm: item.activityNm,
                        planBgnDate: item.planBgnDate,
                        planEndDate: item.planEndDate,
                        actualBgnDate: item.actualBgnDate,
                        actualEndDate: item.actualEndDate
                    }));

                    _this.mainTaskStatusGrid.resetData(formattedData);
                });

                refreshGrid(this.mainTaskStatusGrid);
                return data;
            },
            exportToExcel: function () {
                const options = {
                    includeHiddenColumns: false,
                    onlySelected: true,
                    fileName: "{{ message('item.progressstatus.008') }}",
                };

                this.mainTaskStatusGrid.export("xlsx", options);
            },
        }


        let changeEvent = {
            init: function (){
                var tabItem = $(".tab_item");
                var tabConts = $(".tab_conts");
                $(tabItem).eq(0).addClass('active');
                $(tabConts).eq(0).addClass('active');

                $(tabItem).click(function (e) {
                    $(tabItem).removeClass('active');
                    $(tabConts).removeClass('active');

                    if (e.target.dataset.id == "tabs01") {
                        processRateStatusGrid.get();
                        $("#depth_txt").text("{{ message('item.progressstatus.007') }}");   // 공정률 현황
                        $("#exportButton").off("click").on("click", function () {
                            processRateStatusGrid.exportToExcel();
                        });
                        $('#gridUseY').prop('checked', true);
                        processRateStatusGrid.setGridColumn('Y');
                    } else if (e.target.dataset.id == "tabs02") {
                        mainTaskStatusGrid.get();
                        $("#depth_txt").text("{{ message('item.progressstatus.008') }}");   // 주요작업 현황
                        $("#exportButton").off("click").on("click", function () {
                            mainTaskStatusGrid.exportToExcel();
                        });
                    }
                    $(this).addClass('active');
                    $("#" + $(this).data('id')).addClass('active');
                });

                $('input[name="useYnGrid"]').on("click", function () {
                    if ($(this).val() === 'N') {
                        processRateStatusGrid.setAllocationMode(true);
                        processRateStatusGrid.setGridColumn('N');
                    } else {
                        processRateStatusGrid.setAllocationMode(false);
                        processRateStatusGrid.setGridColumn('Y');
                    }
                });

                // $("#exportButton").off("click").on("click", function () {
                //     processRateStatusGrid.exportToExcel();
                // });

                $('input[name="useYnDate"]').change(function () {
                    if ($(this).val() === 'N') { // '기간설정' 선택 시
                        $('#startDate, #endDate').show();
                    } else {
                        $('#startDate, #endDate').hide();
                    }
                });

                // 날짜 자동 설정(직접입력 시)
                document.getElementById('startDate').addEventListener('change', function () {
                    const startDateStr = this.value;
                    const endDateField = document.getElementById('endDate');

                    if (!startDateStr) {
                        endDateField.removeAttribute('min');
                        return;
                    }

                    const startDate = new Date(startDateStr);
                    const endDate = new Date(startDate);
                    endDate.setDate(endDate.getDate() + 6);

                    const formatDate = (date) => {
                        const mm = String(date.getMonth() + 1).padStart(2, '0');
                        const dd = String(date.getDate()).padStart(2, '0');
                        return `${mm}-${dd}`;
                    };

                    const startFormatted = formatDate(startDate);
                    const endFormatted = formatDate(endDate);

                    endDateField.value = endDate.toISOString().split('T')[0];
                    endDateField.min = startDateStr;

                    if (endDateField.value < startDateStr) {
                        endDateField.value = '';
                    }

                    const selectedDate = `${startFormatted} ~ ${endFormatted}`;
                    const activeTabId = $(".tab_item.active").data('id');
                    selectedWeek = `금주 (${selectedDate})`;

                    if (activeTabId === "tabs01") {
                        processRateStatusGrid.get();
                        $('#gridUseY').prop('checked', true);
                        processRateStatusGrid.setGridColumn('Y');
                    } else if (activeTabId === "tabs02") {
                        mainTaskStatusGrid.get();
                    }

                });

                document.getElementById('endDate').addEventListener('change', function () {
                    if ($(".tab_item.active").data('id') === "tabs02") {
                        mainTaskStatusGrid.get();
                    }
                });

                document.getElementById("dateTerm").addEventListener("change", function () {
                    const selectedValue = this.value;
                    let selectedDate;
                    if (selectedValue === "0") {
                        selectedDate = `금주 (${getWeekDates(0)})`;
                    } else if (selectedValue === "2") {
                        selectedDate = `금주 (${getWeekDates(-1)})`;
                    } else if (selectedValue === "1") {
                        selectedDate = `금주 (${getWeekDates(1)})`;
                    }else if(selectedValue === "3"){
                        return false;
                    }

                    selectedWeek = `${selectedDate}`;

                    // 헤더 포함 컬럼 갱신
                    $('#gridUseY').prop('checked', true);
                    processRateStatusGrid.setGridColumn('Y');
                });


            }
        }

        // 기간입력창
        function toggleDateRange() {
            const dateTerm = document.getElementById("dateTerm").value;
            const dateRangeContainer = document.getElementById("dateRange");

            if (dateTerm === "3") {
                dateRangeContainer.style.display = "flex";
            } else {
                dateRangeContainer.style.display = "none";
                document.getElementById("startDate").value = "";
                document.getElementById("endDate").value = "";
            }
            if ($(".tab_item.active").data('id') === "tabs01") {
                processRateStatusGrid.get();
            } else if ($(".tab_item.active").data('id') === "tabs02") {
                mainTaskStatusGrid.get();
            }
        }

        function formatNumber(value) {
            return Number(value).toLocaleString();
        }

        function parseNumber(value) {
            if (!value) return 0;
            return parseFloat(value.toString().replace(/,/g, ""));
        }

        // 주 계산 함수
        function getWeekDates(offset) {
            const now = new Date();
            const dayOfWeek = now.getDay();
            const diffToMonday = (dayOfWeek === 0 ? 6 : dayOfWeek - 1);

            // 다음 주 기준으로 offset + 1 주 추가
            const baseDate = new Date();
            baseDate.setDate(now.getDate() - diffToMonday + (offset * 7));

            const startOfWeek = baseDate;
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6);

            const startFormatted = `${startOfWeek.getMonth() + 1}-${startOfWeek.getDate()}`;
            const endFormatted = `${endOfWeek.getMonth() + 1}-${endOfWeek.getDate()}`;

            return `${startFormatted} ~ ${endFormatted}`;
        }



    </script>
    {% endblock footer_script %}