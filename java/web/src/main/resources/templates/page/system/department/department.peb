{% extends 'layout/base_content' %} {% block content %}
<section class="contents_wrap g-col2 ty1">
    <!-- S: TREE View ------------------------------------------------------------------------ -->
    <article class="treeview_area g-row2 ty1" style="grid-template-rows: auto;">
        <!-- <div class="treeview_search">
            <div class="searchbox_wrap">
                <input type="text" placeholder="검색어를 입력하세요">
                <button type="button" class="icon_btn search">
                    <i class="ic ic-search"></i>
                    <span class="blind">검색</span>
                </button>
            </div>
        </div> -->
        <div class="treeview_wrap g-col2 ty1">
            <div class="treeview" id="jstree1" style="display: none;">
                <!--트리 영역-->
            </div>
            <div class="treeview" id="jstree2">
                <!--트리 영역-->
            </div>
        </div>
    </article>
    <!-- // E: TREE View ------------------------------------------------------------------------ -->

    <article class="conts g-row">
        <div class="group">
            <h3 class="conts_tit">{{ message('item.dept.001') }}</h3>
            <div class="conts_form">
                <div class="btn_area s_default">
                    {{ deptBtnHtml | raw }}
                    <!-- <button type="button" class="btn _outline" onclick="page.department.delete()">{{ message('btn.002') }}</button>
                    <button type="button" class="btn _outline" onclick="page.department.update()">{{ message('btn.003') }}</button>
                    <button type="button" class="btn _point" onclick="page.department.create()">{{ message('btn.031') }}</button> -->
                </div>

                <div class="form_box">
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label">{{ message('item.dept.002') }}</div>
                            <div class="form_data">
                                <input type="text" name="deptId" id="deptId" readonly>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message('item.dept.003') }}</div>
                            <div class="form_data">
                                <input type="text" name="deptNm" id="deptNm" readonly>
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label">{{ message('item.dept.004') }}</div>
                            <div class="form_data">
                                <input type="text" name="pstnNm" id="pstnNm" readonly>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message('item.dept.005') }}</div>
                            <div class="form_data">
                                <input type="text" name="mngNm" id="mngNm" readonly>
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('item.dept.006') }}</div>
                            <div class="form_data">
                                <textarea name="deptDscrpt" id="deptDscrpt" readonly style="pointer-events: auto;"></textarea>
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('item.com.003') }}</div>
                            <div class="form_data">
                                <input type="text" name="deptUseYn" id="deptUseYn" readonly>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="group">
            <h3 class="conts_tit">{{ message('item.dept.007') }}</h3>

            <div class="conts_grid">
                <!-- S: search wrap ---------------------------------------------- -->
                <div class="search_wrap">
                    <span class="selectbox">
                        <select name="org_search_type" id="">
                            <option selected value="">{{ message('item.com.083') }}</option>
                            <option value="usr_nm">{{ message('item.com.024') }}</option>
                            <option value="login_id">{{ message('item.com.025') }}</option>
                            <option value="pstn_nm">{{ message('item.com.026') }}</option>
                            <option value="ratng_nm">{{ message('item.com.027') }}</option>
                            <option value="flag_nm">{{ message('item.com.028') }}</option>
                        </select>
                    </span>
                    <!-- searchbox -->
                    <div class="searchbox_wrap">
                        <input type="text" placeholder="검색어를 입력하세요" name="keyword" onkeypress="if(event.keyCode == 13){page.department.employee.searchData();}">
                        <button type="button" class="icon_btn search" onclick="page.department.employee.searchData()">
                            <i class="ic ic-search"></i>
                            <span class="blind">검색</span>
                        </button>
                    </div>
                </div>
                <!-- // E: search wrap ---------------------------------------------- -->
                <div class="toolbar">
                    <div class="btn_area s_default">
                        {{ orgBtnHtml | raw }}
                        <!-- <button type="button" class="btn _outline" onclick="page.department.employee.delete()">{{ message('btn.002') }}</button>
                        <button type="button" class="btn _outline" onclick="page.department.employee.update()">{{ message('btn.003') }}</button>
                        <button type="button" class="btn _fill" onclick="page.department.employee.create()">{{ message('btn.001') }}</button> -->
                    </div>
                </div>
                <div class="grid" id="employees-grid"></div>
            </div>
        </div>
    </article>
</section>
<div id="popup" class="popup_overlay modal_base" style="display: none;">
    <!-- 팝업 내용 -->
</div>
{% endblock content %} {% block footer_script %}
<script>
let pjtNo;
let cntrctNo;

var page = {
    tree1DeptId: null,
    tree2DeptId: null,
    isDelAuth: "{{ isDelAuth }}",
    init() {

        gaiaPortal.navMenuInit('M070201', "{{ message('item.dept.008') }}");

        // URL에서 menuCd와 cntrctNo를 가져오기 (메뉴 권한을 추가한 후 가져오는 값)
        const urlParams = new URLSearchParams(window.location.search);
        pjtNo = urlParams.get('pjtNo');
        cntrctNo = urlParams.get('cntrctNo');

        // // 쿼리스트링 제거하고 새로고침
        // if (urlParams.toString()) {
        //     // 쿼리스트링이 있으면 제거하고 새로고침
        //     const newUrl = window.location.origin + window.location.pathname;
        //     window.history.replaceState({}, document.title, newUrl);
        // }

        let tree1DeptId;
        let tree2DeptId;

        if(urlParams.get('pjtNo') && urlParams.get('cntrctNo') && urlParams.get('deptId')&& urlParams.get('upDeptId')){
            const deptId = urlParams.get('deptId');
            const upDeptId = urlParams.get('upDeptId');
            const cntrctNo = urlParams.get('cntrctNo');
            const pjtNo = urlParams.get('pjtNo');

            // 트리 초기 선택 노드 설정
            if(upDeptId){
                this.tree1DeptId = upDeptId;
            }
            if (deptId) {
                this.tree2DeptId = deptId;
            }

        }
        
        // if admin
        if (gaiaCommon.me.isAdmin()) {
            page.tree1.init(this.tree1DeptId); // 프로젝트 / 계약 트리 데이터 가져오기
            $("#jstree1").show();
        } 
        else {
            page.department.tree(); // 부서리스트 트리 데이터 가져오기
        }

        page.tree2.init(tree2DeptId);
        page.department.employee.gridInit();

        gaia.loaded = true;
    },

    refresh(tree2, subList) {
        if (tree2) {
            this.department.tree();
        }

        if (subList) {
            this.department.details();
        }
    },

    project: {
        data: {
            selected: {},
        },
    },

    department: {
        data: {
            selected: {},
            details: {},
            currentNode: {}
        },
        init() {
            $("#details").html("");
            $("#subList").html("");
        },

        // 하위 부서 추가 화면 이동
        create() {
            if (!this.data.details.deptNo) {
                gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 부서를 선택해주세요.
                return;
            }

            page.popup.mode = "create";
            gaiaCommon.checkAuth("DEPARTMENT_C_03", () => {
                $("#popup").load(`/system/department-popup/create?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
                $("#popup").css({"display":"flex"});
            });
        },

        // 부서 수정 화면 이동
        update() {
            if (!this.data.details.deptNo || !page.department.data.selected) {
                gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 부서를 선택해주세요.
                return;
            }

            gaiaCommon.checkAuth("DEPARTMENT_U_03", () => {
                $("#popup").load(`/system/department-popup/update?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
                $("#popup").css({"display":"flex"});
            });

        },

        // 부서 삭제
        delete() {
            if(!page.department.data.details.deptNo || Object.keys(this.data.currentNode).length === 0){
                gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 부서를 선택해주세요.
                return;
            }

            let deptIdList = this.data.currentNode.children_d; // 현재 노드 + 하위 노드 ids
            deptIdList.push(this.data.details.deptId);
            const pjtNo = this.data.details.pjtNo;

            const requestData = {
                deptIdList : deptIdList,
                pjtNo : pjtNo
            }

            gaiaCommon.customConfirm('{{ message("item.dept.025") }}', '{{ message("item.dept.025") }}', '{{ message("msg.dept.001") }}', function(){ // 해당 부서와 하위 부서 및 구성원 정보가 삭제됩니다. 삭제하시겠습니까?
                //서버 전송
                gaiaCommon.post("/api/system/department/delete", requestData, function (result) {
                    // 선택된 부서 상태 초기화
                    page.department.data.selected = {};
                    page.department.data.currentNode = {};
                    page.department.data.details = {};
                    
                    page.department.tree();
                    gaiaCommon.customAlert("{{ message('msg.006') }}"); //삭제되었습니다.
                });
			});
        },

        tree() {
            params = {};
            let pjtData;

            if (gaiaCommon.me.isAdmin()) {
                pjtData = page.project.data.selected; // 관리자인 경우, 첫번째 트리에서 선택한 프로젝트, 계약으로 
            }else{
                pjtData = pjtInfo; //일반 사용자의 경우, 헤더의 프로젝트, 계약으로
                // pjtData = commonJs.getSessionStorage("pageCommonData"); //일반 사용자의 경우, 헤더의 프로젝트, 계약으로
            }

            //파라미터 세팅
            params.pjtNo = pjtData.pjtNo
            params.cntrctNo = pjtData.cntrctNo
            params.deptId = page.project.data.selected.deptId||"";

            gaiaCommon.post("/api/system/department/admin-secondtree", params, function (result) {
                var data = [];
                if (result.details?.departmentList) {
                    result.details?.departmentList.forEach((item, index) => {
                        let text = gaiaCommon.decodeSafeText(item.dept_nm);
                        let maxLength = 15;  // 15자 이상이면 자름.
                        let displayText = text.length > maxLength ? text.substring(0, maxLength) + "..." : text;

                        data.push({ 
                            id: item.dept_id,
                            parent: !!item.up_dept_id ? item.up_dept_id : "#",
                            text: displayText,
                            state: { opened: true },
                            data: item
                        });
                    });
                }
                page.tree2.refresh(data);
                page.department.clear();
            });
        },

        // 부서 정보 조회
        details() {
            if (!this.data.selected.dept_no) {
                gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 부서를 선택해주세요.
                return;
            }
            gaiaCommon.get("/api/system/department/" + this.data.selected.dept_no, {},
                function (result) {
                    if (result.details?.department) {
                        page.department.data.details = result.details?.department;
                        //부서정보 매핑
                        $("#deptId").val(page.department.data.details.deptId);
                        $("#deptNm").val(gaiaCommon.decodeSafeText(page.department.data.details.deptNm));
                        $("#pstnNm").val(gaiaCommon.decodeSafeText(page.department.data.details.pstnNm));
                        $("#mngNm").val(gaiaCommon.decodeSafeText(page.department.data.details.mngNm));
                        $("#deptDscrpt").val(gaiaCommon.decodeSafeText(page.department.data.details.deptDscrpt));
                        page.department.data.details.useYn == "Y" ?  $("#deptUseYn").val("{{ message('btn.008') }}") : $("#deptUseYn").val("{{ message('btn.009') }}");
                    }
                    if (result.details?.emploeeList) {
                        page.department.employee.data.list = result.details.emploeeList;
                        page.department.employee.grid.resetData(page.department.employee.data.list);
                        //page.department.employee.list();
                    }
                },
                function (error) {
                    console.error(error);
                    gaiaCommon.customAlert(error.responseJSON?.message);
                }
            );
        },
        clear(){
            //부서 정보 초기화
            $("#deptId").val("");
            $("#deptNm").val("");
            $("#pstnNm").val("");
            $("#mngNm").val("");
            $("#deptDscrpt").val("");
            $("#deptUseYn").val("");

            //직원 정보 초기화
            this.employee.grid.resetData([]);

            //검색 정보 초기화
            $('select[name="org_search_type"]').val('');
            $('input[name="keyword"]').val('');

        },
        employee: {
            data: {
                list: [],
                updateEmployeeInfo: {}
            },
            grid: null,
			obj: null,
			gridInit: function(){
				this.grid = new tui.Grid({
					el: document.getElementById('employees-grid'),
					scrollX: true,
					scrollY: true,
					useClientSort: false,
					// bodyHeight: 150,
                    minBodyHeight:400,
                    contextMenu: null,
					rowHeaders: [
						{
							type: 'checkbox',
							// header: `
							// 		<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />
									
							// `,
							width: 100,
							renderer: {
								type: window.IconRenderer,
                                options: [
                                    {
                                        type:'checkBox'
                                    },
                                    {
                                        type:'trash',
                                        //휴지통 클릭 삭제 시 필요한 값 설정
										url: `/api/system/department/user/delete`,
										idField: 'orgNo', 
										keyName: 'orgNoList',
                                        auth: page.isDelAuth === "true",
										msgList: {
                                            confirmTit: "{{ message('item.dept.018') }}", //	소속 직원 삭제
											confirmMsg: "{{ message('msg.009') }}", //정말 삭제하시겠습니까?
											completeMsg: "{{ message('msg.006') }}" //삭제되었습니다.
										},
                                        success: function() {
                                            page.refresh(false, true);
                                        }
								    }
                                ]
							}
						},
						
				    ],
					columns:[
						{ 
							header: "{{ message('item.com.025') }}", // 계정
							name: 'loginId',
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.024') }}", // 이름
							name: 'usrNm',
							align: 'center',
                            minWidth:95,
                            renderer: {
								type: window.IconRenderer,
								options: [
                                    {
                                        type:'newWindow',
                                        gridId: "employees-grid",
                                        isHover:true,
                                        align:'right',
                                        absolute:true,
                                        open:{
                                            mode:'m', //modal
                                            url: `/system/department/emploee-detail-popup?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`,
                                            key:'employee',
                                        },
                                    }
                                ]
							},
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.027') }}", //직급
							name: 'ratngNm',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.026') }}", //직책
							name: 'pstnNm',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.028') }}", //근무상태
							name: 'flagNm',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.user.002') }}", //휴대폰 번호
							name: 'phoneNo',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.user.007') }}", //이메일
							name: 'emailAdrs',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.029') }}", //시작일
							name: 'startDt',
							align: 'center',
                            resizable: true
						},
						{ 
							header: "{{ message('item.com.030') }}", //종료일
							name: 'endDt',
							align: 'center',
                            resizable: true
						},
					],
				});

                refreshGrid(this.grid); // 그리드 리사이즈 문제 해결
			},
            //직원 검색
            searchData(){
                const deptNo = page.department.data.selected.dept_no;

                let pjtData;

                if (gaiaCommon.me.isAdmin()) {
                    pjtData = page.project.data.selected; // 관리자인 경우, 첫번째 트리에서 선택한 프로젝트, 계약으로 
                }else{
                    pjtData = pjtInfo; //일반 사용자의 경우, 헤더의 프로젝트, 계약으로
                // pjtData = commonJs.getSessionStorage("pageCommonData"); //일반 사용자의 경우, 헤더의 프로젝트, 계약으로

                }

                let param = {
                    pjtNo: pjtData.pjtNo,
                    cntrctNo: pjtData.cntrctNo,
                }
                let columnNm = $('select[name="org_search_type"]').val();
                let text = $('input[name="keyword"]').val();


                // 값이 없거나 빈 문자열이면 알림창 띄우고, 그렇지 않으면 param에 추가
                if (!columnNm || columnNm === "") {
                    gaiaCommon.customAlert("{{ message('msg.003') }}"); //구분을 선택해주세요.
                    $('input[name="keyword"]').val('');
                    // return;
                }
                    
                if (!text || text.trim() === "") {
                    gaiaCommon.customAlert("{{ message('msg.004') }}"); //검색어를 입력해주세요.
                    $('select[name="org_search_type"]').val('');
                }else{
                    param.columnNm = columnNm; // param에 columnNm 추가
                    param.text = text; // param에 text 추가
    
                }

                // 서버 요청
                gaiaCommon.get(`/api/system/department/emploee/${deptNo}/list`, param,
                    function (result) {
                        if (result.ok) {
                            page.department.employee.data.list = result.details.employeeList;
                            page.department.employee.grid.resetData(page.department.employee.data.list);
                        }
                    },
                    function (error) {
                        console.error(error);
                        gaiaCommon.customAlert(error.responseJSON?.message);
                    }
                )
            },

            // 직원 추가 페이지 이동
            create() {
                if(page.department.data.selected !== null && Object.keys(page.department.data.selected).length > 0){
                    page.popup.mode = "create";

                    let pjtData;

                    if (gaiaCommon.me.isAdmin()) {
                        pjtData = page.project.data.selected; // 관리자인 경우, 첫번째 트리에서 선택한 프로젝트, 계약으로 
                    }else{
                        pjtData = pjtInfo; //일반 사용자의 경우, 헤더의 프로젝트, 계약으로
                    // pjtData = commonJs.getSessionStorage("pageCommonData"); //일반 사용자의 경우, 헤더의 프로젝트, 계약으로

                    }


                    const breadcrumb = encodeURIComponent(page.tree2.data.breadCrumb);
                    const deptId = page.department.data.selected.dept_id;
                    const upDeptId = page.project.data.selected.deptId; // 프로젝트, 계약의 deptId
                    const deptNo = page.department.data.selected.dept_no;
                    const svrType = page.department.data.details.svrType;

                    window.location.href = `/system/department-emploee-popup?breadcrumb=${breadcrumb}&pjtNo=${pjtData.pjtNo}&cntrctNo=${pjtData.cntrctNo}&deptId=${deptId}&deptNo=${deptNo}&svrType=${svrType}&upDeptId=${upDeptId}`;

                }else{
                    gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 부서를 선택해주세요.
                }
            },
            update(){
                if(page.department.data.selected !== null && Object.keys(page.department.data.selected).length > 0){
                    // 선택된 행의 사이즈를 체크 (길이는 1이어야 함.)
                    let checkedRowLength = page.department.employee.grid.getCheckedRows().length;
                    let checkedRowData = page.department.employee.grid.getCheckedRows()[0];

                    let pjtData;

                    if (gaiaCommon.me.isAdmin()) {
                        pjtData = page.project.data.selected; // 관리자인 경우, 첫번째 트리에서 선택한 프로젝트, 계약으로 
                    }else{
                        pjtData = pjtInfo; //일반 사용자의 경우, 헤더의 프로젝트, 계약으로
                    // pjtData = commonJs.getSessionStorage("pageCommonData"); //일반 사용자의 경우, 헤더의 프로젝트, 계약으로

                    }

                    
                    if(checkedRowLength === 1){
                        this.data.updateEmployeeInfo = checkedRowData;

                        gaiaCommon.checkAuth("DEPARTMENT_U_04", () => {
                            $("#popup").load(`/system/department-emploee-popup/update?pjtNo=${pjtData.pjtNo}&cntrctNo=${pjtData.cntrctNo}`);
                            $("#popup").css({"display":"flex"});
                        });

                    }else if(checkedRowLength > 1){
                        gaiaCommon.customAlert("{{ message('msg.dept.009') }}"); // 하나의 직원을 선택해주세요.
                        return;
                    }else{
                        gaiaCommon.customAlert("{{ message('msg.dept.010') }}"); // 수정할 직원을 선택해주세요.
                        return;
                    }


                }else{
                    gaiaCommon.customAlert("{{ message('msg.038', message('item.dept.009')) }}"); // 하나의 직원을 선택해주세요.
                }
            },

            delete() {
                var orgNoList = [];

                page.department.employee.grid.getData().forEach(function(v){
					if(v._attributes.checked){
						orgNoList.push(v.orgNo);
					}
				});

                // const pjtNo = page.department.data.details.pjtNo;

                const requestData = {
                    orgNoList: orgNoList,
                }

                if (orgNoList.length > 0) { //소속된 직원을 삭제하시겠습니까?
                    gaiaCommon.customConfirm("{{ message('item.dept.018') }}","{{ message('item.dept.018') }}","{{ message('msg.dept.002') }}", function(){
                        gaiaCommon.post(`/api/system/department/user/delete`, requestData,
                            function (result) {
                                page.department.details();
                                gaiaCommon.customAlert("{{ message('msg.006') }}"); //삭제되었습니다.
                            },
                            function (error) {
                                console.error(error);
                                gaiaCommon.customAlert(error.responseJSON?.message);
                            }
                        );
                    });
                } else {
                    gaiaCommon.customAlert("{{ message('msg.dept.003') }}"); //삭제할 직원을 선택해주세요.
                }
            },
        },
    },
    //=====프로젝트 & 계약 트리=====//
    tree1: {
        obj: null,
        data: {
            breadCrumb: ""
        },
        refresh: function () {
            this.obj.jstree(true).refresh();
        },
        getNode: function (id) {
            return this.obj.jstree("get_node", id);
        },
        setBreadcrumb: function (node, sep) {
            this.data.breadCrumb = this.getBreadcrumb(node, sep);
            this.data.upBreadCrumb = this.getBreadcrumb(this.obj.jstree("get_node", node.parent), sep);
        },
        getBreadcrumb(node, sep) {
            var breadCrumb = [];
            while (node) {
                // deptNm이 있는 경우 사용, 없으면 text 사용
                const deptName = node.data?.deptNm || node.text;
                // breadCrumb.unshift(node.text);
                breadCrumb.unshift(deptName);
                if (node.parent && node.parent != "#") {
                    node = this.obj.jstree("get_node", node.parent);
                } else {
                    node = "";
                }
            }
            return sep ? breadCrumb.join(" " + sep + " ") : breadCrumb.join(" > ");
        },
        init: function (deptId) {
            let url;
            let param;
            // ADMIN 인 경우
            if(gaiaCommon.me.isAdmin()){
                url = "/api/system/department/admin-tree";
                param = {};
            // NORMAL 인 경우
            }else{
                if(isGAIA()){          //gaia 사용자인 경우
                    url = "/api/system/department/gaia-tree";
                }else if(isCAIROS()){     //cmis 사용자인 경우
                    url = "/api/system/department/cmis-tree";
                }

                const pjtData = {
                    pjtNo: pjtNo,
                    cntrctNo: cntrctNo
                }; 
                
                param = {
                    pjtNo: pjtData.pjtNo,
                    cntrctNo: pjtData.cntrctNo
                }
            }
            this.obj = $("#jstree1").jstree({
                plugins: ["search"],
                core: {
                    data: function (obj, cb) {
                        gaiaCommon.get(url, param, function (result) {
                            var data = [];
                            if (result.details?.treeList) {
                                result.details?.treeList.forEach((item, index) => {
                                    let text = gaiaCommon.decodeSafeText(item.dept_nm);
                                    let maxLength = 15;  // 15자 이상이면 자름.
                                    let displayText = text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
                                    let upDeptId = item.up_dept_id;
                                    let deptLvl = 0;
                                    if(upDeptId === "#"){
                                        deptLvl = 0;
                                    }
                                    else if(upDeptId === "G"){
                                        deptLvl = 1;
                                    }
                                    else if(item.pjt_type === "CAIROS"){
                                        deptLvl = 2;
                                    }
                                    data.push({
                                        id: item.dept_id,
                                        parent: item.up_dept_id,
                                        text: displayText,
                                        state: { opened: false },
                                        data: {
                                            cntrctNo: item.cntrct_no,
                                            pjtNo: item.pjt_no,
                                            actionType: item.action_type,
                                            deptId: item.dept_id,
                                            deptNo: item.dept_no,
                                            pjtType: item.pjt_type,
                                            corpNo: item.corp_no,
                                            deptNm: text,
                                            deptLvl:deptLvl
                                        },
                                        icons: 'fa-solid fa-caret-right',
                                        li_attr: { 
                                            title: text 
                                        },
                                    });
                                });
                                cb.call(obj, data);
                            }
                        },
                        function (error) {
                            console.error(error);
                            gaiaCommon.customAlert(error.responseJSON?.message);
                        }
                        );
                    },
                    check_callback: true, // 요거이 없으면, create_node 안먹음
                    themes : {
								"theme" : "default",
								"dots": false,
								"responsive": false,
								"icons" : false
					}
                },
            });

            this.obj.on("ready.jstree", function(e, data){
                // 직원 추가 페이지에서 돌아오는 경우, 선택된 상태 유지
                if (deptId) {
                    page.tree1.selectNode(deptId); // 트리가 준비된 후 menuCd를 기준으로 노드 선택
                }

            });

            this.obj.on("select_node.jstree", function (e, data) {
                if(page.department.data.details){
                    // 프로젝트(계약) 새로 선택 시, 부서 정보 초기화
                    page.department.data.details = {};
                    page.department.data.selected = null;
                    page.department.clear();

                    //선택된 부서 트리 상태 초기화
                    page.tree2.obj.jstree(true).deselect_all();

                    //브레드 크럼 초기화
                    page.tree2.data.breadCrumb = "";
                    page.tree2.data.upBreadCrumb = "";


                }
                page.tree1.setBreadcrumb(data.node); // 브레드크럼 설정
                page.project.data.selected = data.node?.data;

                if(page.project.data.selected.actionType === 'SEARCH') {
                    page.department.data.details = data.node?.data;
                    page.department.tree();
                }else{
                    page.tree2.refresh([]);
                }

            });

            this.obj.on("click.jstree", function (e, data) {
                var node = $(e.target).closest("li");
                var nodeId = node[0].id;
                $('#jstree1').jstree("toggle_node", nodeId);
            });

        },
        // 특정 노드를 선택 상태로 만드는 함수
        selectNode(deptId) {
            const nodeId = this.obj.jstree(true).get_node(deptId);
            if (nodeId) {
                this.obj.jstree(true).deselect_all();  // 기존 선택 해제
                this.obj.jstree(true).select_node(deptId);  // 해당 노드 선택
            } else {
                console.error("Node with deptNo ", deptId, " not found.");
            }
        },
    },
    //=====하위 부서 트리=====//
    tree2: {
        obj: null,
        data: {
            breadCrumb: "",
            upBreadCrumb: "",
        },
        refresh: function (data) {
            if (data) {
                this.obj.jstree(true).settings.core.data = data;
            }
            this.obj.jstree(true).refresh();
            if(page.tree2DeptId){
                console.log("두번째 트리 id: ", page.tree2DeptId);
                // refresh 후 jstree의 refresh 이벤트가 완료되었을 때 실행
                this.obj.on("refresh.jstree", function () {
                    page.tree2.selectNode(page.tree2DeptId); // 트리 새로고침 후 selectNode 호출
                });
            }
        },
        getNode: function (id) {
            return this.obj.jstree("get_node", id);
        },
        setBreadcrumb: function (node, sep) {
            this.data.breadCrumb = this.getBreadcrumb(node, sep);
            this.data.upBreadCrumb = this.getBreadcrumb(this.obj.jstree("get_node", node.parent), sep);
        },
        getBreadcrumb(node, sep) {
            var breadCrumb = [];
            while (node) {
                breadCrumb.unshift(node.text);
                if (node.parent && node.parent != "#") {
                    node = this.obj.jstree("get_node", node.parent);
                } else {
                    node = "";
                }
            }
            return sep ? breadCrumb.join(" " + sep + " ") : breadCrumb.join(" > ");
        },
        init: function (deptId) {

            this.obj = $("#jstree2").jstree({
                plugins: ["search"],
                core: {
                    data: [],
                    icons: 'fa-solid fa-caret-right',
					//li_attr: { class: "list_item" },
                    check_callback: true,
                    themes : {
                        "theme" : "default",
                        "dots": false,
                        "responsive": false,
                        "icons" : false
                    }
                },
            });

            this.obj.on("select_node.jstree", function (e, data) {
                page.tree2.setBreadcrumb(data.node); // 브레드크럼 설정
                page.department.data.selected = data.node?.data;
                page.department.data.currentNode = data.node;
                page.department.clear();

                page.department.details();
            });
            this.obj.on("refresh.jstree", function (e, data) {

            })

        },

        // 노드를 선택 상태로 만듦
        selectNode: function (deptId) {
            if(!deptId){
                console.warn("Node2 not deptId");
                return;
            }

            const nodeId = this.obj.jstree(true).get_node(deptId);
            if (nodeId) {
                this.obj.jstree(true).deselect_all();       // 기존 선택 해제
                this.obj.jstree(true).select_node(deptId);  // 해당 노드 선택
                page.tree2DeptId = null;                    // 부서 id 초기화
            } else {
                console.error("Node2 with deptId", deptId, "not found.");
            }
        }
    },
    popup: {
        mode: null,
        data: {
            upperDepartment: "",
        },
        close() {
            this.mode = null;
            $("#popup").html("");
        },
    },
};

$(function() {
    gaia.create({
        $init: function ($params) {
            page.init();
        }
    });
    
    gaia.loaded = true;
});

</script>

<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>
{% endblock footer_script %}
