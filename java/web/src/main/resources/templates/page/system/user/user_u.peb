{% extends header ? 'layout/base_content' : 'layout/base_popup' %} {% block head %}
<!-- css -->
<style>
    .stamp_info{
        max-width: 120px;
        max-height: 65px;

        margin-left: 0;
    }
</style>
{% endblock %} {% block content %}
<article class="conts_area">
    <div class="conts">
        <div class="conts_form">
            <div class="btn_area s_default">
                <button type="button" class="btn _outline" id="action-button" onclick="page.save()">{{ message('btn.006') }}</button>
                <button type="button" class="btn _outline" id="close-popup" onclick="page.close()">
                    {{ message("btn.007") }}
                </button>
                <div class="btn_group iconbtns" id="newWindow">
                    <button class="icon_btn" onclick="page.open()">
                        <i class="ic ic-sent-to-back"></i>
                        <span class="tooltip">{{ message("item.com.017") }}</span>
                    </button>
                </div>
            </div>

            <div class="form_box">
                <div class="group">
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label" style="letter-spacing:1px;">{{ message("item.user.001") }}</div>
                            <div class="form_data" id="loginId">
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">직인</div>
                            <div class="form_data" id="stmpImg">
                                <div class="btn_area stamp_btns">
                                    <div class="_outline">
                                        <button type="button" class="btn icon_btn" id="addPhotoData" style="" onclick="page.uploadFile(this)">
                                            <i class="ic ic-picture-one"></i>
                                            <span class="blind">직인등록</span>
                                        </button>
                                        <input type="file" style="display:none" id="stampFile" accept="image/*">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label required">{{ message("item.user.003") }}</div>
                            <div class="form_data">
                                <input type="text" id="usrNm" name="usrNm" maxlength="30" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message("item.user.002") }}</div>
                            <div class="form_data">
                                <input type="text" id="phoneNo" name="phoneNo" class="telNo" />
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label">{{ message("item.user.005") }}</div>
                            <div class="form_data">
                                <span class="selectbox" id="selectBox1">
                                </span>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message("item.user.004") }}</div>
                            <div class="form_data">
                                <input type="text" id="telNo" name="telNo" class="telNo" />
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label">{{ message("item.user.006") }}</div>
                            <div class="form_data">
                                <span class="selectbox" id="selectBox2">
                                </span>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message("item.user.007") }}</div>
                            <div class="form_data">
                                <input type="email" id="emailAdrs" name="emailAdrs" class="email" maxlength="100" />
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row cols2">
                        <div class="col">
                            <div class="form_label">{{ message("item.user.017") }}</div>
                            <div class="form_data">
                                <div class="item_group" role="group" aria-label="Basic radio group">
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="mngDivN" name="mngDiv" value="N"/>
                                        <span class="check_label">{{ message("item.user.023") }}</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="mngDivA" name="mngDiv" value="A"/>
                                        <span class="check_label">{{ message("item.user.024") }}</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="mngDivC" name="mngDiv" value="C"/>
                                        <span class="check_label">{{ message("item.user.025") }}</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="mngDivM" name="mngDiv" value="M"/>
                                        <span class="check_label">{{ message("item.user.026") }}</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form_label">{{ message("item.com.003") }}</div>
                            <div class="form_data">
                                <div class="item_group" role="group" aria-label="Basic radio group">
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="useY" name="useYn" value="Y" />
                                        <span class="check_label">{{ message("item.com.015") }}</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="useN" name="useYn" value="N" />
                                        <span class="check_label">{{ message("item.com.016") }}</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="existCheck" value="true">
            </div>
        </div>
    </div>
</article>
{% endblock content %} {% block footer_script %}
<script>
    const params = new URLSearchParams(window.location.search);
    const usrId = params.get("usrId");
    const type = params.get("type");
    let pjtNo;
    let cntrctNo;

    var page = {
        data: {
            init: "={{ message('item.com.005') }}="
        },
        init: async function () {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;
            if (type === 'p') {
                $("#newWindow").hide();
            }

            this.loadData(usrId);
            title = "{{ message('item.user.013') }}";

            gaiaPortal.navMenuInit("M070202", title);
            $("#menuDepth").append(`<li class="breadcrumb_item">${title}</li>`);

            $("input[type=file]").change(page.doFileChanged);
        },
        open: function () {
            const width = 1000;
            const height = 450;
            let left = Math.ceil((window.screen.width - width) / 2);
            left += window.screenLeft; // 듀얼 모니터일 때
            const top = Math.ceil((window.screen.height - height) / 2);
            window.open(
                `/system/user/update?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&type=p&usrId=${usrId}`,
                "",
                `width=${width},height=${height},left=${left},top=${top}`
            );

            window.location.replace(`/system/user?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);

            return false;
        },

        save: function () {
            this.update(usrId);
        },

        close: function () {
            if (type === 'd') {
                window.location.replace(`/system/user?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
            } else if (type === 'p') {
                window.close();
            }
        },


        update: function (usrId) {
            existCheck = $("#existCheck").val();
            data = {
                usrId: usrId,
                loginId: $("#loginId").text().trim(),
                usrNm: $("#usrNm").val().trim(),
                ratngCd: $("#ratngCd").val(),
                pstnCd: $("#pstnCd").val(),
                phoneNo: $("#phoneNo").val(),
                telNo: $("#telNo").val(),
                emailAdrs: $("#emailAdrs").val().trim(),
                mngDiv: $("input[name='mngDiv']:checked").val(),
                useYn: $("input[name='useYn']:checked").val(),
            };

            const updateFormData = new FormData();

            // 수정된 사용자 정보 객체 form data에 담기
            updateFormData.append("user", new Blob(
                [JSON.stringify(data)],
                { type: "application/json" }
            ));
            updateFormData.append("stampFile", document.getElementById("stampFile").files[0]);

            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.post("/api/system/user/update", updateFormData, function (result) {
                gaiaCommon.customAlert("{{ message('msg.007') }}", function () {
                    page.close();
                    gaiaCommon.LoadingOverlay('body', false);
                });
            }, function (error) {
                let callback; if (!$("#usrNm").val().trim()) {
                    callback = function () { $('#usrNm').focus(); }
                    gaiaCommon.customAlert("{{ message('msg.078') }}", callback);
                }
            });
        },

        setStampImg: function (stmpDiskPath, stmpDiskNm) {
            const stampContainer = $("#stmpImg");
            stampContainer.css("display", "block");

            const imgPath = gaiaCommon.convertAbsoluteToRelativePath(stmpDiskPath, stmpDiskNm)

            const stampImgEl = `
                <figure class="stamp_info">
                    <img src="${imgPath}" style="max-height: 65px; max-width: max-content;">
                </figure>
            `

            stampContainer.append(stampImgEl);
        },

        doFileChanged:function (e) {
            const fileTag = e.target;
            const file = fileTag?.files[0];

            if(!file.type.startsWith('image/')) {
                gaiaCommon.customAlert("이미지 파일만 업로드 가능합니다.")
                fileTag.value = "";
                return;
            }

            //파일을 업로드 했다가 취소하는 경우
            //thumbnail 띄우기
            //업로드 된 파일의 확장자명
            const thumbnail = document.querySelector(`.stamp_info img`);
            const reader = new FileReader();
            reader.onload = function(ie){
                const img = new Image();
                img.onload = function() {
                    if(img.height > 2000 || img.width > 2000){
                        gaiaCommon.customAlert("직인의 크기는 최대 2000px × 2000px 입니다.")
                        return;
                    }
                    else{
                        thumbnail.setAttribute("src",ie.target.result);
                        // thumbnail.setAttribute("class","thumbnail");
                    }
                }
                img.src = ie.target.result;
            }
            reader.readAsDataURL(file);
        },

        uploadFile:function (btn) {
            page.uploadBtn = $(btn);
            page.cancelBtn = $(btn).next().next();
            btn.nextElementSibling.click();
        },

        loadData: function (usrId) {
            const url = "/api/system/user/" + usrId;

            $.ajax({
                url: url,
                method: "GET",
                dataType: "json",
                success: function (result) {
                    let data = result.details.user;

                    // 폼 데이터 채우기
                    $("#loginId").text(gaiaCommon.decodeSafeText(data.loginId));
                    $("#usrNm").val(gaiaCommon.decodeSafeText(data.usrNm));
                    $("#ratngCd").val(data.ratngCd);
                    $("#pstnCd").val(data.pstnCd);
                    $("#phoneNo").val(data.phoneNo);
                    $("#telNo").val(data.telNo);
                    $("#emailAdrs").val(gaiaCommon.decodeSafeText(data.emailAdrs));

                    if (data.useYn === "Y") {
                        $("#useY").prop("checked", true);
                    } else {
                        $("#useN").prop("checked", true);
                    }

                    console.log(data.mngDiv);

                    if (data.mngDiv === "A") {
                        $("#mngDivA").prop("checked", true);
                    } else if (data.mngDiv === "C") {
                        $("#mngDivC").prop("checked", true);
                    } else if (data.mngDiv === "M") {
                        $("#mngDivM").prop("checked", true);
                    } else {
                        $("#mngDivN").prop("checked", true);
                    }

                    page.setStampImg(data.fileDiskPath, data.fileDiskNm);
                },
                error: function (xhr, status, error) {
                    console.error("Error loading user data:", error);
                }
            });

        },

        makeSelectBox: function (comCodeSelectBoxGets) {
            $.ajax({
                url: "/api/util/make-selectBox",
                method: "POST",
                dataType: "json",
                xhrFields: { withCredentials: true },
                contentType: "application/json; charset=UTF-8",
                traditional: true,
                data: JSON.stringify(comCodeSelectBoxGets), // 요청 데이터로 comCodeSelectBoxGets 배열을 전송
                success: function (data) {
                    let returnMap = data.details.returnMap;
                    comCodeSelectBoxGets.forEach(function (item, index) {
                        let addAppLineContent = document.getElementById(
                            item.selectBoxId
                        );
                        let categorySelect = `${returnMap[item.selectBoxId]}`;
                        if (addAppLineContent) {
                            addAppLineContent.innerHTML =
                                returnMap[item.selectBoxId];
                        }
                        $(`#selectBox${index + 1}`).append(categorySelect);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error making select box:", status, error);
                },
            });
        },

        initializeSelectBoxes() {
            let selectBoxRequests = [
                {
                    cmnGrpCd: "7de5a73e-ec43-475a-a10b-78cbc4ceec77",
                    selectBoxId: "ratngCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: page.data.init,
                    paramNm: "ratngCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "",
                },
                {
                    cmnGrpCd: "5c4cc11d-ea98-4ffc-a451-74f6e004384d",
                    selectBoxId: "pstnCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: page.data.init,
                    paramNm: "pstnCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "",
                },
            ];
            page.makeSelectBox(selectBoxRequests);
        },
    };

    page.initializeSelectBoxes();

    $(function () {
        gaia.create({
            $init: function ($params) {
                page.init();

                gaia.loaded = true
            }
        });
    })
</script>
{% endblock footer_script %}