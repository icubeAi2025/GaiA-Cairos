{% extends 'layout/base_content' %} {% block head %}
{% endblock %} {% block content %}
<section class="contents_wrap">
    <article class="conts" id="container">
        <div class="group">
            <h3 class="conts_tit">{{ message('item.user.011') }}</h3>

            <div class="conts_grid">
                <div class="search_wrap">
                    <span class="selectboxContainer" id="selectBox">

                    </span>
                    <span class="selectboxContainer" id="selectBox2">
                        <select name="searchName" id="searchName">
                            <option selected value="">{{ message('item.comp.003') }}</option>
                        </select>
                    </span>

                    <div class="searchbox_wrap">
                        <input type="text" id="keyword" name="keyword" placeholder="{{message('item.user.003')}}, {{message('item.user.007')}}" />
                        <button type="button" class="icon_btn search" onclick='page.user.search()'>
                            <i class='ic ic-search'></i><span class='blind'>검색</span>
                        </button>
                    </div>
                </div>

                <div class="toolbar">
                    <div class="btn_area s_default">
                        {{ btnHtml | raw }}
                    </div>
                    <div class="selectbox sort">
                        <select name="items-per-page" id="items-per-page" onchange="page.user.changePerPage()">
                            <option selected disabled value="">
                                {{ message("item.com.004") }}
                            </option>
                            <option value="5">5</option>
                            <option selected value="10">10</option>
                            <option value="15">15</option>
                        </select>
                    </div>
                </div>

                <div class="grid" id="user-grid"></div>
            </div>
        </div>
    </article>
</section>
{% endblock content %} {% block footer_script %}
<script>
    //새창 아이콘 렌더러
    const newWindowViewRenderer = window.NewWindowViewRenderer;
    const channel = new BroadcastChannel("system-user");

    let pjtNo;
    let cntrctNo;

    var searchGroup;
    var searchName;
    var keyword;

    var page = {
        init() {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;
            this.grid.init();
        },
        grid: {
            init() {
                const Grid = tui.Grid;
                let _this = this;
                if (this.userGrid) {
                    this.userGrid.destroy(); // 기존 인스턴스 제거
                    this.userGrid = null;
                }

                const dataSource = createDataSource({
                    readData: {
                        url: "/api/system/user/list",
                        method: "GET",
                        initParams: {
                            searchGroup: searchGroup,
                            searchName: searchName,
                            keyword: keyword,
                            pjtNo: pjtNo,
                            cntrctNo: cntrctNo,
                        },
                    }
                })

                if (!this.userGrid) {
                    this.userGrid = new Grid({
                        el: document.getElementById("user-grid"),
                        data: dataSource,
                        scrollX: false,
                        scrollY: true,
                        draggable: false,
                        contextMenu: null,
                        minBodyHeight: 400,
                        bodyHeight: 400,
                        pageOptions: {
                            perPage: parseInt($('select[id="items-per-page"]').val(), 10),
                        },
                        rowHeaders: [
                            {
                                type: "checkbox",
                                header: `<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />`,
                                width: 100,
                                renderer: {
                                    type: window.IconRenderer,
                                    options: [
                                        { type:"checkBox" },
                                        {
                                            type:'trash',
                                            url: "/api/system/user/delete",
                                            idField: "usrId",
                                            keyName: "userList",
                                            msgList: {
                                                confirmTit: "{{ message('item.user.015') }}",
                                                confirmMsg: "{{ message('msg.009') }}",
                                                completeMsg: "{{ message('msg.006') }}"
                                            }
                                        }
                                    ],
                                },
                            },
                        ],
                        columns: [
                            {
                                header: "{{ message('item.user.001') }}",
                                name: "loginId",
                            },
                            {
                                header: "{{ message('item.user.003') }}",
                                name: "usrNm",
                                className: "usrNm",
                                align:"center",
                                renderer: {
                                    type: window.IconRenderer,
                                    options: [{
                                        type:"newWindow",
                                        isHover:true,
                                        absolute:true,
                                        open:{
                                            url:`/system/user/read?type=d&usrId={id}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`
                                        },
                                        idField: "usrId",
                                        gridId: "user-grid",
                                        align: "right",
                                    }],
                                },
                            },
                            {
                                header: "{{ message('item.user.005') }}",
                                name: "ratngNm",
                                align: "center",
                            },
                            {
                                header: "{{ message('item.user.006') }}",
                                name: "pstnNm",
                                align: "center",
                            },
                            {
                                header: "{{ message('item.user.002') }}",
                                name: "phoneNo",
                                align: "center",
                            },
                            {
                                header: "{{ message('item.user.007') }}",
                                name: "emailAdrs",
                            },
                            {
                                header: "{{ message('item.user.017') }}",
                                name: "mngDiv",
                                align: "center",
                            },
                            {
                                header: "{{ message('item.user.008') }}",
                                name: "chgDt",
                                align: "center",
                                formatter: function({ row }) {
                                    const date = new Date(row.chgDt);
                                    const formatted = `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
                                    return formatted;
                                }
                            },
                            {
                                header: "{{ message('item.com.003') }}",
                                name: "useYn",
                                align: "center",
                            },
                        ],
                    });
                }
            },
        },
        user: {
            /* 20250424 - 동기화방식 -> 관리자 조회후 추가방식 변경 */
            syncOracleUser() {
                let URL = `/system/user/user-sync-list?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`;
                popupWindow = window.open(URL, 'targetWindow', 'scrollbars=yes,resizable=yes,width=1300,height=800');
            },
            create() {
                window.location.href = `/system/user/create?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&type=d`;
            },
            update() {
                const checkedNos = page.grid.userGrid.getCheckedRows().length;

                if (checkedNos === 1) {
                    page.grid.userGrid.getCheckedRows().forEach((rowData)=> {
                        const usrId = rowData.usrId;
                        window.location.href = `/system/user/update?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&type=d&usrId=${usrId}`;
                    })
                } else {
                    gaiaCommon.customAlert("{{ message('msg.020') }}");
                }
            },
            delete() {
                const url = "/api/system/user/delete";
                const listName = "userList";
                let checked = [];

                page.grid.userGrid.getCheckedRows().forEach((rowData)=> {
                    const usrId = rowData.usrId;
                    checked.push(usrId);
                })

                if (checked.length > 0) {
                    gaiaCommon.customConfirm("{{ message('item.com.005') }}", "{{ message('item.user.015') }}", "{{ message('msg.009') }}", function () {
                        let data = { [listName]: checked };

                        gaiaCommon.post(url, data,
                                function (result) {
                                    if (result.ok) {
                                        gaiaCommon.customAlert("{{ message('msg.006') }}");
                                        page.grid.obj.grid.reloadData();
                                    }
                                },
                                function (error){
                                    gaiaCommon.customAlert("삭제에 실패하였습니다."); // 저장에 실패하였습니다.
                                    console.error(error);
                                }
                        );
                    });
                } else {
                    gaiaCommon.customAlert("{{ message('msg.021') }}");
                }

            },
            search() {
                searchGroup = $("#searchGroup").val();
                searchName = $("#searchName").val();
                keyword = $('input[name="keyword"]').val();
                page.grid.init();

                page.grid.pagination = page.grid.userGrid.paginationManager.getPagination();
                page.grid.pagination.setItemsPerPage(page.grid.limit);
                page.grid.pagination.reset();

            },
            changePerPage() {
                var size = $('select[id="items-per-page"]').val();
                page.grid.limit = size;
                page.grid.userGrid.setPerPage(page.grid.limit);

                page.grid.pagination = page.grid.userGrid.paginationManager.getPagination();
                page.grid.pagination.setItemsPerPage(page.grid.limit);
                page.grid.pagination.reset();
            },
        },

        // 셀렉트박스 호출
        makeSelectBox: function (comCodeSelectBoxGets) {
            gaiaCommon.post("/api/util/make-selectBox",comCodeSelectBoxGets,(data)=>{
                let returnMap = data.details.returnMap;
                comCodeSelectBoxGets.forEach(function (item) {
                    let addAppLineContent = document.getElementById(
                        item.selectBoxId
                    );
                    let categorySelect = `${returnMap[item.selectBoxId]}`;
                    if (addAppLineContent) {
                        addAppLineContent.innerHTML =
                            returnMap[item.selectBoxId];
                    }

                    $("#selectBox").append(categorySelect);
                    $("#searchGroup option:first").prop("disabled", false);
                    $("#searchGroup option:first").prop("value", '');
                    var option = $("<option>", {
                        value: "none",
                        text: "{{ message('item.user.009') }}",
                    });
                    $("#searchGroup").append(option);
                });
            },(xhr, status, error)=>{
                console.error("Error making select box:", status, error);
            })
        },
        initializeSelectBoxes() {
            let selectBoxRequests = [
                {
                    cmnGrpCd: "f306072f-b2aa-4aa6-bf40-192000832cbc",
                    selectBoxId: "searchGroup",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "{{ message('item.comp.002') }}",
                    paramNm: "searchGroup",
                    funName: "page.updateSecondSelectBox",
                    funParam: "this.value",
                    funtype: "onchange",
                },
            ];

            page.makeSelectBox(selectBoxRequests);
        },

        updateSecondSelectBox: function (selectedGroup) {

            var param = {
                searchGroup: selectedGroup, // 첫 번째 셀렉트박스에서 선택된 값을 파라미터로 사용
            };
            var queryString = $.param(param);
            gaiaCommon.get("/api/system/userCompany?" + queryString,null,(data, status, xhr) => {
                var list = data.details.userComanyList;
                // 셀렉트 박스 초기화
                $("#selectBox2").show();
                $("#searchName").empty();

                // 첫 번째 옵션 추가
                var defaultOption = $("<option>", {
                    value: "all",
                    text: "{{ message('item.comp.003') }}",
                    selected: true,
                });
                $("#searchName").append(defaultOption);

                // 나머지 옵션 추가
                if (list.length > 0) {
                    for (var i = 0; i < list.length; i++) {
                        var option = $("<option>", {
                            value: list[i].corpNo,
                            text: list[i].compNm,
                        });
                        $("#searchName").append(option);
                    }
                }
                if (selectedGroup == "none") {
                    $("#selectBox2").hide();
                    $("#searchName").val("all");
                }
            },(xhr, status, error) => {
                console.error("Error loading second select list:", error);
            })
        },
    };


    page.initializeSelectBoxes();

    document.addEventListener("DOMContentLoaded", function () {
        const alertMessage = localStorage.getItem("alertMessage");
        if (alertMessage) {
            gaiaCommon.customAlert(alertMessage);
            localStorage.removeItem("alertMessage");
        }
    });

    $(function () {
        gaia.create({
            $init: function ($params) {
                page.init();
                gaiaPortal.navMenuInit("SYSTEM04", "{{ message('item.user.010') }}");

                var userType = $("#userType").text().toLowerCase();
                if (userType != "admin") {
                    $(".selectboxContainer").hide()
                }

                // 검색 엔터키 적용
                $('#keyword').on('keyup', function(e) {
                    if (e.key === 'Enter') {
                        page.user.search();
                    }
                });

                gaia.loaded = true
            }
        });
    })
</script>
{% endblock footer_script %}