{% extends header ? 'layout/base_popup' : 'layout/base_content' %}
{% block content %}
<article class="conts_area">
    <div class="conts">
        <h3 class="conts_tit" id="rght_grp_cu_tit"></h3>
        <div class="conts_form">
            <div class="btn_area s_default">
                <button type="button" class="btn _outline" id="action-button" onclick="popup.save()">{{ message('btn.006') }}</button>
				<button type="button" class="btn _outline" id="close-popup" onclick="popup.close()">{{ message('btn.007') }}</button>
                <div class="btn_group iconbtns">
                    <button class="icon_btn" id="open-new-window" onclick="popup.open()">
                        <i class="fa-solid fa-up-right-from-square"></i>
                        <span class="tooltip">{{ message('item.com.017') }}</span>
                    </button>
                </div>
            </div>
            <div class="form_box">
                <form id="cu_rght_grp_form">
                    <div class="container" style="display: flex; align-items: center;">
                        <span class="caption">
                            <span><b class="c_red">*</b> {{ message('item.com.023') }}</span>
                        </span>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">{{ message('item.authority.003') }}</div>
                            <div class="form_data">
                                <input type="text" class="" id="rghtGrpNmKrn" name="rghtGrpNmKrn" required maxlength="100">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('item.authority.004') }}</div>
                            <div class="form_data">
                                <input type="text" class="" id="rghtGrpNmEng" name="rghtGrpNmEng" maxlength="100">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('item.authority.005') }}</div>
                            <div class="form_data">
                                <textarea type="text" id="rghtGrpDscrpt" name="rghtGrpDscrpt" maxlength="200"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">{{ message('item.authority.006') }}</div>
							<div class="form_data">
								<div class="selectbox sort" style="margin-left: 0;">
									<span class="selectbox" id="rghtGrpTy_box">

									</span>
									<!-- <select name="rghtGrpTy" class="required" id="rghtGrpTy" required>
										<option value="" style="display: none">
											그룹 구분을 선택하세요.
										</option>
									</select> -->
								</div>
							</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">{{ message('item.authority.007') }}</div>
							<div class="form_data">
								<div class="selectbox sort" style="margin-left: 0;">
									<span class="selectbox" id="rghtGrpRole_box">

									</span>
									<!-- <select name="rghtGrpRole" class="required" id="rghtGrpRole">
										<option value="" style="display: none">
											역할 구분을 선택하세요.
										</option>
									</select> -->
								</div>
							</div>
                        </div>
                    </div>
					<!-- 신규 권한 설정 영역 추가 Start-->
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('item.doc.020') }}</div>
							<div class="form_data">
								<div class="sticky_wrap" style="width: 100%;">
									<div class="sticky_box" style="text-align: left; max-height: 490px;">
										<table class="table sticky" id="authority-grid" style="border:0px;">
											<thead>
												<tr>
													<th scope="col" style="text-align: center">메뉴경로</th>
													<th scope="col" style="text-align: center">권한</th>
												</tr>
											</thead>
											<tbody>
												<!-- 동적으로 생성되는 행들 -->
											</tbody>
										</table>
									</div>
								</div>
							</div>
                        </div>
                    </div>
					<!-- 신규 권한 설정 영역 추가 End -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">{{ message('item.com.003') }}</div>
                            <div class="form_data">
                                <div class="item_group" role="group" aria-label="Basic radio group">
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="useY" name="useYn" value="Y" checked>
                                        <span class="check_label">{{ message('btn.008') }}</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="useN" name="useYn" value="N">
                                        <span class="check_label">{{ message('btn.009') }}</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</article>
{% endblock content %}

{% block footer_script %}
<script>
	// 새창 모드일때, 부모창이 있는지 감지.
	if(opener){
		opener.document.onkeydown = fkey;
		opener.document.onkeypress = fkey;
		opener.document.onkeyup = fkey;

		// 부모창의 f5 새로고침 누를때 열려있는 팝업 창 닫기
		function fkey(e){
			if (window.event.keyCode == 116) {
				window.close();
			}
		};

		window.opener.onbeforeunload = function () {
			// 부모창이 새로고침되거나 페이지 이동할 때 실행
			if (window) {
				// 자식 창 닫기
				window.close();
			}
		};

	}
	var popup = {
		data: {
			type: null, //새창모드 여부
			pjtNo: null,
			cntrctNo: null,
			rghtGrpNo: null
		},
		init: async function () {
            // URL에서 쿼리 파라미터를 추출하여 mode와 corpNo 값을 설정
            const params = new URLSearchParams(window.location.search);

			const pjtNo = params.get('pjtNo');
			const cntrctNo = params.get('cntrctNo');

			popup.data.pjtNo = pjtNo;
			popup.data.cntrctNo = cntrctNo;

			if(params.get('type')){
				this.data.type = params.get('type');
				$("#open-new-window").hide();
			}

			// // 상단의 프로젝트(계약)을 변경한 경우, 대시보드 페이지로 이동.
			// if(cntrctNo !== pjtData.cntrctNo){
			// 	//잘못된 접근입니다.
			// 	gaiaCommon.customAlert("{{ message('msg.050') }}", function(){
			// 		location.replace("/dashboard/home");
			// 	});
			// }

			let title; // 제목 값

			const rghtGrpNo = params.get('rghtGrpNo');
			popup.data.rghtGrpNo = rghtGrpNo;

			title = "{{ message('item.authority.009') }}" //권한 그룹 수정

			this.loadRghtGroupData(rghtGrpNo);

			//page 헤더 생성
			gaiaPortal.navMenuInit('M070302', title);
			$("#menuDepth").append('<li class=\"breadcrumb_item\">'+ title +'</li>');

			this.enableInputs();
		},

		// 셀렉트박스 호출
        makeSelectBox: function (cmnGrpCd, selectBoxId, elementId, initText, ckeckedValue) {
            let requestData = {
                cmnGrpCd: cmnGrpCd,
                selectBoxId: selectBoxId,
                selectBoxNmType: "KOR", //TODO: 영어일 때 항목 가져오는 거 필요.
                ckeckedValue: ckeckedValue,
                orderByCol: "",
                orderByType: "",
                initText: initText,
                paramNm: selectBoxId,
                funName: "",
                funParam: "this.value",
                funtype: "onchange",
            };

            gaiaCommon.post("/api/util/make-selectBox",[requestData],
                    function(result) {
                        let returnMap = result.details.returnMap;
                        let addAppLineContent = document.getElementById(elementId);
                        addAppLineContent.innerHTML = returnMap[selectBoxId];
                    },
                    function (error){
                        console.error("Error making select box:", error);
                    }
            );
        },
		initializeSelectBoxes: {
			rghtGrpTy : function (ckeckedValue) {
				popup.makeSelectBox(
					"cea38dd7-1a5c-4189-befa-46299cc8ecd1", 					// 권한 그룹 구분
					"rghtGrpTy",
					"rghtGrpTy_box",
					"{{ message('msg.038', message('item.authority.006')) }}",	// 그룹 구분을 선택하세요.
					ckeckedValue
				);
			},

			rghtGrpRole : function (ckeckedValue) {
				popup.makeSelectBox(
					"54c24f40-f4cd-4391-b217-b06bcd821391",						// 역할(업무) 구분
					"rghtGrpRole",
					"rghtGrpRole_box",
					"{{ message('msg.038', message('item.authority.007')) }}", 	// 역할 구분을 선택하세요
					ckeckedValue,
				);
			}

		},

		// input 요소 활성화
        enableInputs: function () {
            $('#cu_rght_grp_form input').prop('disabled', false);
            $('#cu_rght_grp_form select').prop('disabled', false);
            $('#open-new-window').prop('disabled', false); 						// 새창 아이콘 활성화
			$("#rghtGrpTy_box").closest('.form_data').addClass('readonly'); // 그룹 구분 비활성화(읽기 전용)
        },

		loadRghtGroupData: function (rghtGrpNo){
			gaiaCommon.get("/api/system/authority-group/" + rghtGrpNo, {},
                async function(result){
                    if(result.ok){
                        let data = result.details.authorityGroup
                        //$('#rghtGrpCd').val(data.rghtGrpCd);
                        $('#rghtGrpNmKrn').val(gaiaCommon.decodeSafeText(data.rghtGrpNmKrn));
                        $('#rghtGrpNmEng').val(gaiaCommon.decodeSafeText(data.rghtGrpNmEng));
                        $('#rghtGrpDscrpt').val(gaiaCommon.decodeSafeText(data.rghtGrpDscrpt));
                        if(data.useYn == 'Y'){
                            $('#useY').prop('checked', true);
                        }else{
                            $('#useN').prop('checked', true);
                        }

						let allMenuAuthoritySetupInfo = result.details?.allMenuAuthoritySetupInfo
						
						const tableBody = document.querySelector("#authority-grid tbody");

						let trSet;
						let setAuthorityItem
						let ulSet;
						let liSet;
						let labelSet;
						let checkData;
						let menuPathNm;

						allMenuAuthoritySetupInfo.forEach((item, index) => {
							if(checkData !== item.menu_cd) {
								if(index !== 0) {
									ulSet.append(liSet);
									setAuthorityItem.append(ulSet);

									trSet.innerHTML = ` <td class="clickable-cell">${menuPathNm}</td>
														<td>${setAuthorityItem.innerHTML}</td>`;

									tableBody.appendChild(trSet);
								}
								//checkData = item.menu_cd;
								trSet = document.createElement("tr");

								setAuthorityItem = document.createElement('div');
								setAuthorityItem.setAttribute("class", "form_data");

								ulSet = document.createElement('ul');
								ulSet.setAttribute("class", "list_sty dropdown_list");

								liSet = document.createElement('li');
								liSet.setAttribute("class", "form_check");

								menuPathNm = item.name_path;
							}

							
							let checkValue = "";					
							if(item.check_yn === "Y") {
								checkValue = "checked";
							}
							labelSet = document.createElement("label");
							labelSet.setAttribute("class", "form_check");
							labelSet.innerHTML = `	<input class="check_mark" type="checkbox" id="${item.check_yn}" name="rghtKind" value="${item.menu_cd},${item.rght_kind}" ${checkValue}>
													<span class="check_label">${item.rght_kind_nm}</span>`;

							liSet.append(labelSet);

							checkData = item.menu_cd;

							if(index === allMenuAuthoritySetupInfo.length-1) {
								ulSet.append(liSet);
								setAuthorityItem.append(ulSet);

								trSet.innerHTML = ` <td class="clickable-cell">${menuPathNm}</td>
													<td>${setAuthorityItem.innerHTML}</td>`;

								tableBody.appendChild(trSet);
							}
						});

                        await popup.initializeSelectBoxes.rghtGrpTy(data.rghtGrpTy);
                        await popup.initializeSelectBoxes.rghtGrpRole(data.rghtGrpRole);
                    }
			    },
                function (error) {
                    console.error(error);
                    gaiaCommon.customAlert(error.responseJSON?.message);
                }
            );
		},

		open: function () {
			let url = window.location.pathname + window.location.search + "&type=p";

			//선택한 프로젝트, 계약 정보
			const cntrctNo = popup.data.cntrctNo;
			const pjtNo = popup.data.pjtNo;

			const _width = '700';
            const _height = '500';

            let _left = Math.ceil((window.screen.width - _width)/2);
            _left += window.screenLeft; // 듀얼 모니터일 때

            const _top = Math.ceil((window.screen.height - _height)/2);
			window.open(url, "authorityGroupPopupU", 'width='+_width+', height='+_height+',left='+_left+',top='+_top+', scrollbars=yes, resizable=yes');
			location.replace(`/system/authority-group?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
		},

		save: function () {
			const replaceUrl = `/system/authority-group?pjtNo=${popup.data.pjtNo}&cntrctNo=${popup.data.cntrctNo}`;
			this.update(replaceUrl);
		},

		update: function (replaceUrl) {
			//필수 값 데이터 확인
			const rghtGrpTy = $("#rghtGrpTy").val();
			const rghtGrpRole = $("#rghtGrpRole").val();
			const rghtGrpNmKrn = $("#rghtGrpNmKrn").val();
			const rghtGrpNo = popup.data.rghtGrpNo;
			let addRghtKindValues = [];
			let delRghtKindValues = [];

			// 필수 값 유효성 확인
            if (!popup.validate()) return false;

			if (!rghtGrpTy || !rghtGrpRole || !rghtGrpNmKrn || !rghtGrpNo) {
                gaiaCommon.customAlert("{{ message('msg.008') }}"); // 필수 값이 누락되었습니다.
				return;
			}

			// name 속성이 'rghtKind'인 체크박스을 찾아 반복
			$("input[name='rghtKind']").each(function() {
				// 신규 체크 항목으로 추가 대상
				if($(this).prop("checked") == true && $(this).attr('id') === 'N') {
					addRghtKindValues.push($(this).val());
				}

				// 언 체크 항목으로 삭제 대상
				if(!$(this).prop("checked") == true && $(this).attr('id') === 'Y') {
					delRghtKindValues.push($(this).val());
				}
			});

			console.log("신규 추가 갯수 : >>> " + addRghtKindValues.length);
			console.log("기존 삭제 갯수 : >>> " + delRghtKindValues.length);

			let data = {
				rghtGrpNo: rghtGrpNo,
				rghtGrpNmKrn: rghtGrpNmKrn,
				rghtGrpNmEng: $("#rghtGrpNmEng").val(),
				rghtGrpDscrpt: $("#rghtGrpDscrpt").val(),
				rghtGrpTy: rghtGrpTy,
				rghtGrpRole: rghtGrpRole,
				addRghtKind: addRghtKindValues,
				delRghtKind: delRghtKindValues,
				useYn: $("input[name=useYn]:checked").val(),
			};

			//서버 전송
			gaiaCommon.LoadingOverlay('body', true);
			gaiaCommon.post("/api/system/authority-group/update", data,
                function (result) {
                    gaiaCommon.LoadingOverlay('body', false);
                    if(result.ok){
                        gaiaCommon.customAlert("{{ message('msg.044') }}", function(){ // 저장되었습니다.
                            if(popup.data.type){ //새창모드일 경우,
                                window.close();
                                window.opener.location.replace(replaceUrl);
                            }else{
                                location.replace(replaceUrl);
                            }
                        });
                    }
			    },
                function (error) {
                    console.error(error);
                    gaiaCommon.customAlert(error.responseJSON?.message);
                }
            );
		},

		// 유효성 검사
		validate(){
			let isValid = true;
			const addRegex = /^(?!\s)[^\/:*?"<>.|]+$/;

			$(".required").each(function () {
                const inputElement = $(this).closest(".row").find("input, select");
                if (!inputElement.val()) {
                    gaiaCommon.customAlert("{{ message('msg.008') }}"); // 필수 값이 누락되었습니다.
                    inputElement.focus();
                    isValid = false;
                    return false;
                }
            });


			if (!isValid) return false; // 필수 값 체크에서 실패한 경우 종료

			// 유효성 검사 대상 필드 리스트
            const fieldsToValidate = ['#rghtGrpNmKrn', '#rghtGrpNmEng', '#rghtGrpDscrpt'];

			// 각 필드에 이벤트 리스너 추가
            fieldsToValidate.forEach(selector => {
                const value = $(selector).val();

                // 값이 없는 경우 유효성 검사 패스
                if (!value || value === "") return;

                if (!addRegex.test(value)) {
                    gaiaCommon.customAlert("{{ message('msg.062') }}"); // 필수 값이 누락되었거나 잘못된 값이 포함되었습니다.
                    // $(selector).val(''); // 유효하지 않은 입력 제거
                    $(selector).focus();
                    isValid = false;
                    return false;
                }
            });

			return isValid;

		},

		close: function () {
			if(popup.data.type){ // 새창 모드인 경우,
				window.close();
			}else{
				location.replace(`/system/authority-group?pjtNo=${popup.data.pjtNo}&cntrctNo=${popup.data.cntrctNo}`);
			}
		},
	};

	$(function () {
		gaia.create({
			$init: function ($params) {
				popup.init();

            }
        });
	});
</script>


{% endblock footer_script %}
