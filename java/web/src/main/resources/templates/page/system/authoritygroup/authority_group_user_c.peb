<div class="modal open">
	<div class="pop_box _lg">
		<div class="pop_header">
			<h5 class="" id="grpUser_add_tit" style="margin: 0px;"></h5>
			<button type="button" class="icon_btn pop_close" onclick="popup.close()">
				<i class="ic ic-close"></i>
				<span class="blind">창닫기</span>
			</button>
		</div>
		<div class="pop_body">
			<div class="s_conts ty1">
				<span class="tree_route" id="selected_grp"></span>
				<section class="contents_wrap g-group g-col2 ty1" style="height: auto;">
					<div class="g-group g-row2" style="grid-template-rows: 1fr 1fr;">
						<!-- S: TREE View ------------------------------------------------------------------------ -->
						<article class="treeview_area g-group g-row2 ty1">
							<div class="treeview_wrap">
								<div class="treeview" id="jstree1">
									<!--트리 영역-->
								</div>
							</div>
						</article>
						<!-- // E: TREE View ------------------------------------------------------------------------ -->

						<div class="group has_opt">
							<h4 class="conts_s-tit">{{ message('item.authority.020') }}</h4>
							<dl class="box dl_box" style="overflow-y: scroll; max-height: 250px;">
								<dt>
									<div class="item_group jc_sb" role="group" aria-label="employee check group">
										<label class="form_check">
											<input class="check_mark" type="checkbox" name="checkbox" id="org_all_check">
											<span class="check_label" id="dept_nm">{{ message('item.authority.021') }}</span>
										</label>
										<label class="form_check">
											<input class="check_mark" type="checkbox" name="checkbox" id="downCheck" onchange="popup.jstree.downCheckChange();">
											<span class="check_label">{{ message('item.authority.022') }}</span>
										</label>
									</div>
								</dt>
								<dd>
									<div class="item_group vertical" role="group" aria-label="Vertical checkbox group">
										<!-- <label class="form_check">
											<input class="check_mark" type="checkbox" name="checkboxgroup">
											<span class="check_label">체크박스 세로형</span>
											<nav class="item_opt">
												<button type="button" class="icon_btn">
													<i class="ic ic-outgoing"></i>
													<span class="tooltip">이동추가</span>
												</button>
											</nav>
										</label> -->
									</div>
								</dd>
							</dl>
							<div class="opt_all_btn">
								<button type="button" class="icon_btn" onclick="popup.addCheckedItemsToGrid()">
									<i class="ic ic-add-subset"></i>
									<span class="tooltip">{{ message('btn.041') }}</span>
								</button>
							</div>
						</div>
					</div>

					<article class="conts g-row">
						<div class="group">
							<h3 class="conts_tit">{{ message('item.authority.023') }}</h3>

							<div class="conts_grid">
								<div class="toolbar">
									<div class="btn_area s_default">
										<button type="button" class="btn _outline" onclick="popup.grpUser.delete()">{{ message('btn.002') }}</button>
										<button type="button" class="btn _fill" onclick="popup.grpUser.save()">{{ message('btn.006') }}</button>
									</div>
								</div>
								<div class="grid" id="rght_grp_depts_grid"></div>
							</div>
						</div>
					</article>
				</section>
			</div>
		</div>
		<div class="pop_footer">
			<div class="btn_area jc_e">
				<button type="button" class="btn _outline" onclick="popup.close()">{{ message('btn.007') }}</button>
			</div>
		</div>
	</div>
</div>
<script>
  	var popup = {
		mode: "",
		data: {},
		init: function () {
			//

			if (opener) {
				page = opener.page;
			}

			popup.data = page.authorityGroup.data;
			popup.data.rghtGrp = page.authorityGroupUser.data;

			const rghtGrpTy = page.authorityGroupUser.data.selectedAuthorityGroup.rghtGrpTy;

			rghtGrpTy == "U" 
				? $("#grpUser_add_tit").text("{{ message('item.authority.013') }}") //그룹 사용자 추가 (사용자)
				: $("#grpUser_add_tit").text("{{ message('item.authority.024') }}");//그룹 사용자 추가 (역할)

			this.jstree.init();
			this.grpUser.gridInit();


			// TODO: 언어 정보에 따라 변경 필요.
			$("#selected_grp").text(page.authorityGroupUser.data.selectedAuthorityGroup.rghtGrpNm);

			// "org_all_check" 체크박스의 상태 변화 감지
			$("#org_all_check").change(function() {
				let isChecked = $(this).is(":checked");
				
				// 동적으로 생성된 모든 체크박스의 체크 상태를 "org_all_check"의 상태에 맞게 변경
				$(".item_group.vertical .check_mark").prop("checked", isChecked);
			});
			

		},

		// open: function () {
		//   window.open("/system/common-code-group-popup", "commonCodeGroupPopup", "width=500, height=500");
		// },

		close() {
			page.refresh(false, true); //

			page.popup.close();
			if (opener) {
				window.close();
			}
    	},

		// 체크된 요소들을 그리드에 추가하는 함수
		addCheckedItemsToGrid: function() {
			const checkedItems = [];

			// 체크된 체크박스들을 찾기
			$(".item_group.vertical .check_mark:checked").each(function() {
				const usrNm = $(this).siblings(".check_label").data("usr-nm");
				const deptNm = $(this).siblings(".check_label").data("dept-nm");
				const loginId = $(this).siblings(".check_label").data("login-id");
				const orgNo = $(this).siblings(".check_label").data("org-no");

				// 선택된 요소의 데이터를 객체로 저장
				const itemData = {
					usrNm: usrNm,
					deptNm: deptNm,
					loginId: loginId,
					orgNo: orgNo
				};

				// 배열에 저장
				checkedItems.push(itemData);
			});

			// 체크된 직원들이 없을 경우
			if(checkedItems.length <= 0){
                gaiaCommon.customAlert("{{ message('msg.rght.017')}}"); // 직원을 선택해주세요.
				return;
			}

			// 그리드에 체크된 항목들 추가
			for (const item of checkedItems) {
				if(item){
					// 중복 체크
					// 이미 그룹 사용자에 저장되어 있는 사용자인지 체크
					const existData = page.authorityGroupUser.data.existAuthUsers;
					if(existData.findIndex((existItem) => existItem.loginId === item.loginId) > -1){
                        gaiaCommon.customAlert("{{ message('msg.rght.001') }}"); //이미 권한이 존재합니다.
						continue;
					}

					if(popup.grpUser.data){
						popup.grpUser.data.forEach(item => {
							delete item.rowKey;
						});
					}

					//그리드에 이미 추가된 사용자인지 체크
					if (popup.grpUser.data.has(item.loginId)) {
                        gaiaCommon.customAlert("{{ message('msg.rght.002') }}"); // 이미 추가된 항목입니다.
						continue;
					}else{
						// Map의 값을 배열로 변환하여 그리드 데이터에 부서 추가
						popup.grpUser.data.set(item.loginId, item);
					}
				}
			};
			
			const newGrpUserData = Array.from(popup.grpUser.data.values());
			popup.grpUser.grid.resetData(newGrpUserData); // 그리드를 새로고침
			
		},

		grpUser: {
			data: new Map(),
			//그리드
			grid: null,
			gridInit: function() {
				this.grid = new tui.Grid({
					el: document.getElementById('rght_grp_depts_grid'),
					scrollX: false,
					scrollY: true,					
					useClientSort: false,
					bodyHeight: 350,
					contextMenu: null,
					rowHeaders: [
						{
							type: 'checkbox',
							header: `
								<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />
							`,
							width: 100,
							renderer: {
								type: window.IconRenderer,
								options:[
									{
										type:'checkBox'
									},
									{
										type:'trash',
										success:(rowData)=>{
											popup.grpUser.iconDel(rowData)
										}
									}
								]
							}
						}						
					],
					columns:[
						{ 
							header: "{{ message('item.dept.009') }}", // 부서
							name: 'deptNm',
							align: 'center',
						},
						{ 
							header: "{{ message('item.user.001') }}", // 계정
							name: 'loginId',
							align: 'center',
						},
						{ 
							header: "{{ message('item.user.003') }}", // 이름
							name: 'usrNm',
							align: 'center',
						},
						// { 
						// 	header: "{{ message('item.com.002') }}",
						// 	name: 'chgDt',
						// 	align: 'center'
						// },
					],
                });
			},


			// 그리드에 데이터를 추가하는 함수
			addToGrid: function (grpUser) {
				if(this.data){
					// 중복 체크
					// 이미 그룹 사용자에 저장되어 있는 사용자인지 체크
					const existData = page.authorityGroupUser.data.existAuthUsers;
					if(existData.findIndex((item) => item.loginId == grpUser.loginId) > -1){
                        gaiaCommon.customAlert("{{ message('msg.rght.001') }}"); //이미 권한이 존재합니다.
						return;
					}

					//그리드에 이미 추가된 사용자인지 체크
					if (this.data.has(grpUser.loginId)) {
                        gaiaCommon.customAlert("{{ message('msg.rght.002') }}"); // 이미 추가된 항목입니다.
						return;
					}else{
						// Map의 값을 배열로 변환하여 그리드 데이터에 부서 추가
						this.data.set(grpUser.loginId, grpUser);
						this.grid.resetData(Array.from(this.data.values())); // 그리드를 새로고침
					}
				}
			},

			save: function (){
				//필수 값 데이터 확인
				const selectedAuthGrpData = page.authorityGroupUser.data.selectedAuthorityGroup;
				const rghtGrpTy = selectedAuthGrpData.rghtGrpTy;
				const rghtGrpCd = selectedAuthGrpData.rghtGrpCd;
				const rghtGrpNo = selectedAuthGrpData.rghtGrpNo;

				if (rghtGrpCd && rghtGrpNo) {
					//그리드에서 체크된 권한 사용자만 저장.
					let authGrpUserListData = [];
					
					popup.grpUser.grid.getCheckedRows().forEach((item) => {
						let data = {
							authNo: item.orgNo,
							rghtGrpUsrTy: rghtGrpTy,
							rghtGrpCd: rghtGrpCd,
							rghtGrpNo: rghtGrpNo,
						};

						authGrpUserListData.push(data);
					})
					
					if(authGrpUserListData.length > 0){
						gaiaCommon.post("/api/system/authority-group/users/create", {authorityGroupUserList : authGrpUserListData},
                            function (result) {
                                if(result.ok){
                                    gaiaCommon.customAlert("{{ message('msg.044') }}"); // 저장되었습니다.
                                    popup.close();
                                }
						    },
                            function (error) {
                                console.error(error);
                                gaiaCommon.customAlert(error.responseJSON?.message);
                            }
                        );
					}else{
                        gaiaCommon.customAlert("{{ message('msg.rght.004') }}"); //추가할 사용자(역할)가 선택되지 않았습니다.
						return;
					}
				} else {
                    gaiaCommon.customAlert("{{ message('msg.rght.005') }}"); //권한그룹을 다시 선택해주세요.
					popup.close();
				}
			},

			iconDel: function(rowData) {
				const loginId = rowData.loginId;

				// 저장된 데이터에서 제거
				if (this.data.has(loginId)) {
					this.data.delete(loginId);

					// Map의 값을 배열로 변환하여 그리드에 반영
					this.grid.resetData(Array.from(this.data.values()));
				} else {
					console.error("해당 항목이 없습니다.");
				}
			},

			delete() {
				let loginIdList = [];
				const selectedAuthGrpData = page.authorityGroupUser.data.selectedAuthorityGroup;
				const rghtGrpTy = selectedAuthGrpData.rghtGrpTy;

                this.grid.getCheckedRows().forEach(function(v){
					loginIdList.push(v.loginId);
				});

				//그룹 구분에 따라 확인창 메시지 변경
				let confirmMsg = {};
				if(rghtGrpTy == "R"){
					confirmMsg.title = "{{ message('item.authority.025') }}";
					confirmMsg.msg = "{{ message('msg.rght.007') }}";
				}else{
					confirmMsg.title = "{{ message('item.authority.015') }}";
					confirmMsg.msg = "{{ message('msg.rght.007') }}";
				}

                if (loginIdList.length > 0) {
					//선택된 사용자를 제거하시겠습니까?
                    gaiaCommon.customConfirm(confirmMsg.title, confirmMsg.title, confirmMsg.msg, function(){
						
						loginIdList.forEach(function(loginId){
							popup.grpUser.data.delete(loginId);// 저장된 데이터에서 제거
						});
	
						// Map의 값을 배열로 변환하여 그리드에 반영
						popup.grpUser.grid.resetData(Array.from(popup.grpUser.data.values()));
					}); 
                } else {
                    gaiaCommon.customAlert("{{ message('msg.rght.009') }}"); //제거할 사용자(역할)를 선택해주세요.
                }
			}

		},
		jstree: {
			obj: null,
			data: {
				breadCrumb: "",
				upBreadCrumb: "",
				selectedDeptId: null
			},
			refresh: function (data) {
				if (data) {
					this.obj.jstree(true).settings.core.data = data;
				}
				this.obj.jstree(true).refresh();
			},
			getNode: function (id) {
				return this.obj.jstree("get_node", id);
			},
			setBreadcrumb: function (node, sep) {
				this.data.breadCrumb = this.getBreadcrumb(node, sep);
				this.data.upBreadCrumb = this.getBreadcrumb(this.obj.jstree("get_node", node.parent), sep);
			},
			getBreadcrumb(node, sep) {
				var breadCrumb = [];
				while (node) {
					breadCrumb.unshift(node.text);
					if (node.parent && node.parent != "#") {
						node = this.obj.jstree("get_node", node.parent);
					} else {
						node = "";
					}
				}
				return sep ? breadCrumb.join(" " + sep + " ") : breadCrumb.join(" > ");
			},
			
			addToGridFromCheckBox : function(button){
				
			},
			downCheckChange(){
				let isChecked = $("#downCheck").is(":checked");

				if (isChecked) {
					// 하위 부서 포함: 하위 부서 조직을 추가
					let deptId = this.data.selectedDeptId;
					//직원 리스트 폼 안에 해당 부서 직원리스트 조회
					gaiaCommon.get("/api/system/department/authority-users/org-list/down", {deptId : deptId},
                        function (result) {
                            if(result.ok){

                                const container = $(".item_group.vertical"); // 조직 체크박스를 추가할 부모 요소

                                const organizationList = result.details.organizationList;
                                // console.log("선택 부서 조직 데이터: ", result.details.organizationList);

                                // organizationList를 순회하여 동적으로 체크박스 요소 생성
                                organizationList.forEach(item => {
                                    const itemString = JSON.stringify(item); // 객체를 JSON 문자열로 변환
                                    // label 요소를 생성하여 동적 추가
                                    const label = $(`
                                        <label class="form_check sub_org">
                                            <input class="check_mark" type="checkbox" name="checkboxgroup">
                                            <span class="check_label">${item.usrNm}</span>
                                            <nav class="item_opt">
                                                <button type="button" class="icon_btn" onclick='popup.grpUser.addToGrid(`+ itemString +`);'>
                                                    <i class="ic ic-outgoing"></i>
                                                    <span class="tooltip">{{ message('btn.040') }}</span>
                                                </button>
                                            </nav>
                                        </label>
                                    `);

                                    // 추가적인 데이터를 data-* 속성으로 저장
                                    label.find(".check_label").attr({
                                        "data-usr-nm": item.usrNm,
                                        "data-dept-nm": item.deptNm,
                                        "data-login-id": item.loginId,
                                        "data-org-no": item.orgNo
                                    });

                                    // 완성된 label을 부모 컨테이너에 추가
                                    container.append(label);

                                });
                            }
					    },
                        function (error) {
                            console.error(error);
                            gaiaCommon.customAlert(error.responseJSON?.message);
                        }
                    );

					$("#org_all_check").prop("checked", false); //전체선택 해제.
				} else {
					// 하위 부서 미포함: 하위 부서 조직을 제거
					// sub_org 클래스를 가진 요소를 제거
					$(".sub_org").remove();
				}
			},
			init: function () {
				let url = "/api/system/department/authority-users/dept-list";
				let pjtData = page.authorityGroupUser.data;

				let param = {
					pjtNo: pjtData.pjtNo,
					cntrctNo: pjtData.cntrctNo,
					pjtType : pjtData.pjtType
				}
				popup.jstree.obj = $("#jstree1").jstree({
					plugins: ["search"],
					core: {
						data: function (obj, cb) {
							gaiaCommon.get(url, param, function (result) {
								var data = [];
								if (result.details?.departmentList) {
									result.details?.departmentList.forEach((item, index) => {
										let text = item.dept_nm;
										let maxLength = 15;  // 15자 이상이면 자름.
										let displayText = text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
										data.push({
											id: item.dept_id,
											parent: item.up_dept_id ? item.up_dept_id : "#",
											text: displayText,
											state: { opened: true },
											data: {item},
											icons: 'fa-solid fa-caret-right',
											li_attr: { 
												title: text
											},
										});
									});
									cb.call(obj, data);

								}
							});
						},
						check_callback: true,
						themes: {
							"theme" : "default",
							"dots": false,
							"responsive": false,
							"icons" : false
						}
					},
				});
				this.obj.on("select_node.jstree", function (e, data) {
					//하위부서 포함 체크박스 상태 초기화
					$("#downCheck").prop("checked", false);

					// 선택된 노드의 데이터를 가져옴
					let selectedDept = data.node.data.item;
					// console.log("선택 부서 데이터: ", selectedDept);

					let deptId = selectedDept.dept_id;
					popup.jstree.data.selectedDeptId = deptId;

					$("#dept_nm").text(selectedDept.dept_nm);

					//직원 리스트 폼 안에 해당 부서 직원리스트 조회
					gaiaCommon.get("/api/system/department/authority-users/org-list", {deptId : deptId},
                        function (result) {

                            const container = $(".item_group.vertical"); // 조직 체크박스를 추가할 부모 요소

                            // 기존에 있던 체크박스들을 비웁니다.
                            container.empty();

                            const organizationList = result.details.organizationList;
                            // console.log("선택 부서 조직 데이터: ", result.details.organizationList);

                            // organizationList를 순회하여 동적으로 체크박스 요소 생성
                            organizationList.forEach(item => {
                                const itemString = JSON.stringify(item); // 객체를 JSON 문자열로 변환
                                // label 요소를 생성하여 동적 추가
                                const label = $(`
                                    <label class="form_check">
                                        <input class="check_mark" type="checkbox" name="checkboxgroup">
                                        <span class="check_label">${item.usrNm}</span>
                                        <nav class="item_opt">
                                            <button type="button" class="icon_btn" onclick='popup.grpUser.addToGrid(`+ itemString +`);'>
                                                <i class="ic ic-outgoing"></i>
                                                <span class="tooltip">이동추가</span>
                                            </button>
                                        </nav>
                                    </label>
                                `);

                                // 추가적인 데이터를 data-* 속성으로 저장
                                label.find(".check_label").attr({
                                    "data-usr-nm": item.usrNm,
                                    "data-dept-nm": item.deptNm,
                                    "data-login-id": item.loginId,
                                    "data-org-no": item.orgNo
                                });

                                // 완성된 label을 부모 컨테이너에 추가
                                container.append(label);
                            });
					    },
                        function (error) {
                            console.error(error);
                            gaiaCommon.customAlert(error.responseJSON?.message);
                        }
                    );
				});
			},

		},

  	};

	// 그리드 커스텀 체크 박스
	if (typeof window.GrpUserColumnCheckbox === 'undefined') { //클래스가 이미 선언되어 있는지 확인
		class GrpUserColumnCheckbox {
			constructor(props) {
				const el = document.createElement("div");
				this.el = el;
				this.render(props);
			}

			getElement(props) {
				return this.el;
			}

			render(props) {
				let chk = "";
				if(Boolean(props.value)){
					chk = "checked";
				}

				this.el.innerHTML = `<div style="display: flex;align-items: center;justify-content: center;">
					<input class="checkGroup" style="margin:0 10px 0 0;" type="checkbox" `+chk+` name="chk" orgNo="`+props.grid.getRow(props.rowKey).orgNo+`">
					<i class='ic ic-delete' style="margin:0 10px 0 0;" onclick='popup.grpUser.iconDel(`+props.rowKey+`)'></i></div>`;
			}
		}

		window.GrpUserColumnCheckbox = GrpUserColumnCheckbox;
	}
	  
	
	$(function(){
		gaia.create({
			$init: function ($params) {
				popup.init();
                
                gaia.loaded = true;
            }
        });
    })    

</script>

<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>
