<section class="contents_wrap g-col2 ty1" id="mng_doc_page">
	<article class="treeview_area g-row2 ty1">
		<div class="treeview_search">
			<!-- searchbox -->
			<div class="searchbox_wrap">
				<input type="text" name="treeKeyword" placeholder="{{ message('msg.004') }}"
					onkeypress="if(event.keyCode == 13){page.tree.search();}">
				<button type="button" class="icon_btn search" onclick="page.tree.search()">
					<i class="ic ic-search"></i>
					<span class="blind">{{ message('item.com.014') }}</span>
				</button>
				<button type="button" class="btn _fill" id="create_construction_excel"
					onclick="page.construction.createExcelDoc()" style="display: none;">착공계 문서 만들기</button>
			</div>
		</div>
		<div class="treeview_area" style="width: 350px;">
			<div class="treeview ty_pd0" id="jstree"></div>
		</div>
	</article>
	<article class="conts_area">
		<div class="conts" style="height: 100%;">
			<div class="conts_grid">
				<span class="tree_route" id="breadcrumb-container" style="visibility:hidden;"></span>
				<!-- S: search wrap ---------------------------------------------- -->
				<div id="container" style="grid-template-rows: 0.2fr 1fr 1fr;"></div>
				<div class="search_wrap">
					<span class="selectbox">
						<select name="doc_search_select" id="doc_search_select">
							<!-- <option selected disabled value="">구분</option>
							<option value="">문서번호</option>
							<option value="">이름</option>
							<option value="">제목</option>
							<option value="">문서종류</option>
							<option value="">문서날짜</option>
							<option value="">수정자</option>
							<option value="">수정일자</option> -->
						</select>
					</span>
					<!-- searchbox -->
					<div class="searchbox_wrap">
						<input type="text" name="doc_search_text" id="doc_search_text"
							placeholder="{{ message('msg.004') }}"
							onkeypress="if(event.keyCode == 13){page.document.search();}">
						<button type="button" class="icon_btn search" onclick="page.document.search()">
							<i class="ic ic-search"></i>
							<span class="blind">검색</span>
						</button>
					</div>
				</div>
				<!-- // E: search wrap ---------------------------------------------- -->
				<div class="toolbar">
					<div class="btn_area s_default _outline docBtn" id="folderTypeBtn">
						<button type="button" class="btn" onclick="page.document.delete()" disabled>{{
							message("btn.002") }}</button>
						<button type="button" class="btn _fill" onclick="page.document.moveAddFolder()" disabled>{{
							message("btn.032") }}</button>
						<button type="button" class="btn" onclick="page.document.file.openUpload()" disabled>{{
							message("btn.033") }}</button>
						<button type="button" class="btn" onclick="page.document.file.download()" disabled>{{
							message("btn.034") }}</button>
						<button type="button" class="btn" onclick="page.document.moveDocCopy()" disabled> {{
							message("btn.035") }}</button>
						<button type="button" class="btn" onclick="page.document.moveDocMove()" disabled>{{
							message("btn.036") }}</button>
						<!-- <button type="button" class="btn _fill" onclick="page.construction.downloadAllZip()" id="construction_all_download">착공계 통합 문서 다운로드</button> -->
						<button type="button" class="btn _fill" onclick="page.construction.openAllDownloadPop()"
							id="construction_all_download">착공계 통합 문서 다운로드</button>
						<!-- <button type="button" class="btn" onclick="page.document.exportToExcel()" disabled hidden>{{ message("btn.023") }}</button> -->
					</div>

					<div class="btn_area s_default _outline docBtn" id="itemTypeBtn" style="display:none;">
						<button type="button" class="btn" onclick="page.document.delete()" disabled>{{
							message("btn.002") }}</button>
						<button type="button" class="btn _fill" onclick="page.item.moveAddItem()" disabled>{{
							message("btn.001") }}</button>
						<button type="button" class="btn" onclick="page.document.file.download()" disabled>{{
							message("btn.034") }}</button>
						<!-- <button type="button" class="btn" onclick="page.document.exportToExcel()" disabled hidden>{{ message("btn.023") }}</button> -->
					</div>

					<div class="etc_info" style="display:none;">
						<span class="folder_doc" style="display:none;">
							<i class="ic ic-folder-close"></i>
							<span class="blind">폴더갯수</span>
							<b class="num" id="folder_cnt">0</b>
						</span>
						<span class="folder_doc" style="display:none;">
							<i class="ic ic-note"></i>
							<span class="blind">파일갯수</span>
							<b class="num" id="file_cnt">0</b>
						</span>
						<span class="item_doc" style="display:none;">
							<i class="ic ic-note"></i>
							<span class="blind">아이템갯수</span>
							<b class="num" id="item_cnt">0</b>
						</span>
					</div>

					<div class="selectbox sort">
						<select name="doc_per_page" id="doc_per_page" class="" onchange="page.document.setPerPage()">
							<option selected disabled value="">{{ message('item.com.004') }}</option>
							<option value="10">10</option>
							<option value="20">20</option>
							<option value="30">30</option>
							<option value="50">50</option>
						</select>
					</div>
				</div>
				<div class="grid" id="document_grid"></div>
				<div id="file-upload-actions">
					<input type="file" id="fileInput" multiple style="display: none;"
						onchange="page.document.file.upload()">
				</div>
			</div>
		</div>
	</article>
</section>
<section id="trash_doc_page" style="display: none;">
	<article class="conts_area">
		<div class="conts" style="height: 100%;">
			<div class="conts_grid">
				<!-- S: search wrap ---------------------------------------------- -->
				<div id="container" style="grid-template-rows: 0.2fr 1fr 1fr;"></div>
				<div class="search_wrap">
					<span class="selectbox">
						<select name="trash_doc_search_select" id="trash_doc_search_select">
							<option selected disabled value="">{{ message("item.com.083") }}</option>
							<option value="trash_doc_nm">{{ message("item.doc.051") }}</option> <!-- 문서명-->
							<option value="trash_usr_id">{{ message("item.doc.052") }}</option> <!-- 삭제자-->
						</select>
					</span>
					<!-- searchbox -->
					<div class="searchbox_wrap">
						<input type="text" name="trash_doc_search_text" id="trash_doc_search_text"
							placeholder="{{ message('msg.004') }}">
						<button type="button" class="icon_btn search" onclick="page.trash.trashDocSearch()">
							<i class="ic ic-search"></i>
							<span class="blind">검색</span>
						</button>
					</div>
				</div>
				<div class="btn_area s_default _outline" id="trash_type_btn">
					<button type="button" class="btn" onclick="page.trash.recoveryDoc()">{{ message("item.doc.053")
						}}</button> <!-- 복원-->
					<button type="button" class="btn" onclick="page.trash.removeTrashDoc()">{{ message("item.doc.054")
						}}</button> <!-- 영구삭제-->
					<button type="button" class="btn" onclick="page.trash.removeAllTrash()">{{ message("item.doc.055")
						}}</button> <!-- 휴지통 비우기-->
				</div>
				<div class="grid" id="trash_document_grid"></div>
			</div>
		</div>
	</article>
</section>
<section>{% include "page/document/common/common_document_modal_popup" %}</section>
<script>
	const addRegex = /^(?!\s)[^\/:*?"<>.|]+$/;
	let navigationPopup;
	let propertyPopup;

	document.onkeydown = fkey;
	document.onkeypress = fkey;
	document.onkeyup = fkey;

	// f5 새로고침 누를떄 열려있는 팝업 창 닫기
	function fkey(e) {
		if (window.event.keyCode == 116) {
			if (navigationPopup) navigationPopup.close();
			if (propertyPopup) propertyPopup.close();
		}
	};

	var page = {
		setAuthMode: null, //권한 설정 모드(navi / doc)
		upDocId: "",
		selectedPjtData: {},

		//초기화 함수 화면 시작 함수
		init(documentType, menuId) {
			// 휴지통 페이지 생성.
			page.setPageHeaderAddTrash();

			let pjtData = JSON.parse(localStorage.getItem("pageCommonData"));
			this.selectedPjtData = pjtData;
			this.tree.data.selectCntrctNo = pjtData.cntrctNo;

			// URL에서 파라미터 가져오기
			const urlParams = this.getUrlParameters();
			const param = this.buildParamObject(urlParams, pjtData, documentType, menuId);

			// 데이터 설정
			this.setPageData(param, documentType, menuId);

			// // 쿼리스트링 제거하고 새로고침
			// if (urlParams.toString()) {
			// 	// 쿼리스트링이 있으면 제거하고 새로고침
			//     const newUrl = window.location.origin + window.location.pathname;
			//     window.history.replaceState({}, document.title, newUrl);
			// }

			if (urlParams.pjtNo && urlParams.cntrctNo) {
				this.checkedLoginInfo(urlParams.pjtNo, urlParams.cntrctNo);
			}
			
			this.tree.init(urlParams.naviId, documentType);

			// 팝업 이벤트 초기화
			this.popup.clickEventListener();

			//파일 업로드 drag & drop 이벤트 초기화
			this.document.file.setUploadEventListener();

		},

		// URL 파라미터 값 가져오기
		getUrlParameters() {
			const urlParams = new URLSearchParams(window.location.search);
			return {
				naviId: urlParams.get('navi_id'),
				docId: urlParams.get('docId'),
				upDocId: urlParams.get('up_doc_id'),
				docNm: urlParams.get('docNm'),
				cntrctNo: urlParams.get('cntrctNo'),
				pjtNo: urlParams.get('pjtNo')
			};
		},

		// 파라미터 객체 생성
		buildParamObject(urlParams, pjtData, documentType, menuId) {
			return {
				docId: urlParams.docId || null,
				upDocId: urlParams.upDocId || null,
				docNm: urlParams.docNm || null,
				naviId: urlParams.naviId || null,
				documentType: documentType,
				menuId: menuId,
				cntrctNo: urlParams.cntrctNo || pjtData?.cntrctNo || null
			};
		},

		// 페이지 데이터 설정
		setPageData(param, documentType, menuId) {
			page.upDocId = param.upDocId;					// 상위 문서 id 정보 설정
			page.document.searchData.docNm = param.docNm;	// 문서명 검색 데이터 설정

			page.tree.data.documentType = documentType;		// 트리 정보데이터 설정
			page.tree.data.menuId = menuId;
			page.tree.data.treeParam = param;
		},

		// url 복사로 들어온 경우, 유효성 체크
		checkedLoginInfo(pjtNo, cntrctNo) {
			const serviceNm = $("body").attr('class'); 		// Gaia or Cmis

			// ADMIN인 경우, 반환
			if (gaiaCommon.me.isAdmin()) {
				if (isGAIA() && pjtNo !== cntrctNo) {
					gaiaPortal.customAlert('{{ message("msg.doc.002") }}', function () { // 해당 서비스에서 이동할 수 없는 URL입니다.
						location.replace("/");
						return;
					});

				}
				return;

			}
		},

		// 헤더에 휴지통 아이콘 생성 함수
		setPageHeaderAddTrash() {
			// 기존의 page_header 요소 선택
			const pageHeader = document.querySelector('#pageNav');
			const breadCrumbNavi = document.querySelector('.breadcrumb_nav');

			// 기존의 #menuName 요소 삭제
			const existingMenuName = document.querySelector('#menuName');
			const MenuName = existingMenuName.textContent;
			if (existingMenuName) {
				existingMenuName.remove();
			}

			// flex 컨테이너 생성
			const flexContainer = document.createElement('div');
			flexContainer.style.display = 'flex';

			// h2 요소 생성
			const pageTitle = document.createElement('h2');
			pageTitle.className = 'page_tit';
			pageTitle.id = 'menuName';
			// pageTitle.textContent = '{{ message("item.doc.056") }}'; // 통합문서관리
			pageTitle.textContent = MenuName; // 메뉴 위치에 따라 변경
			pageTitle.style.cursor = 'pointer';

			// 아이콘 요소 생성
			const deleteIcon = document.createElement('i');
			deleteIcon.className = 'ic ic-delete page_tit';
			deleteIcon.id = 'trash_doc_icon';
			deleteIcon.style.marginLeft = '30px';
			deleteIcon.style.borderBottom = '0px';
			deleteIcon.style.cursor = 'pointer';

			// flex 컨테이너에 h2와 아이콘 추가
			flexContainer.appendChild(pageTitle);
			flexContainer.appendChild(deleteIcon);

			// pageHeader에 flex 컨테이너 추가
			pageHeader.insertBefore(flexContainer, breadCrumbNavi);


			// 이벤트 리스너 추가
			deleteIcon.addEventListener('click', () => {
				deleteIcon.style.removeProperty('border-bottom');
				pageTitle.style.borderBottom = '0px';
				this.trash.init();
			});

			pageTitle.addEventListener('click', () => {
				pageTitle.style.removeProperty('border-bottom');
				deleteIcon.style.borderBottom = '0px';
				this.trash.close();
			});
		},

		/* 휴지통 페이지 설정 */
		trash: {
			selectedCntrctNo: null,

			init() {
				$("#trash_doc_page").show();
				$("#mng_doc_page").hide();
				this.selectedCntrctNo = page.tree.data.selectCntrctNo;
				this.gridInit();
			},

			close() {
				$("#trash_doc_page").hide();
				$("#mng_doc_page").show();

				this.trashSearchClear();

				page.refresh(true, true);
			},

			grid: null,
			gridInit: function () {
				if (this.grid) { // 이미 그리드가 있으면 제거하고 새로 생성.
					this.grid.destroy();
					this.grid = null;
				}

				if (!this.grid) {
					this.grid = new tui.Grid({
						el: document.getElementById('trash_document_grid'),
						scrollX: true,
						scrollY: true,
						useClientSort: false,
						bodyHeight: window.innerHeight - 265,
						minBodyHeight: 40, // 최소 높이 : row 1개
						width: 'auto',
						contextMenu: null,
						rowHeaders: [
							{
								type: 'checkbox',
							},

						],
						columns: [
							{
								header: '{{ message("item.doc.057") }}', //문서 경로
								name: 'trash_doc_path',
								align: 'left',
								resizable: true,
								width: 600,
								formatter: ({ value }) => {
									// 문서 경로 Tooltip 처리.
									return `<div class="tooltip-cell" title="${value}" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${value}</div>`;
								}
							},
							{
								header: '{{ message("item.doc.032") }}', //문서명
								name: 'trash_doc_nm',
								align: 'left',
								resizable: true,
								width: 450,
							},
							{
								header: '{{ message("item.doc.058") }}', //크기
								name: 'trash_doc_size',
								align: 'center',
								formatter({ value }) {
									if (!value || isNaN(value)) return '0 MB'; 	// 값이 없거나 숫자가 아니면 기본값 반환

									const sizeInMB = value / (1024 * 1024); 	// bytes -> MB
									// return `${sizeInMB.toFixed(2)} MB`; 		// 소수점 2자리
									return page.item.fileUpload.formatFileSize(value); 		// 소수점 2자리
								},
								width: 150
								// resizable: true,
							},
							{
								header: '{{ message("item.doc.052") }}', //삭제자
								name: 'trash_usr_id',
								align: 'center',
								width: 150,
								// resizable: true,
							},
							{
								header: '{{ message("item.doc.069") }}', //삭제일시
								name: 'trash_dt',
								align: 'center',
								minWidth: 150
							},

						],
					});
				}
				this.setTrashDocList();
			},

			//휴지통 문서 리스트 조회
			setTrashDocList() {
				const cntrctNo = this.selectedCntrctNo;
				const documentType = page.tree.data.documentType; // 문서 타입 (01, 02 ...)

				if (!cntrctNo) {
					gaiaPortal.customAlert('{{ message("msg.doc.003") }}'); // 계약 정보가 존재하지 않습니다.
					return;
				}

				const requestData = {
					cntrctNo: cntrctNo,
					documentType: documentType
				}

				gaiaCommon.get("/api/document/trash/list", requestData, function (result) {
					if (result.details?.trashDocList) {
						page.trash.docList = result.details?.trashDocList;

						page.trash.grid.resetData(page.trash.docList);
					} else {
						gaiaPortal.customAlert(result.message);
					}
				});

			},

			//휴지통 문서 검색
			trashDocSearch() {
				const cntrctNo = this.selectedCntrctNo;
				const documentType = page.tree.data.documentType; // 문서 타입 (01, 02 ...)

				let columnNm = $('select[name="trash_doc_search_select"]').val();
				let searchText = $('input[name="trash_doc_search_text"]').val().trim();

				//구분이 없을 경우
				if (!columnNm) {
					gaiaPortal.customAlert('{{ message("msg.003") }}'); // 구분을 선택해주세요.
					this.trashSearchClear();
					return;
				}

				const requestData = {
					cntrctNo: cntrctNo,
					documentType: documentType,
					columnNm: columnNm,
					searchText: searchText
				}

				gaiaCommon.get("/api/document/trash/list", requestData, function (result) {
					if (result.details?.trashDocList) {
						page.trash.docList = result.details?.trashDocList;

						page.trash.grid.resetData(page.trash.docList);
					} else {
						gaiaPortal.customAlert(result.message);
					}
				});

			},

			// 휴지통 버튼 > 휴지통 문서 복원
			recoveryDoc() {
				let recoveredDocs = this.grid.getCheckedRows();

				if (recoveredDocs.length <= 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.004") }}'); // 복원할 문서를 선택해주세요.
					return;
				}

				let trashDocIdList = recoveredDocs.map(doc => { return doc.trash_doc_id });

				gaiaPortal.customConfirm('{{ message("item.com.084") }}', '{{ message("item.doc.059") }}', '{{ message("msg.doc.005") }}', function () { // 문서를 복원하시겠습니까?
					//서버 전송
					gaiaCommon.post("/api/document/trash/recover", { trashDocIdList }, function (result) {
						if (result.ok) {
							gaiaPortal.customAlert('{{ message("msg.doc.006") }}'); // 문서가 복원되었습니다.
							page.trash.setTrashDocList();
						}
					});
				});

			},

			// 휴지통 버튼 > 휴지통 문서 영구 삭제
			removeTrashDoc() {
				let removedDocs = this.grid.getCheckedRows();

				if (removedDocs.length <= 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.007") }}'); // 영구 삭제할 문서를 선택해주세요.
					return;
				}

				const hasFolder = removedDocs.some(doc => doc.trash_doc_type === 'FOLDR');
				let removeMsg = hasFolder ? '{{ message("msg.doc.008") }}' // 폴더의 경우 하위 문서까지 삭제됩니다. 정말 문서를 삭제하시겠습니까?
					: '{{ message("msg.doc.009") }}'; // 정말 문서를 삭제하시겠습니까?

				let trashDocIdList = removedDocs.map(doc => { return doc.trash_doc_id });

				gaiaPortal.customConfirm('{{ message("item.com.084") }}', '{{ message("item.doc.060") }}', removeMsg, function () {
					//서버 전송
					gaiaCommon.post("/api/document/trash/remove", { trashDocIdList }, function (result) {
						if (result.ok) {
							gaiaPortal.customAlert('{{ message("msg.doc.010") }}'); // 문서가 삭제되었습니다.
							page.trash.setTrashDocList();
						}
					});
				});
			},

			// 휴지통 버튼 > 휴지통 비우기
			removeAllTrash() {
				const trashDocIdList = this.grid.getData().map(doc => { return doc.trash_doc_id });

				if (trashDocIdList.length <= 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.011") }}'); // 휴지통에 문서가 존재하지 않습니다.
					return;
				}


				gaiaPortal.customConfirm('{{ message("item.com.084") }}', '{{ message("item.doc.055") }}', '{{ message("msg.doc.012") }}', function () { // 정말 휴지통을 비우시겠습니까?
					//서버 전송
					gaiaCommon.post("/api/document/trash/remove-all", { trashDocIdList }, function (result) {
						if (result.ok) {
							gaiaPortal.customAlert('{{ message("msg.doc.013") }}'); // 처리가 완료되었습니다.
							page.trash.setTrashDocList();
						}
					});
				});
			},

			//휴지통 검색 초기화
			trashSearchClear() {
				$('input[name="trash_doc_search_text"]').val("");
				$('select[name="trash_doc_search_select"]').val("");
			}
		},
		/* 팝업 공통 설정 */
		popup: {
			mode: null,
			//모달팝업 & 팝업 닫기
			closePopup(popup_type) {
				if (popup_type === 'addFolder') {
					$('#insertFolder').removeClass('open');
				} else if (popup_type === 'addNavi') {
					$('#insertNavi').removeClass('open');
				} else if (popup_type === 'updateNavi') {
					$('#updateNavi').removeClass('open');
				} else if (popup_type === 'authority') {
					$('#authority').removeClass('open');
					if (navigationPopup) {
						navigationPopup.close();
					}
				} else if (popup_type === 'addItem') {
					page.item.fileUpload.removeAllFiles(); 		// 첨부파일 목록 초기화
					$("#insertItem").removeClass('open');
				} else if (popup_type === 'updateDocNm') {
					page.document.data.selected = {}; 			// 선택된 문서 정보 초기화
					$("#updateDocName").removeClass('open');
				} else if (popup_type === 'updateProperty') {
					$("#updateProperty").removeClass('open');
				} else if (popup_type === 'fileInfo') {
					$("#docFileInfo").removeClass('open');
				} else if (popup_type === 'docMoveCopy') {
					page.document.fullTree = null;
					$("#chg_doc_path").val(""); 				// 변경할 경로 값 초기화
					$("#docMoveCopy").removeClass('open');
				}
			},
			//중복체크 여부 값 변경 모음
			changeValid(checkValidType) {
				if (checkValidType === 'folderNm') {
					$('#folderNmValid').val('N');
				} else if (checkValidType === 'addNaviNm') {
					$('#addNaviNmValid').val('N');
				} else if (checkValidType === 'updateNaviNm') {
					$('#updateNaviNmValid').val('N');
				} else if (checkValidType === 'reDocNm') {
					$('#docNmValid').val('N');
				}
			},
			// 체크박스 all 체크 설정
			allCheckSet() {
				let checked = $('#authorityAllCheckbox').is(':checked');

				document.querySelectorAll("#list-grid tbody .check_mark").forEach((checkbox) => {
					checkbox.checked = checked;
				});
			},

			clickEventListener() {
				//권한 저장 - (page: 네비, 문서 contextmenu - 권한 설정)
				$("#setAuthority").on("click", function () {
					page.setAuthority();
				});
			},
			// 셀렉트박스 호출 - (page: 네비게이션 추가)
			makeSelectBox: function (cmnGrpCd, selectBoxId, elementId, ckeckedValue) {
				let initText = '{{ message("item.doc.061") }}'; // 경로 종류

				let requestData = {
					cmnGrpCd: cmnGrpCd,
					selectBoxId: selectBoxId,
					selectBoxNmType: "KOR", //TODO: 영어일 때 항목 가져오는 거 필요.
					ckeckedValue: ckeckedValue,
					orderByCol: "",
					orderByType: "",
					initText: initText,
					paramNm: selectBoxId,
					funName: "",
					funParam: "this.value",
					funtype: "onchange",
				};

				gaiaCommon.post("/api/util/make-selectBox",[requestData],(data)=>{
					let returnMap = data.details.returnMap;
					let addAppLineContent = document.getElementById(elementId);
					addAppLineContent.innerHTML = returnMap[selectBoxId];
				}, (xhr, status, error) => {
					console.error("Error making select box:", status, error);
				})
			},
			initializeSelectBoxes(ckeckedValue) {
				this.makeSelectBox(
					"3f1ba4da-2891-4c79-96ab-3841af728710",
					"addNaviType",
					"addNaviType_box",
					ckeckedValue
				);
			},
		},

		refresh(nav, grid) {
			if (nav) {
				this.tree.refresh();
			}

			if (grid) {
				this.document.grid.reloadData();
			}
		},

		// 검색 정보 초기화
		searchClear(nav, grid) {
			if (nav) {
				$('input[name="treeKeyword"]').val("");
			}

			if (grid) {
				$('input[name="doc_search_text"]').val("");
				$('select[name="doc_search_select"]').val("");

				page.document.searchData.isSearch = false;

				// searchData가 존재하고 값이 있으면 초기화
				if (page.document.searchData) {
					if (page.document.searchData.columnNm || page.document.searchData.searchText) {
						page.document.searchData.columnNm = null;
						page.document.searchData.searchText = null;
					}
				}

				// requestData가 존재하고 값이 있으면 초기화
				if (page.document.requestData) {
					if (page.document.requestData.columnNm || page.document.requestData.searchText) {
						delete page.document.requestData.columnNm;
						delete page.document.requestData.searchText;
					}
				}

			}
		},

		// perPage 정보 초기화
		perPageClear() {
			$('select[name="doc_per_page"]').val("");
		},

		//권한설정 기능 분기 - (문서 or 네비게이션)
		setAuthority() {
			const validModes = ["navi", "doc"];
			let authMode = null;

			if (validModes.includes(page.setAuthMode)) {
				authMode = page.setAuthMode;
			} else {
				console.warn("Invalid mode:", page.setAuthMode);  // 정확한 변수명 표시
				gaiaPortal.customAlert('{{ message("msg.doc.014") }}'); // 올바른 권한 모드를 선택해주세요.
				return;
			}

			if (authMode === "navi") {
				page.navigation.setTreeAuthority();
			} else if (authMode === "doc") {
				page.document.setDocAuthority();
			}
		},
		/* JSTree 설정 */
		tree: {
			obj: null,
			data: {
				breadCrumb: "",
				upBreadCrumb: "",
				initCount: 0,
				documentType: null,
				menuId: null,
				selectCntrctNo: null,
				treeParam: null,
			},
			search() {
				const keyword = $('input[name="treeKeyword"]').val();
				$("#jstree").jstree("search", keyword);
			},
			applyTreeStylesAndActions: function () {
				// 모든 jstree-anchor 요소를 순회하며 nav 요소를 추가
				$(".jstree-anchor:not(#M_anchor)").each(function () {
					// 이미 nav 요소가 존재하는지 확인하여 중복 추가를 방지
					if ($(this).next("nav.item_opt").length === 0) {
						let iconEl = `<nav class="item_opt">
										<button type="button" class="icon_btn" onclick="page.navigation.moveUpDownNavi('up')">
											<i class="ic ic-arrow2 "></i>
											<span class="tooltip">{{ message('item.menu.021') }}</span>
										</button>
										<button type="button" class="icon_btn" onclick="page.navigation.moveUpDownNavi('down')">
											<i class="ic ic-arrow2 down"></i>
											<span class="tooltip">{{ message('item.menu.022') }}</span>
										</button>
									</nav>`;
						// jstree-anchor 요소 바로 다음에 nav 요소를 삽입
						$(this).after(iconEl);
					}
				});
			},
			addClassToNodeAndParents: function (node) {
				const rghtTyList = ['A', 'D', 'C'];	// 문서 경로 이동이 가능한 권한리스트

				$(".jstree-anchor").removeClass("current"); //이전에 선택된 노드에 current 삭제

				//최상위 노드이거나 문서경로이동 권한이 없으면 이동 아이콘 생성 X
				if (node.parent === "#" || !rghtTyList.includes(node.original.userType)) {
					return;
				}

				// 현재 노드에 a 태그 클래스 추가
				$("#" + node.id + "_anchor").addClass("current");

				// 부모 노드를 순차적으로 찾아가면서 a 태그 클래스 추가
				while (node.parent && node.parent !== "#") {
					node = page.tree.getNode(node.parent);
					$("#" + node.id + "_anchor").addClass("current");
				}
			},
			init(naviId, documentType) {
				this.obj = $("#jstree").jstree({
					plugins: ["search", "contextmenu"],
					search: {
						"show_only_matches": true,
						"show_only_matches_children": true,
					},
					contextmenu: {
						items: ($node) => this.getContextMenuItems($node),
					},
					core: {
						data(obj, cb) {
							gaiaCommon.post("/api/document/navigation/list", page.tree.data.treeParam, function (result) {
								var data = [];

								// 통합문서관리 페이지에 접근할 메뉴 권한이 없을 경우
								if (result.details?.naviAuthority.length <= 0) {
									gaiaPortal.customAlert('{{ message("msg.doc.015") }}', function () { // 권한이 존재하지 않아 접근할 수 없습니다.
										location.replace("/"); //메인 페이지로 이동
									});
									return;
								}

								if (result.details?.navigationList.length > 0) {
									result.details?.navigationList.forEach((item, index) => {
										let text = item.naviNm;
										let maxLength1 = 25;  // depth 1
										let maxLength2 = 23;  // depth 2
										let maxLength3 = 14;  // depth 3

										let displayText;

										if (text.length > maxLength1 && item.naviLevel === 1) {
											displayText = text.substring(0, maxLength1) + "..." || text;
										} else if (text.length > maxLength2 && item.naviLevel === 2) {
											displayText = text.substring(0, maxLength2) + "..." || text;
										} else if (text.length > maxLength2 && item.naviLevel === 3) {
											displayText = text.substring(0, maxLength3) + "..." || text;
										} else {
											displayText = text;
										}

										data.push({
											id: item.naviId,
											parent: item.upNaviId,
											text: displayText,
											state: { opened: true },
											userType: result.details?.naviAuthority[0].rght_kind,
											data: item,
											icons: 'fa-solid fa-caret-right',
											li_attr: {
												title: text
											}
										});
									});
									cb.call(obj, data);
								}
								// else{
								// 	gaiaPortal.customAlert("문서경로가 존재하지 않습니다.");
								// }

								if (page.tree.data.initCount === 0) {
									page.tree.data.initCount = 1; // 생성 초기 값 증가.

									// ADMIN이 CAIROS 접속 시 생성
									if (isCAIROS() && gaiaCommon.me.isAdmin()) {
										if (documentType !== "04") {
											// 계약 번호가 존재할 경우 생성							
											if (result.details?.contractList.length > 0) {
												$("#container").prepend(`	<div class='group'>
																					<h3 class='conts_tit'>{{ message('item.com.018') }}</h3>
																					<div class='conts_form'>
																						<span class='selectbox'><select id='cntrctNo'></select></span>
																					</div>
																				</div>` );
												// 기존 옵션 제거
												$("#cntrctNo").empty();

												// 첫 번째 옵션 추가(계약 선택 전 -> GAIA 프로젝트 권한 출력)
												$("#cntrctNo").append(`<option value='${page.selectedPjtData.pjtNo}'>{{ message('msg.mauth.001') }}</option>`); //계약 코드를 선택해주세요.

												result.details?.contractList.forEach((item, index) => {
													var option = `<option value='${item.cntrct_no}'>${item.cntrct_nm} [${item.cmn_cd_nm_krn}]</option>`;
													$('#cntrctNo').append(option);

													// 선택된 계약번호가 존재할 경우 (문서 URL 복사로 페이지 이동된 경우)
													if (page.tree.data.selectCntrctNo) {
														// 계약 콤보박스 선택 상태 변경.
														let cntrctNo = page.tree.data.selectCntrctNo;
														$('#cntrctNo').find(`option[value="${cntrctNo}"]`).attr("selected", true);
													}
												});

												// 계약 콤보박스 이벤트리스너
												$("#cntrctNo").off("change").on("change", function (e) {
													if (page.tree.data.selectCntrctNo !== e.target.value) {
														//바뀐 계약 정보로 재설정.
														page.tree.data.selectCntrctNo = e.target.value; //선택 계약번호 설정

														//선택한 프로젝트 정보의 계약 정보도 변경.
														page.selectedPjtData.cntrctNo = e.target.value;
														page.selectedPjtData.cntrct_nm = e.target.options[e.target.options.selectedIndex].text.replace(/\[.*?\]/g, "").trim(); // 선택된 데이터의 텍스트값 가져오기
														let reParam = {
															documentType: page.tree.data.documentType,
															menuId: page.tree.data.menuId,
															cntrctNo: e.target.value
														};

														page.tree.data.treeParam = reParam;

														//기존 데이터 초기화
														page.tree.refresh(); 									// 트리 초기화
														page.document.gridInit(); 								// grid 초기화
														$("#breadcrumb-container").css("visibility", "hidden"); // 브레드 크럼 숨김
														page.searchClear(true, true); 							// 검색 정보 초기화
														page.perPageClear();									// perPage 초기화

														// 루트 노드 자동 선택
														page.tree.obj.off("refresh.jstree").on("refresh.jstree", function () {
															const rootNode = $("#jstree").jstree(true).get_node("#");

															if (rootNode && rootNode.children.length > 0) {
																const firstChildId = rootNode.children[0]; 		// 루트의 첫 번째 자식
																page.tree.selectNode(firstChildId);
															}
														});
													}

												});
											}
										}
										// 착공계 문서관리인 경우
										else {
											// 계약 리스트 중 첫번째 계약을 선택상태로 설정.
											// 계약 번호가 존재할 경우 생성							
											if (result.details?.contractList.length > 0) {

												$("#container").prepend(`	
														<div class='group'>
															<h3 class='conts_tit'>{{ message('item.com.018') }}</h3>
															<div class='conts_form'>
																<span class='selectbox'><select id='cntrctNo'></select></span>
															</div>
														</div>`
												);

												// 기존 옵션 제거
												$("#cntrctNo").empty();

												result.details?.contractList.forEach((item, index) => {
													var option = `<option value='${item.cntrct_no}'>${item.cntrct_nm} [${item.cmn_cd_nm_krn}]</option>`;
													$('#cntrctNo').append(option);

													// 선택된 계약번호가 존재할 경우 (문서 URL 복사로 페이지 이동된 경우)
													if (page.tree.data.selectCntrctNo) {
														// 계약 콤보박스 선택 상태 변경.
														let cntrctNo = page.tree.data.selectCntrctNo;
														$('#cntrctNo').find(`option[value="${cntrctNo}"]`).attr("selected", true);
													}
												});

												// 첫 번째 계약이 존재하고 계약 선택이 안되어 있을 경우, 자동으로 선택되도록 설정
												const pjtNo = page.selectedPjtData.pjtNo;
												const cntrctNo = page.tree.data.selectCntrctNo;
												if (result.details?.contractList.length > 0 && (pjtNo === cntrctNo)) {
													let firstContractNo = result.details.contractList[0].cntrct_no;
													$('#cntrctNo').val(firstContractNo); // 첫 번째 계약 선택
													page.tree.data.selectCntrctNo = firstContractNo; // 선택 계약번호 설정
												}

												// 계약 콤보박스 이벤트리스너
												$("#cntrctNo").off("change").on("change", function (e) {
													// 바뀐 계약 정보로 재설정.
													page.tree.data.selectCntrctNo = e.target.value; // 선택 계약번호 설정

													// 선택한 프로젝트 정보의 계약 정보도 변경.
													page.selectedPjtData.cntrctNo = e.target.value;
													page.selectedPjtData.cntrct_nm = e.target.options[e.target.options.selectedIndex].text.replace(/\[.*?\]/g, "").trim(); // 선택된 데이터의 텍스트값 가져오기
													let reParam = {
														documentType: page.tree.data.documentType,
														menuId: page.tree.data.menuId,
														cntrctNo: e.target.value
													};

													page.tree.data.treeParam = reParam;

													// 기존 데이터 초기화
													page.tree.refresh(); 									// 트리 초기화
													page.document.gridInit(); 								// grid 초기화
													$("#breadcrumb-container").css("visibility", "hidden"); // 브레드 크럼 숨김
													page.searchClear(true, true); 							// 검색 정보 초기화
													page.perPageClear();									// perPage 초기화

													// 루트 노드 자동 선택
													page.tree.obj.off("refresh.jstree").on("refresh.jstree", function () {
														const rootNode = $("#jstree").jstree(true).get_node("#");

														if (rootNode && rootNode.children.length > 0) {
															const firstChildId = rootNode.children[0]; // 루트의 첫 번째 자식
															page.tree.selectNode(firstChildId);
														}
													});
												});

												// 변경 이벤트 즉시 실행.
												$("#cntrctNo").trigger("change");
											}
										}

									}
								}
							});
						},
						check_callback: true, // 요거이 없으면, create_node 안먹음
						themes: {
							"theme": "default",
							"dots": false,
							"responsive": false,
							"icons": false
						}
					},
				});
				/*네비게이션 바 클릭 이벤트 처리*/
				this.obj.on("select_node.jstree", function (e, data) {
					page.tree.setBreadcrumb(data.node); // 브레드크럼 설정

					//최상위 노드(프로젝트/계약)인 경우 버튼 숨김.
					if (data.node.parent === "#") {
						$("#folderTypeBtn").children().css('display', 'none');
						$("#itemTypeBtn").children().css('display', 'none');

						//착공계 문서관리의 경우
						if (data.node.data.naviDiv === "04") {
							$("#folderTypeBtn").children()[6].style.display = 'flex';	// 착공계 문서 통합 다운로드
							$("#create_construction_excel").css('display', 'flex');	// 착공계 문서 만들기
						}
					}
					//최상위 노드가 아닌 경우
					else {
						//문서 경로 (폴더형)
						if (data.node.data.naviType === 'FOLDR') {
							$("#folderTypeBtn").css('display', 'flex');
							$("#folderTypeBtn button").prop('disabled', false);
							$("#itemTypeBtn").css('display', 'none');
							$("#itemTypeBtn button").prop('disabled', true);

							$("#folderTypeBtn").children()[0].style.display = 'flex';	// 삭제
							$("#folderTypeBtn").children()[1].style.display = 'flex';	// 폴더 생성
							$("#folderTypeBtn").children()[2].style.display = 'flex';	// 업로드
							$("#folderTypeBtn").children()[3].style.display = 'flex';	// 다운로드
							$("#folderTypeBtn").children()[4].style.display = 'flex';	// 복사
							$("#folderTypeBtn").children()[5].style.display = 'flex';	// 이동

							page.document.isdelAuth = true; // 권한에 따라 grid 삭제 아이콘 생성 여부 설정

							if (data.node.data.rghtTy === 'C') {
								$("#folderTypeBtn").children()[0].style.display = 'none';

								page.document.isdelAuth = false;
							} else if (data.node.data.rghtTy === 'R') {
								$("#folderTypeBtn").children()[0].style.display = 'none';
								$("#folderTypeBtn").children()[1].style.display = 'none';
								$("#folderTypeBtn").children()[2].style.display = 'none';
								$("#folderTypeBtn").children()[4].style.display = 'none';
								$("#folderTypeBtn").children()[5].style.display = 'none';

								page.document.isdelAuth = false;
							} else if (data.node.data.rghtTy === 'G') {
								$("#folderTypeBtn").children()[0].style.display = 'none';
								$("#folderTypeBtn").children()[1].style.display = 'none';
								$("#folderTypeBtn").children()[2].style.display = 'none';
								$("#folderTypeBtn").children()[4].style.display = 'none';
								$("#folderTypeBtn").children()[5].style.display = 'none';

								page.document.isdelAuth = false;
							}
						}
						//문서 경로 (아이템형)
						else if (data.node.data.naviType === 'ITEM') {
							$("#folderTypeBtn").css('display', 'none');
							$("#folderTypeBtn button").prop('disabled', true);
							$("#itemTypeBtn").css('display', 'flex');
							$("#itemTypeBtn button").prop('disabled', false);

							$("#itemTypeBtn").children()[0].style.display = 'flex';	// 삭제
							$("#itemTypeBtn").children()[1].style.display = 'flex';	// 추가
							$("#itemTypeBtn").children()[2].style.display = 'flex';	// 다운로드

							page.document.isdelAuth = true;

							if (data.node.data.rghtTy === 'C') {
								$("#itemTypeBtn").children()[0].style.display = 'none';

								page.document.isdelAuth = false;
							} else if (data.node.data.rghtTy === 'R') {
								$("#itemTypeBtn").children()[0].style.display = 'none';
								$("#itemTypeBtn").children()[1].style.display = 'none';

								page.document.isdelAuth = false;
							} else if (data.node.data.rghtTy === 'G') {
								$("#itemTypeBtn").children()[0].style.display = 'none';
								$("#itemTypeBtn").children()[1].style.display = 'none';
								$("#itemTypeBtn").children()[2].style.display = 'none';

								page.document.isdelAuth = false;
							}
						}
					}

					page.navigation.select(data.node?.data);
					page.navigation.data.currentNode = data.node;

					// 네비 이동 아이콘 생성.
					page.tree.addClassToNodeAndParents(data.node);
					page.tree.applyTreeStylesAndActions(data.node.data.rghtTy);
					$('.jstree-anchor').siblings('nav.item_opt').css('display', 'none');
					$('.jstree-anchor.jstree-clicked.current').siblings('nav.item_opt').css('display', 'contents');

				});

				// jstree가 로드된 후에 실행
				this.obj.on("loaded.jstree", function (e, data) {

					// 루트 노드 자동 선택
					const rootNode = $("#jstree").jstree(true).get_node("#"); // 루트 노드

					if (rootNode && rootNode.children.length > 0) {
						const firstChildId = rootNode.children[0]; // 루트의 첫 번째 자식
						page.tree.selectNode(firstChildId); // 루트 노드의 첫 번째 자식 선택
					}

					// 대시보드에서 선택되어 들어올 경우,
					if (naviId) {
						page.tree.selectNode(naviId);
					}

					// 문서 url로 들어온 경우
					if (page.tree.data.treeParam.docNm) {
						// 받은 문서 위치 검색어로 설정.
						$('input[name="doc_search_text"]').val(page.tree.data.treeParam.docNm);
						$('select[name="doc_search_select"]').val("doc_nm");
					}

				});
			},

			// 컨텍스트 메뉴 항목 생성
			getContextMenuItems($node) {
				const menuActions = {
					create: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("btn.001") }}', // 추가
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.moveAddNavi(),
					},
					delete: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("btn.002") }}', // 삭제
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.delete(),
					},
					update: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("item.doc.031") }}', // 이름 변경
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.moveUpdateNavi(),
					},
					copyAuthority: {
						separator_before: true,
						separator_after: false,
						label: '{{ message("item.doc.062") }}', // 권한 복사
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.copyAuthority(),
					},
					pasteAuthority: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("item.doc.063") }}',  // 권한 붙이기
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.pasteAuthority(),
					},
					copyProperty: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("item.doc.064") }}', // 속성 정의 복사
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.copyProperty(),
					},
					pasteProperty: {
						separator_before: false,
						separator_after: true,
						label: '{{ message("item.doc.065") }}', // 속성 정의 붙이기
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.pasteProperty(),
					},
					setProperty: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("item.doc.047") }}', // 속성 정의
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.setProperty(),
					},
					setAuthority: {
						separator_before: false,
						separator_after: false,
						label: '{{ message("item.doc.066") }}', //권한 설정
						icon: "menu1",
						_disabled: false,
						action: () => page.navigation.moveSetNaviAuthority(),
					},
				};

				// 권한 종류별 메뉴 구성
				const userTypeMenus = {
					A: ["create", "delete", "update", "copyAuthority", "pasteAuthority", "copyProperty", "pasteProperty", "setProperty", "setAuthority"],
					D: ["create", "delete", "update"],
					C: ["create", "update"],
				};

				const userType = $node.original.userType;
				const availableMenus = userTypeMenus[userType] || [];

				// 컨텍스트 메뉴 항목 생성
				const menuItems = {};
				availableMenus.forEach((key, index) => {
					menuItems[key] = {
						...menuActions[key], // 기존 menuActions의 값을 복사
					};
				});

				return menuItems;
			},

			// 네비게이션 새로고침
			refresh() {
				this.obj.jstree(true).refresh();
				this.applyTreeStylesAndActions();
			},

			//브레드크럼 설정
			setBreadcrumb: function (node, sep) {
				// 현재 노드의 경로를 추적하여 breadCrumb에 추가
				var breadCrumbList = [];
				var currentNode = node;

				while (currentNode && currentNode.id !== "#") {
					let data = {
						naviId: currentNode.data.naviId,
						naviNo: currentNode.data.naviNo,
						docNm: currentNode.text,
					}
					breadCrumbList.unshift(data); // 상위 노드부터 배열에 추가
					currentNode = this.obj.jstree("get_node", currentNode.parent);
				}

				this.data.breadCrumb = breadCrumbList.map(item => item.docNm).join(sep ? " " + sep + " " : " > ");
				this.data.upBreadCrumb = breadCrumbList.length > 1
					? breadCrumbList.slice(0, -1).map(item => item.docNm).join(sep ? " " + sep + " " : " > ")
					: ""; // 상위 경로만 가져옴

				page.document.data.breadCrumbList = breadCrumbList;
				page.document.data.upDocInfo = {
					docNm: node.data.naviNm,
					naviNo: node.data.naviNo,
					naviId: node.data.naviId,
					breadCrumb: this.data.breadCrumb
				};

				page.document.setDocBreadcrumb(); // 브레드크럼 업데이트
			},

			// 특정 노드를 선택 상태로 만드는 함수
			selectNode(naviId) {
				this.obj.jstree(true).deselect_all();
				this.obj.jstree("select_node", naviId);
			},

			getNode(id) {
				return this.obj.jstree("get_node", id);
			},

			getBreadcrumb(node, sep) {
				var breadCrumb = [];
				while (node) {
					breadCrumb.unshift(node.text);
					if (node.parent && node.parent != "#") {
						node = this.obj.jstree("get_node", node.parent);
					} else {
						node = "";
					}
				}
				return sep ? breadCrumb.join(" " + sep + " ") : breadCrumb.join(" > ");
			},
		},

		/* 네비게이션 관련 모음 */
		navigation: {
			data: {
				selected: {},
				currentNode: {},
				copiedAuthorityData: {},
				copiedPropertyData: {},
			},
			select(selectedData) {
				// 네비게이션 트리가 선택되었을 때
				// 브래드크럼 표시 및 파일 리스트 표시
				this.data.selected = selectedData;
				let url = "/api/document/grid-property-list/" + this.data.selected.naviId;


				page.searchClear(false, true); 	// 그리드 검색 초기화
				page.perPageClear(); 			// 그리드 perPage 초기화

				// 그리드 컬럼리스트 조회
				let columns = [];
				gaiaCommon.get(url,null,(response) => {
					let columnData = response.details.propertyList;

					//그리드 컬럼 세팅.
					const columns = page.document.setGridColumns(columnData);

					//문서 grid 생성.
					if (page.upDocId) { // [대시보드, 문서이동(복사)]를 통해 이동했을 경우,
						let upDocId = page.upDocId;
						page.document.gridInit(page.navigation.data.selected.naviId, columns, upDocId);
					} else {
						page.document.gridInit(page.navigation.data.selected.naviId, columns);
					}

					//검색 콤보박스 생성.
					page.document.setSearchComboBox(columnData);

				}, (error) => {
					// 로그인 세션 만료의 경우,
					if (error.status === 401) {
						gaiaPortal.customAlert("{{ message('msg.064') }}", function () {
							location.reload();
						});
					} else {
						gaiaPortal.customAlert(error.responseJSON?.message);
					}
				})
			},

			//네비게이션 같은 위치에서 위, 아래로 이동
			moveUpDownNavi(mode) {
				let url; // 설정할 url

				if (Object.keys(page.navigation.data.selected).length === 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.016") }}'); // 경로를 선택해주세요.
					return;
				}

				let parentNode = page.tree.obj.jstree("get_node", page.navigation.data.selected.upNaviId);
				const selectedNavi = page.navigation.data.selected;

				let requestData = {
					dsplyOrdr: selectedNavi.dsplyOrdr,
					naviLevel: selectedNavi.naviLevel,
					upNaviId: selectedNavi.upNaviId,
					naviId: selectedNavi.naviId
				}

				if (page.navigation.data.currentNode.parent === "#") {
					gaiaPortal.customAlert('{{ message("msg.doc.017") }}'); // 최상위 경로는 이동할 수 없습니다.
					return;
				}

				if (mode === 'up') {			//위로 이동
					if (parentNode.children[0] === selectedNavi.naviId) {
						// 최상위 위치
						gaiaPortal.customAlert('{{ message("msg.doc.018") }}'); // 더 이상 이동할 수 없습니다.
						return;
					} else {
						url = '/api/document/navigation/move-up';
					}
				} else if (mode === 'down') { 	//아래로 이동
					if (parentNode.children[parentNode.children.length - 1] === selectedNavi.naviId) {
						// 최하위 위치
						gaiaPortal.customAlert('{{ message("msg.doc.018") }}'); // 더 이상 이동할 수 없습니다.
						return;
					} else {
						url = '/api/document/navigation/move-down';
					}
				} else {
					gaiaPortal.customAlert('{{ message("msg.059") }}'); // 잘못된 요청입니다.
					return;
				}
				gaiaCommon.post(url,requestData,(response) => {
					if (response.ok) {
						page.refresh(true, false);
						gaiaPortal.customAlert('{{ message("msg.doc.019") }}'); // 경로가 이동되었습니다.
					} else {
						gaiaPortal.customAlert(response.message);
					}
				},(error) => {
					// 로그인 세션 만료의 경우,
					if (error.status === 401) {
						gaiaPortal.customAlert("{{ message('msg.064') }}", function () {
							location.reload();
						});
					} else {
						gaiaPortal.customAlert(error.responseJSON?.message);
					}
				})
			},

			//네비게이션 경로 추가화면 이동
			moveAddNavi() {
				if (page.navigation.data.selected.naviId) {
					if (page.navigation.data.selected.naviLevel < 3) {
						//네비게이션 타입 리스트 조회
						page.popup.initializeSelectBoxes();
						$("#addNaviPath").html(page.tree.data.breadCrumb);
						$('#addNaviNm').val('');
						$('#addNaviNmValid').val('N');
						$("#addNaviType").val('').prop("selected", true);
						$("#insert_navi_tit").text('{{ message("item.doc.009") }}'); // 경로 추가
						$('#insertNavi').addClass('open');
					} else {
						gaiaPortal.customAlert('{{ message("msg.doc.020") }}');	// 네비게이션 경로는 3레벨까지 생성 할 수 있습니다.
					}
				} else {
					gaiaPortal.customAlert('{{ message("msg.021") }}'); // 선택된 경로가 없습니다.
				}
			},
			//네비게이션 이름변경 이동
			moveUpdateNavi() {
				if (page.navigation.data.selected.naviId) {
					$('#updateNaviPath').html(page.tree.data.upBreadCrumb);
					$('#updateNaviNm').val('');
					$('#orgNaviNm').val(page.navigation.data.selected.naviNm);
					$('#orgNaviType').val(page.navigation.data.selected.naviType);
					$('#updateNaviNo').val(page.navigation.data.selected.naviNo);
					$('#updateNaviNmValid').val('N');
					$("#updateNaviType").val(page.navigation.data.selected.naviType).prop("selected", true);
					$("#update_navi_tit").text('{{ message("item.doc.013") }}'); // 경로 수정
					$('#updateNavi').addClass('open');
				} else {
					gaiaPortal.customAlert('{{ message("msg.021") }}'); // 선택된 경로가 없습니다.
				}
			},

			//네비게이션 경로명 중복체크
			naviExist(actionType) {
				let naviNm;
				let upNaviId;
				let naviNmValid;

				if (actionType === 'add') {
					naviNm = $('#addNaviNm');
					naviNmValid = $('#addNaviNmValid');
					upNaviId = page.navigation.data.selected.naviId
				} else if (actionType === 'update') {
					if ($('#updateNaviNm').val() === $('#orgNaviNm').val()) {
						gaiaPortal.customAlert('{{ message("msg.doc.022") }}'); // 기존 사용하던 경로명과 동일합니다.
						return;
					}
					naviNm = $('#updateNaviNm');
					naviNmValid = $('#updateNaviNmValid');
					upNaviId = page.navigation.data.selected.upNaviId
				}

				if (naviNm.val()) {
					if (addRegex.test(naviNm.val())) {
						data = {
							naviDiv: page.navigation.data.selected.naviDiv,
							upNaviId: upNaviId,
							naviNm: naviNm.val(),
						};
						gaiaCommon.post("/api/document/naviExist", data, function (result) {
							if (result.details?.addNaviExist === 'Y') {
								gaiaPortal.customAlert('{{ message("msg.doc.023") }}'); // 이미 사용중인 경로명입니다.
							} else {
								naviNmValid.val('Y');
								gaiaPortal.customAlert('{{ message("msg.doc.024") }}'); // 사용 가능한 경로명입니다.
							}
						});
					} else {
						gaiaPortal.customAlert('{{ message("msg.doc.025") }}'); // 경로명에 사용할 수 없는 문자가 포함되어 있습니다.
						naviNm.focus();
						return;
					}
				} else {
					gaiaPortal.customAlert('{{ message("msg.doc.026") }}'); // 경로명을 입력해주세요.
					naviNm.focus();
					return;
				}
			},

			//문서 경로 추가
			addNavi() {
				let addNaviNm = $('#addNaviNm').val();
				let addNaviType = $('#addNaviType').val();
				let isNameValid = $('#addNaviNmValid').val() === 'Y';

				// 경로명 입력 유효성 확인
				if (!addNaviNm) {
					gaiaPortal.customAlert('{{ message("msg.doc.026") }}'); // 경로명을 입력해주세요.
					$('#addNaviNm').focus();
					return;
				}

				// 경로명 중복 체크 유효성 확인
				if (!isNameValid) {
					gaiaPortal.customAlert('{{ message("msg.doc.027") }}'); // 경로명 중복체크를 해주세요.
					$('#addNaviNm').focus();
					return;
				}

				// 경로종류 입력 유효성 확인
				if (!addNaviType) {
					gaiaPortal.customAlert('{{ message("msg.doc.028") }}'); // 경로종류를 선택해주세요.
					$('#addNaviType').focus();
					return;
				}

				// 데이터 생성
				const data = {
					pjtNo: page.navigation.data.selected?.pjtNo,
					cntrctNo: page.navigation.data.selected?.cntrctNo,
					naviDiv: page.navigation.data.selected?.naviDiv,
					naviPath: addNaviNm,
					naviNm: addNaviNm,
					upNaviNo: page.navigation.data.selected?.naviNo,
					upNaviId: page.navigation.data.selected?.naviId,
					naviLevel: (page.navigation.data.selected?.naviLevel + 1),
					naviType: addNaviType,
				};

				// 서버로 데이터 전송
				gaiaCommon.post("/api/document/navigation/create", data, (result) => {
					if (result.ok) {
						gaiaPortal.customAlert('{{ message("msg.doc.029") }}'); // 신규 경로가 생성되었습니다.
						$('#insertNavi').removeClass('open');
						page.tree.refresh();
					} else {
						gaiaPortal.customAlert(result.message || '{{ message("msg.doc.030") }}'); // 경로 생성 중 오류가 발생했습니다.
					}
				}, (error) => {
					gaiaPortal.customAlert(error.message || '{{ message("msg.060") }}'); // 서버와의 통신 중 오류가 발생했습니다.
				});

			},

			//네비게이션 경로 수정
			updateNavi() {

				// 입력값 가져오기
				const updateNaviNm = $('#updateNaviNm').val();
				const orgNaviNm = $('#orgNaviNm').val();
				// const updateNaviType = $('#updateNaviType').val();
				// const orgNaviType = $('#orgNaviType').val();
				const isNameValid = $('#updateNaviNmValid').val() === 'Y';

				// 변경 사항 확인
				if (!updateNaviNm) {
					gaiaPortal.customAlert('{{ message("msg.doc.031") }}'); // 변경할 경로명을 입력해주세요.
					$('#updateNaviNm').focus();
					return;
				}

				// 경로명 변경 시 중복 체크 여부 확인
				if (updateNaviNm && !isNameValid) {
					gaiaPortal.customAlert('{{ message("msg.doc.032") }}'); // 변경된 경로명의 중복체크를 해주세요.
					return;
				}

				// 변경될 경로명 설정
				const finalNaviNm = updateNaviNm || orgNaviNm;

				// 서버로 전송할 데이터 생성
				const data = {
					naviNo: page.navigation.data.selected?.naviNo,
					naviPath: `${page.tree.data.upBreadCrumb}`,
					naviNm: finalNaviNm,
					// naviType: updateNaviType,
				};

				// 서버 요청
				gaiaCommon.post("/api/document/navigation/update", data, (result) => {
					if (result.ok) {
						gaiaPortal.customAlert('{{ message("msg.doc.033") }}'); // 경로정보가 변경되었습니다.
						$('#updateNavi').removeClass('open');
						page.tree.refresh();
					} else {
						gaiaPortal.customAlert(result.message || '{{ message("msg.doc.034") }}'); // 경로정보 변경 중 오류가 발생했습니다.
					}
				}, (error) => {
					gaiaPortal.customAlert(error.message || '{{ message("msg.060") }}'); // 서버와의 통신 중 오류가 발생했습니다.
				});

			},

			// 네비게이션 경로 삭제
			delete() {
				if (this.data.selected.naviNo) {
					//선택된 네비게이션에 하위 네비게이션이 있는지 확인
					const selectedNaviNode = page.tree.obj.jstree('get_selected', true)[0];
					const parentNodeId = selectedNaviNode.parent;

					// 하위에 경로가 존재하는지 확인
					if (selectedNaviNode && selectedNaviNode.children.length > 0) {
						gaiaPortal.customAlert('{{ message("msg.doc.035") }}'); // 하위 경로가 존재하여 삭제할 수 없습니다.
						return;
					}

					// 그리드에 데이터가 있는지 확인
					const gridData = page.document.grid.getData();
					if (gridData && gridData.length > 0) {
						gaiaPortal.customConfirm('{{ message("item.com.084") }}', '{{ message("item.doc.067") }}', '{{ message("msg.doc.036") }}', function () { // 경로 하위에 문서가 존재합니다. 그래도 삭제하시겠습니까?
							gaiaCommon.post("/api/document/navigation/sub-document/delete/" + page.navigation.data.selected.naviId, {}, function (result) {
								gaiaPortal.customAlert('{{ message("msg.006") }}'); // 삭제되었습니다
								page.tree.selectNode(parentNodeId);
								page.tree.refresh();
							});
						});
					} else {
						gaiaPortal.customConfirm('{{ message("item.com.084") }}', '{{ message("item.doc.068") }}', '{{ message("msg.doc.037") }}', function () { // 해당 경로를 삭제하시겠습니까?
							gaiaCommon.post("/api/document/navigation/" + page.navigation.data.selected.naviNo + "/delete", {}, function (result) {
								gaiaPortal.customAlert('{{ message("msg.006") }}'); // 삭제되었습니다
								page.tree.selectNode(parentNodeId);
								page.tree.refresh();
							});
						});
					}

				} else {
					gaiaPortal.customAlert('{{ message("msg.doc.021") }}'); // 선택된 네비게이션이 없습니다.
				}
			},

			// 경로 권한설정 모달팝업 이동
			moveSetNaviAuthority() {
				//권한 모드 - navi
				page.setAuthMode = "navi";

				// 선택된 네비게이션 유효성 확인
				if (!page.navigation.data.selected?.naviId) {
					gaiaPortal.customAlert('{{ message("msg.doc.021") }}'); // 선택된 네비게이션이 없습니다.
					return;
				}

				const data = {
					naviNo: page.navigation.data.selected?.naviNo,
					naviId: page.navigation.data.selected?.naviId,
					upNaviNo: page.navigation.data.selected?.upNaviNo,
					upNaviId: page.navigation.data.selected?.upNaviId,
					pjtNo: page.navigation.data.selected?.pjtNo,
					cntrctNo: page.navigation.data.selected?.cntrctNo,
					naviLevel: page.navigation.data.selected?.naviLevel,
				};

				//서버 요청
				gaiaCommon.post("/api/document/navigation-authority/list", data, function (result) {
					$('#authorityAllCheckbox').prop('checked', false);
					const authorityList = result.details?.authorityList || [];
					const rghtTyList = result.details?.rghtTyList || [];

					if (!rghtTyList.length) {
						gaiaPortal.customAlert('{{ message("msg.doc.038") }}'); // 권한정보가 존재하지 않습니다.
						return;
					}

					if (!authorityList.length) {
						const levelMessage = page.navigation.data.selected?.naviLevel === 0
							? '{{ message("msg.doc.039") }}'	// 설정할 권한정보가 없습니다.
							: '{{ message("msg.doc.040") }}';	// 설정할 권한정보가 없습니다. 상위 경로부터 권한 설정을 하세요.
						gaiaPortal.customAlert(levelMessage);
						return;
					}
					const tableBody = document.querySelector("#list-grid tbody");
					tableBody.innerHTML = ""; // 기존 데이터 삭제
					let checkAllYn = true;

					$.each(result.details?.authorityList, function (index, obj) {
						const row = document.createElement("tr");

						// 셀렉트박스 옵션 생성
						const selectOptions = result.details?.rghtTyList.map(option => {
							const isSelected = option.cmnCd === obj.rghtTy ? "selected" : "";
							return `<option value="${option.cmnCd}" ${isSelected}>${option.cmnCdNm}</option>`;
						}).join("");

						row.innerHTML = `
											<td>
												<label class="form_check">
													<input class="check_mark" type="checkbox" id="checkboxgroup" ${obj.checkyn}>
													<span class="check_label blind">선택</span>
													<input type="hidden" id="rghtNo" value="${obj.rghtNo}">
													<input type="hidden" id="rghtGrpNo" value="${obj.rghtGrpNo}">
													<input type="hidden" id="rghtGrpCd" value="${obj.rghtGrpCd}">
													<input type="hidden" id="oldRghtTy" value="${obj.rghtTy}">
												</label>
											</td>
											<td class="clickable-cell" style="text-align: center; vertical-align: middle;">
												<div style="display: flex; justify-content: center; position: relative;">
													<span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer; padding-left: 5px;">${obj.rghtGrpNmKrn}</span>
													<i class="ic ic-sent-to-back" style="cursor: pointer; margin-left: 10px; visibility: hidden; right: 10px; position: absolute;"></i>
												</div>
											</td>
											<td style="text-align: center; vertical-align: middle;">
												<div style="display: flex; justify-content: left; position: relative;">
													<span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer; padding-left: 5px;">${obj.rghtGrpDscrpt}</span>
												</div>
											</td>
											<td>
												<span class="selectbox">
													<select class="combo_box" id="rghtTy">																	
														<option selected disabled value="">{{ message('item.com.005') }}</option>
														${selectOptions}
													</select>
												</span>
											</td>
										`;
						if (obj.checkyn !== 'CHECKED') {
							checkAllYn = false;
						}

						// 체크박스 클릭 이벤트 추가
						row.querySelector(".check_mark").addEventListener("change", (e) => {
							if (e.target.checked) {
								checkAllYn = true;

								document.querySelectorAll("#list-grid tbody .check_mark").forEach((checkbox) => {
									if (!checkbox.checked) {
										checkAllYn = false;
									}
								});
								if (checkAllYn) {
									$('#authorityAllCheckbox').prop('checked', true);
								}
							} else {
								$('#authorityAllCheckbox').prop('checked', false);
							}
						});

						row.querySelector(".clickable-cell").addEventListener("mouseover", (event) => {
							row.querySelector(".ic").style.visibility = 'visible';
						});

						row.querySelector(".clickable-cell").addEventListener("mouseout", (event) => {
							row.querySelector(".ic").style.visibility = 'hidden';
						});

						row.querySelector(".ic").addEventListener("click", (event) => {
							const _width = '500';
							const _height = '420';

							let _left = Math.ceil((window.screen.width - _width) / 2);
							_left += window.screenLeft; // 듀얼 모니터일 때
							let _top = Math.ceil((window.screen.height - _height) / 2);

							navigationPopup = window.open('/document/navi/authority/popup?rghtGrpNo=' + obj.rghtGrpNo + '&rghtGrpCd=' + obj.rghtGrpCd, '_blank', 'width=' + _width + ', height=' + _height + ',left=' + _left + ',top=' + _top + ', scrollbars=yes, resizable=yes');
						});

						tableBody.appendChild(row);
					});

					if (checkAllYn) {
						$('#authorityAllCheckbox').prop('checked', true);
					}

					$("#set_authority_tit").text('{{ message("item.doc.066") }}'); // 권한설정
					$('#authority').addClass('open');
				});

			},

			//문서 경로 권한 설정 팝업에서 권한 설정 저장하기
			setTreeAuthority() {
				let treeAuthorityList = [];
				const rows = document.querySelectorAll("#list-grid tbody .check_mark");

				for (let index = 0; index < rows.length; index++) {
					const checkbox = rows[index];
					const actionType = this.getActionType(checkbox, index);

					// 유효성 검사 실패 처리
					if (actionType === 'invalid') {
						return null; // 유효성 검사 실패 시 null 반환
					}

					// 변경 사항 있는 데이터만 리스트에 추가
					if (actionType !== 'PASS') {
						const rghtNo = $('input[id="rghtNo"]')[index].value === 'NON' ? null : $('input[id="rghtNo"]')[index].value;
						let treeAuthority = {
							actionType: actionType,
							id: page.navigation.data.selected.naviId,
							no: page.navigation.data.selected.naviNo,
							rghtNo: rghtNo,
							rghtGrpNo: $('input[id="rghtGrpNo"]')[index].value,
							rghtGrpCd: $('input[id="rghtGrpCd"]')[index].value,
							rghtTy: $('select[id="rghtTy"]')[index].value
						}

						treeAuthorityList.push(treeAuthority);
					}
				}

				// 변경사항 확인
				if (!treeAuthorityList) {
					return; // 유효성 검사에서 실패했으므로 함수 종료
				}

				if (!treeAuthorityList.length) {
					gaiaPortal.customAlert('{{ message("msg.doc.041") }}'); // 권한설정 변경사항이 존재하지 않습니다.
					return;
				}

				// 서버 요청
				gaiaCommon.post("/api/document/navigation-authority/setup", { setAuthorityList: treeAuthorityList }, (result) => {
					gaiaPortal.customAlert('{{ message("msg.doc.042") }}'); // 권한설정을 완료하였습니다.
					$('#authority').removeClass('open');
					page.setAuthMode = null; // 권한 모드 초기화
				});

			},

			//권한설정 - actionType(ADD, UPDATE, DEL) 설정
			getActionType(checkbox, index) {
				const rghtNo = $('input[id="rghtNo"]')[index].value;
				const selectedRghtTy = $('select[id="rghtTy"]')[index].value;
				const oldRghtTy = $('input[id="oldRghtTy"]')[index].value;

				if (checkbox.checked) {
					// 권한이 없는 경우
					if (rghtNo === 'NON') {
						if (!selectedRghtTy) {
							gaiaPortal.customAlert('{{ message("msg.doc.043") }}'); // 설정할 권한구분을 선택해주세요.
							$('select[id="rghtTy"]')[index].focus();
							return 'invalid'; // 유효성 검사 실패
						}
						return 'ADD';
					}

					// 선택된 권한이 이전 권한과 다를 경우
					if (selectedRghtTy !== oldRghtTy) {
						return 'UPDATE';
					}
				}

				// 체크박스가 체크 해제된 경우
				if (!checkbox.checked && rghtNo !== 'NON') {
					return 'DEL';
				}

				return 'PASS'; // 변경 없음
			},

			//속성정의 팝업 이동
			setProperty() {
				if (!this.data.selected.naviNo) {
					gaiaPortal.customAlert('{{ message("msg.doc.021") }}'); // 선택된 네비게이션이 없습니다.
					return;
				}


				const _width = '950';
				const _height = '750';

				let _left = Math.ceil((window.screen.width - _width) / 2);
				_left += window.screenLeft; // 듀얼 모니터일 때
				let _top = Math.ceil((window.screen.height - _height) / 2);

				propertyPopup = window.open('/document/navi/property/popup', 'propertyPopup', 'width=' + _width + ', height=' + _height + ',left=' + _left + ',top=' + _top + ', scrollbars=yes, resizable=yes');
			},

			//권한 복사
			copyAuthority() {
				if (!page.navigation.data.selected.naviId) {
					gaiaPortal.customAlert('{{ message("msg.doc.021") }}'); // 선택된 경로가 없습니다.
					return;
				}

				const copyData = {
					sourceNaviNo: page.navigation.data.selected.naviNo,
					sourceNaviId: page.navigation.data.selected.naviId,
					upNaviNo: page.navigation.data.selected.upNaviNo,
					upNaviId: page.navigation.data.selected.upNaviId,
					pjtNo: page.navigation.data.selected.pjtNo,
					cntrctNo: page.navigation.data.selected.cntrctNo,
					naviLevel: page.navigation.data.selected.naviLevel,
				};

				let requestData = {
					targetId: copyData.sourceNaviId,
					targetNo: copyData.sourceNaviNo,
				}

				//해당 네비게이션 권한 존재 여부 확인.
				gaiaCommon.post("/api/document/navigation-authority/copy", requestData, function (result) {
					if (result.details.authorities.length > 0) {
						page.navigation.data.copiedAuthorityData = copyData;
						gaiaPortal.customAlert('{{ message("msg.doc.044") }}'); // 복사되었습니다.
					} else {
						gaiaPortal.customAlert('{{ message("msg.doc.045") }}'); // 권한이 존재하지 않습니다.
						page.navigation.data.copiedAuthorityData = {}; 			// 복사데이터 초기화
						return false;
					}
				});

			},

			//권한 붙여넣기
			pasteAuthority() {
				if (Object.keys(page.navigation.data.copiedAuthorityData).length <= 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.049") }}'); // 붙여넣을 권한을 복사해주세요.
					return false;
				}

				const copiedData = page.navigation.data.copiedAuthorityData;
				const pasteData = page.navigation.data.selected;

				//경로 레벨, 상위 navi가 같은 경우에만 붙여넣기 진행.
				if ((copiedData.naviLevel !== pasteData.naviLevel) || (copiedData.upNaviId !== pasteData.upNaviId)) {
					gaiaPortal.customAlert('{{ message("msg.doc.046") }}'); // 권한을 붙여넣을 수 없는 경로입니다.
					return false;
				} else if (copiedData.sourceNaviId === pasteData.naviId) {
					gaiaPortal.customAlert('{{ message("msg.doc.047") }}'); // 같은 경로는 권한을 붙일 수 없습니다.
					return false;
				} else {
					const requestData = {
						targetId: pasteData.naviId,
						targetNo: pasteData.naviNo,
						sourceId: copiedData.sourceNaviId,
						sourceNo: copiedData.sourceNaviNo,
					}

					gaiaCommon.post("/api/document/navigation-authority/paste", requestData, function (result) {
						gaiaPortal.customAlert('{{ message("msg.doc.048") }}'); // 권한을 붙여넣었습니다.
						page.navigation.data.copiedAuthorityData = {}; // 붙이기 완료 후, 초기화
					});

				}
			},

			//속성 복사
			copyProperty() {
				if (!this.data.selected.naviId) {
					gaiaPortal.customAlert('{{ message("msg.doc.021") }}'); // 선택된 경로가 없습니다.
					return;
				}

				const naviId = this.data.selected.naviId;

				const copyData = {
					sourceNaviNo: page.navigation.data.selected.naviNo,
					sourceNaviId: page.navigation.data.selected.naviId,
					upNaviNo: page.navigation.data.selected.upNaviNo,
					upNaviId: page.navigation.data.selected.upNaviId,
					naviLevel: page.navigation.data.selected.naviLevel,
					pjtNo: page.navigation.data.selected.pjtNo,
					cntrctNo: page.navigation.data.selected.cntrctNo,
				};

				let requestData = {
					targetId: copyData.sourceNaviId,
					targetNo: copyData.sourceNaviNo,
				}

				//해당 네비게이션 속성 존재 여부 확인.
				gaiaCommon.post("/api/document/navigation-property/copy", requestData, function (result) {
					if (result.details.properties.length > 0) {
						page.navigation.data.copiedPropertyData = copyData;
						gaiaPortal.customAlert('{{ message("msg.doc.044") }}'); // 복사되었습니다.
					} else {
						gaiaPortal.customAlert('{{ message("msg.doc.050") }}'); // 속성이 존재하지 않습니다.
						page.navigation.data.copiedPropertyData = {}; 			// 복사한 속성데이터 초기화
						return false;
					}
				});

			},

			//속성 붙이기
			pasteProperty() {
				if (Object.keys(page.navigation.data.copiedPropertyData).length <= 0) {
					gaiaPortal.customAlert('{{ message("msg.doc.053") }}'); // 붙여넣을 속성 정의를 복사해주세요.
					return false;
				}

				const copiedData = page.navigation.data.copiedPropertyData;
				const pasteData = page.navigation.data.selected;

				//경로 레벨, 상위 navi가 같은 경우에만 붙여넣기 진행.
				if (copiedData.sourceNaviId === pasteData.naviId) {
					gaiaPortal.customAlert('{{ message("msg.doc.051") }}'); // 같은 경로는 속성 정의를 붙일 수 없습니다.
					return false;
				} else {
					const requestData = {
						targetId: pasteData.naviId,
						targetNo: pasteData.naviNo,
						sourceId: copiedData.sourceNaviId,
						sourceNo: copiedData.sourceNaviNo,
					}

					gaiaCommon.post("/api/document/navigation-property/paste", requestData, function (result) {
						gaiaPortal.customAlert('{{ message("msg.doc.052") }}'); // 속성 정의를 붙여넣었습니다.
						page.navigation.data.copiedPropertyData = {}; 			// 붙이기 완료 후, 초기화
						page.refresh(true, true);
					});
				}
			},
		},

		/* tui 그리드 */
		document: {
			grid: null,
			fullTree: null,
			docMoveCopyMode: null,
			isdelAuth: false,
			attrCdList: [],
			data: {
				upDocInfo: {
					docNo: 0,
					docId: "#",
					naviNo: "",
					naviId: null,
					breadCrumb: "",
				},
				breadCrumbList: [],
				selected: {},
				copiedAuthorityData: {},
			},
			searchData: {
				isSearch: false,
				searchText: null,
				columnNm: null,
				docNm: null
			},
			previewPDFData: {
				docId: null,
				docNm: null,
			},
			requestData: null,

			gridInit: function (naviId, columns, upDocId) {
				let initRequest = false; //서버로 데이터 요청 여부
				let DocListGet = {};
				let defaultColumns = [];

				if (this.requestData) {
					this.requestData = null; //요청 데이터 초기화
				}

				if (naviId) {
					DocListGet = {
						naviId: naviId,
					}

					if (upDocId) {
						DocListGet.upDocId = upDocId;
					}

					if (this.searchData.docNm) {
						DocListGet.searchText = this.searchData.docNm;
						DocListGet.columnNm = "doc_nm";
					}

					this.requestData = DocListGet;
				}

				if (DocListGet.naviId) {
					initRequest = true;
				} else {
					defaultColumns =
						[ //(기본값만 세팅)
							{
								header: "{{ message('item.doc.002') }}",
								name: 'doc_nm',
								align: 'center',
								sortable: true,

							},
							{
								header: "{{ message('item.doc.006') }}",
								name: 'chg_id',
								align: 'center',
							},
							{
								header: "{{ message('item.doc.007') }}",
								name: 'chg_dt',
								align: 'center',
								sortable: true,
							},

						]
				}

				const dataSource = createDataSource({
					readData: {
						url: '/api/document/grid-list', // 데이터를 요청할 API URL
						method: 'GET',
						initParams: DocListGet,
					}
				})
				dataSource.initialRequest = initRequest;

				if (this.grid) { // 이미 그리드가 있으면 제거하고 새로 생성.
					this.grid.destroy();
					this.grid = null;
				}

				if (!this.grid) {
					this.grid = new tui.Grid({
						el: document.getElementById('document_grid'),
						data: dataSource,
						scrollX: true,
						scrollY: true,
						useClientSort: false,
						bodyHeight: window.innerHeight - 420,
						width: 'auto',
						pageOptions: {
							useClient: false,
							perPage: 10, // 페이지당 항목 수
						},
						rowHeaders: [
							{
								type: 'checkbox',
								// header: `
								// 	<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />
								// `,
								width: 70,
								renderer: {
									type: window.CustomColumnCheckbox, //TODO: 그리드 스크롤 내리면 체크 값이 풀림.
									options: { //휴지통 클릭 삭제 시 필요한 값 설정
										url: 'api/document/list/delete',
										idField: 'doc_id',
										keyName: 'docIdList',
										msgList: {
											deleteConfirmTit: "{{ message('item.doc.070') }}",	// 문서 삭제
											deleteConfirm: "{{ message('msg.doc.009') }}",		// 정말 문서를 삭제하시겠습니까?
											deleteCompleteAlert: "{{ message('msg.006') }}"		// 삭제되었습니다.
										},
										isdelAuth: this.isdelAuth,
										afterFunction: function () { page.refresh(false, true); }
									}
								}
							}
						],
						columns: columns || defaultColumns,
						contextMenu: ({ rowKey, columnName }) => this.setGridContextMenu(rowKey)
					});

					refreshGrid(this.grid); // 그리드 리사이즈 문제 해결
				}
				// 'beforeSort' 이벤트 핸들러 설정(정렬 UI 멀티 컬럼 정렬 문제 해결)
				this.grid.on("beforeSort", (ev) => {
					// 'columns' 데이터 가져오기 및 멀티 컬럼 정렬 방지 처리
					const { columns } = ev.instance.store.data.sortState;
					if (columns.length > 1) {
						columns.shift();
					}

					// 추가 파라미터 설정
					let additionalParams = this.requestData;

					// 검색 조건이 활성화된 경우(search 관련 데이터 추가)
					if (this.searchData.isSearch) {
						additionalParams.searchText = this.searchData.searchText;
						additionalParams.columnNm = this.searchData.columnNm;
					}

					// 추가 파라미터를 요청 옵션에 병합
					ev.instance.dataProvider.setRequestParams(additionalParams);
				});

				this.grid.on("afterSort", (ev) => {
					// 정렬된 상태에서 다른 컬럼을 정렬하려고 할 때 정렬 초기화 진행.
					if (page.document.grid.getSortState().columns.length > 1) {
						page.document.grid.unsort(page.document.grid.getSortState().columns[0].columnName);
					}

				});


				//그리드 업데이트 될 경우, 처리 기능 모음
				this.grid.on('onGridUpdated', (ev) => {
					//파일 폴더 개수 설정
					const docTypeCountData = this.grid.getColumnValues("docTypeCount");
					this.setDocTypeCount(docTypeCountData);

					// 문서 브레드크럼 정보 설정
					const gridData = this.grid.getData();

					if (Array.isArray(gridData) && gridData.length > 0) {
						// gridData가 배열이고 데이터가 있는 경우
						const upDocList = gridData[0].upDocList;

						if (Array.isArray(upDocList) && upDocList.length > 0) {
							// upDocList가 배열이고 데이터가 있는 경우
							this.updateBreadCrumbList(upDocList); // breadCrumbList 업데이트
						} else {
							// console.warn("upDocList가 존재하지 않거나 빈 배열입니다.");
						}
					} else {
						// gridData가 없을 경우 gridUpDocIdInfo와 breadCrumbList 처리
						this.handleEmptyGrid();
					}

					// 대시보드로 들어온 upDocId 초기화
					if (page.upDocId) {
						page.upDocId = null;
					}

					//문서 URL로 들어온 docNm 초기화
					if (this.searchData.docNm) {
						this.searchData.docNm = null;
					}
				});

				this.grid.on("click", function (e) {
					const rowKey = e.rowKey; // 클릭된 행의 키를 가져옴

					if (e.columnName == "_checked") {
						if (e.nativeEvent.target.className == "checkGroup") {
							let temp = page.document.grid.getRow(rowKey);
							temp._attributes.checked = page.document.grid.getRow(rowKey)._attributes.checked ? false : true;
							page.document.grid.setRow(rowKey, temp);
						}
					}

					if (rowKey !== undefined && e.columnName !== "_checked") {
						const subRowData = page.document.grid.getRow(rowKey); // 그리드에서 해당 행 데이터 가져오기

						if (subRowData.doc_type === "FOLDR") {

							page.searchClear(false, true);		// 검색 초기화
							page.perPageClear();				// perPage 초기화

							const naviId = subRowData.navi_id; 	// 문서의 네비 Id
							const upDocId = subRowData.doc_id; 	// 문서 Id

							// 상위 폴더 정보 설정.
							// let text = subRowData.doc_nm;
							// const maxLength = 23;
							// let dsplyDocNm = text.length > maxLength ? text.substring(0, maxLength) + "..." : text;

							page.document.data.upDocInfo = {
								docNo: subRowData.doc_no,
								upDocId: subRowData.up_doc_id,
								docId: subRowData.doc_id,
								docNm: subRowData.doc_nm,
								naviNo: subRowData.navi_no,
								naviId: subRowData.navi_id,
								breadCrumb:
									page.document.data.upDocInfo.breadCrumb + " > " + subRowData.doc_nm,
							};

							let docListGet = {};
							if (naviId && upDocId) {
								docListGet = {
									naviId: naviId,
									upDocId: upDocId,
								}

								page.document.requestData = docListGet;
							}

							page.document.grid.readData(1, docListGet, true);
						}


					}
				});

			},
			//grid 페이징 사이즈 설정
			setPerPage() {
				const newPerPage = parseInt($('select[name="doc_per_page"]').val(), 10);
				this.grid.setPerPage(newPerPage);
			},

			//grid 동적 컬럼 설정 함수
			setGridColumns(columnData) {
				// 기본으로 보여지는 컬럼
				let columns = [
					{
						header: "{{ message('item.doc.002') }}",
						name: 'doc_nm',
						align: 'left',
						// width: 'auto',
						sortable: true,
						resizable: true,
						formatter: ({ value }) => {
							// 문서 경로 Tooltip 처리.
							return `<div class="tooltip-cell" title="${value}" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${value}</div>`;
						}
					},
				];
				// + propertyList를 기반으로 동적으로 생성되는 컬럼들
				columnData.forEach(item => {
					columns.push({
						header: item.attrbt_nm,
						name: item.attrbt_cd,
						align: 'center',
						sortable: true,
						resizable: true,
					});
				});

				columns.push(
					{
						header: "{{ message('item.doc.078') }}", 	// 문서 형식
						name: 'doc_type',
						align: 'center',
						width: 100,
						sortable: true,
						resizable: true,
						formatter: ({ value }) => {
							// doc_type 값에 따른 텍스트 매핑
							const typeMapping = {
								FOLDR: 'FOLDER',
								FILE: 'FILE',
								ITEM: 'ITEM'
							};

							// 매핑된 값이 없을 경우 기본값을 'DOC'로 설정
							return typeMapping[value] || 'DOC';
						}
					},
					{
						header: "{{ message('item.doc.006') }}",	// 수정자
						name: 'chg_id',
						align: 'center',
						width: 120,
						resizable: true,
					},
					{
						header: "{{ message('item.doc.007') }}",	// 수정일시
						name: 'chg_dt',
						align: 'center',
						width: 150,
						resizable: true,
						sortable: true,
					},
				);

				return columns;
			},

			// Grid 컨텍스트 메뉴 설정
			setGridContextMenu(rowKey) {
				const naviType = page.navigation.data.selected.naviType;
				let gridContextMenu = [];
				const row = page.document.grid.getRow(rowKey); 	// 선택한 로우 데이터 가져오기
				const docUserType = row.doc_user_type;
				const docNm = row.doc_nm; 						// doc_nm 가져오기
				const docType = row.doc_type;					// doc_type 가져오기

				if (!naviType) {
					console.error("No selected navigation.");
					return;
				}

				if (naviType === "FOLDR" || naviType === "ITEM") { // 폴더형 또는 아이템형 공통
					// 공통 메뉴 정의
					const fullMenu = [
						[
							{
								name: 'edit',
								label: "{{ message('item.doc.031') }}", 	// 이름 변경
								action: () => { this.moveRename(rowKey); }
							},
							{
								name: 'updateProperty',
								label: "{{ message('item.doc.034') }}",	// 속성 정보 수정
								action: () => { this.moveUpdateProperty(rowKey); }
							},
							{
								name: 'setAuthority',
								label: "{{ message('item.doc.066') }}", 	// 권한 설정
								action: () => { this.moveSetDocAuthority(rowKey); }
							},
						],
						[
							{
								name: 'copyAuthority',
								label: "{{ message('item.doc.062') }}",		// 권한 복사
								action: () => { this.copyAuthority(rowKey); }
							},
							{
								name: 'pasteAuthority',
								label: "{{ message('item.doc.063') }}",	// 권한 붙이기
								action: () => { this.pasteAuthority(rowKey); }
							},
							// 조건부로 URL 복사 메뉴 추가
							...(docType === 'FILE' || docType === 'ITEM' ? [{
								name: 'copyUrl',
								label: "{{ message('item.doc.071') }}",		// URL 복사
								action: () => { this.docUrlCopy(rowKey); }
							}] : []),
						],
						[
							{
								name: 'fileInfo',
								label: "{{ message('item.doc.072') }}", 	// 파일정보
								action: () => { this.showDocInfo(rowKey); }
							},
						]
					];

					// docUserType에 따른 필터링
					if (docUserType === 'A') {
						// 모든 메뉴 표시
						if (naviType === 'FOLDR') {
							gridContextMenu = fullMenu;
						} else {
							gridContextMenu = [fullMenu[0], fullMenu[1]];
						}
					} else if (['C', 'D'].includes(docUserType)) {
						// 이름 변경, 속성정보 수정, url 복사, 파일정보
						gridContextMenu = [
							fullMenu[0].filter(menu => ['edit', 'updateProperty'].includes(menu.name)),
							fullMenu[1].filter(menu => ['copyUrl'].includes(menu.name)),
						];

						// 파일정보는 FOLDR일 때만 추가
						if (naviType === 'FOLDR') {
							gridContextMenu.push(fullMenu[2]);
						}
					} else if (docUserType === 'R') {
						// url 복사, 파일정보
						gridContextMenu = [
							fullMenu[1].filter(menu => ['copyUrl'].includes(menu.name)),
						];

						// 파일정보는 FOLDR일 때만 추가
						if (naviType === 'FOLDR') {
							gridContextMenu.push(fullMenu[2]);
						}
					} else if (docUserType === 'G') {
						// URL 복사
						gridContextMenu = [
							fullMenu[1].filter(menu => ['copyUrl'].includes(menu.name))
						];
					} else {
						console.warn(`Unhandled docUserType: ${docUserType}`);
						return;
					}

					// 추가: doc_nm에 .pdf 확장자가 있는 경우 '미리보기' 메뉴 추가
					if (docNm && docNm.endsWith('.pdf')) {
						const previewMenu = {
							name: 'preview',
							label: "{{ message('item.doc.073') }}",	// 미리보기
							action: () => { this.previewPDFDoc(rowKey); }
						};

						// 미리보기 메뉴를 마지막에 추가
						gridContextMenu.push([previewMenu]);
					}
				} else {
					console.error("Invalid Navigation Type.");
					return;
				}

				return gridContextMenu;

			},

			//파일, 폴더 개수 설정 함수
			setDocTypeCount(docTypeCountData) {
				if (docTypeCountData) {
					//파일, 폴더 개수 출력 화면에 바인딩.
					// fileCnt, folderCnt 및 itemCnt 합산
					const totalCounts = docTypeCountData.reduce((totals, item) => {
						totals.fileCnt += item.fileCnt;
						totals.folderCnt += item.folderCnt;
						totals.itemCnt += item.itemCnt;
						return totals;
					}, { fileCnt: 0, folderCnt: 0, itemCnt: 0 });

					if (page.navigation.data.selected.naviType === "FOLDR") {
						$(".etc_info").show();
						$(".folder_doc").show();
						$(".item_doc").hide();

						$('#file_cnt').text(totalCounts.fileCnt);
						$('#folder_cnt').text(totalCounts.folderCnt);
					} else if (page.navigation.data.selected.naviType === "ITEM") {
						$(".etc_info").show();
						$(".folder_doc").hide();
						$(".item_doc").show();

						$('#item_cnt').text(totalCounts.itemCnt);
					}
				}
			},

			// 폴더 하위에 gridData가 없을 경우 gridUpDocIdInfo 처리
			handleEmptyGrid() {
				const gridUpDocIdInfo = this.data.upDocInfo;
				const breadCrumbList = this.data.breadCrumbList;

				if (!gridUpDocIdInfo || !Array.isArray(breadCrumbList) || breadCrumbList.length === 0) {
					console.warn("gridUpDocIdInfo 또는 breadCrumbList가 올바르지 않습니다.");
					return;
				}

				const lastBreadCrumb = breadCrumbList[breadCrumbList.length - 1];
				let shouldAdd = false;

				// gridUpDocIdInfo 추가 여부 판단
				if (gridUpDocIdInfo.upDocId === "#") {
					shouldAdd = gridUpDocIdInfo.naviId === lastBreadCrumb.naviId;	// 최상위 폴더
				} else {
					shouldAdd = gridUpDocIdInfo.upDocId === lastBreadCrumb.docId;	// 하위 폴더
				}

				if (shouldAdd) {
					const exists = breadCrumbList.some(breadcrumb =>
						breadcrumb.naviId === gridUpDocIdInfo.naviId &&
						breadcrumb.docId === gridUpDocIdInfo.docId
					);

					if (!exists) {
						breadCrumbList.push(gridUpDocIdInfo);

						// 브레드크럼 업데이트 함수 호출
						page.document.setDocBreadcrumb();
					}
				}
			},

			// breadCrumbList에 중복되지 않게 업데이트
			updateBreadCrumbList(docList) {
				docList.forEach(doc => {
					const exists = page.document.data.breadCrumbList.some(breadcrumb =>
						breadcrumb.naviId === doc.naviId && breadcrumb.docId === doc.docId
					);

					if (!exists) {
						page.document.data.breadCrumbList.push(doc);
					}
				});

				// 브레드크럼 업데이트 함수 호출
				page.document.setDocBreadcrumb();
			},

			/* 네비게이션 경로 클릭시 브레드크럼(네비게이션바) 업데이트 함수 */
			setDocBreadcrumb() {
				const breadcrumbContainer = $("#breadcrumb-container");
				breadcrumbContainer.empty(); // 기존 브레드크럼 초기화
				breadcrumbContainer.css('visibility', 'visible');

				this.data.breadCrumbList.forEach((crumb, index) => {
					const maxLength = 23;
					let docNm = crumb.docNm;
					let dsplyDocNm = docNm.length > maxLength ? docNm.substring(0, maxLength) + "..." : docNm;

					const crumbElement = $("<a>")
						.text(dsplyDocNm)
						.data("upDocData", { docId: crumb.docId, naviNo: crumb.naviNo, naviId: crumb.naviId })
						.css("cursor", "pointer");

					// 브레드크럼 구분자 추가
					if (index > 0) {
						const separator = $("<span></span>").text(" > ");
						breadcrumbContainer.append(separator);
					}
					breadcrumbContainer.append(crumbElement);

					// 클릭 이벤트 추가
					crumbElement.on("click", () => {
						page.searchClear(false, true);	// 검색 초기화
						page.perPageClear();			// perPage 초기화

						let upDocData = $(crumbElement).data("upDocData");

						//브레드 크럼이 문서의 최상위(=네비게이션)일 경우 문서 정보 초기화 및 네비게이션 선택 변경.
						if (!upDocData.docId) {
							this.data.upDocInfo.docId = "#";
							this.data.upDocInfo.docNo = null;
							this.data.upDocInfo.docNm = crumb.docNm;

							// 기존 선택된 네비게이션 노드 해제 및 새로운 노드 선택
							page.tree.obj.jstree('deselect_all');
							page.tree.obj.jstree('select_node', upDocData.naviId);
						} else {
							//서버 데이터 요청
							let docListGet = {
								naviId: upDocData.naviId,
								upDocId: upDocData.docId
							}
							this.grid.readData(1, docListGet, true);
						}


						// 브레드크럼 업데이트
						this.data.breadCrumbList = this.data.breadCrumbList.slice(0, index + 1);
						this.data.upDocInfo.breadCrumb = this.data.breadCrumbList.map((crumb) => crumb.docNm).join(" > ");

						this.setDocBreadcrumb();
					});
				});
			},

			// Grid 문서 검색
			search() {
				let columnNm = $('select[name="doc_search_select"]').val();
				let text = $('input[name="doc_search_text"]').val().trim();

				// 검색 카테고리 선택 없을 시 반환.
				if (!columnNm) {
					gaiaPortal.customAlert("{{ message('msg.003') }}");	// 구분을 선택해주세요.
					return;
				}

				// 검색어가 없는 경우 searchData를 초기화하고 전체 리스트를 조회
				if (!text) {
					page.searchClear(false, true);

				} else {
					// 검색어가 있으면 searchData에 저장 후 리스트 조회
					this.data.searchData = {
						searchText: text,
						columnNm: columnNm
					};
					this.isSearch = true;

					this.requestData.searchText = text;
					this.requestData.columnNm = columnNm;
				}

				this.grid.readData(1, this.requestData, true);

			},

			//검색 콤보박스 생성
			setSearchComboBox(columnData) {
				const searchSelect = $("#doc_search_select");

				// 초기화: 기존 옵션 제거
				searchSelect.empty();

				// 기본 옵션 추가 (필요하면 제거 가능) - 구분 => 이름/수정자
				searchSelect.append(`<option value="">{{ message('item.com.083') }}</option>
										<option value="doc_nm">{{ message('item.com.024') }}</option>
										<option value="chg_id">{{ message('item.com.036') }}</option>`);

				// propertyList를 순회하며 옵션 추가
				if (columnData && Array.isArray(columnData)) {
					columnData.forEach((property) => {
						const option = `<option value="${property.attrbt_cd}">${property.attrbt_nm}</option>`;
						searchSelect.append(option);
					});
				} else {
					gaiaPortal.customAlert("Invalid columnData structure:", columnData);
				}

			},

			//문서 삭제
			async delete() {
				let docIdList = [];
				const gridData = this.grid.getData();

				const folders = []; // 폴더만 저장
				const files = []; 	// 파일만 저장

				// 선택된 항목을 폴더와 파일로 분리
				for (const item of gridData) {
					if (item._attributes.checked) {
						if (item.doc_type === 'FOLDR') {
							folders.push(item);
						} else {
							files.push(item);
						}
					}
				}

				// 체크된 데이터가 없으면 알림창 표시
				if (folders.length === 0 && files.length === 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.054') }}"); // 삭제할 문서를 선택해주세요.
					return;
				}

				let folderDetails = []; 	// 하위 문서 정보
				let totalFileCount = 0; 	// 하위 파일 총 개수
				let totalFolderCount = 0; 	// 하위 폴더 총 개수

				if (folders.length > 0) {
					folderDetails = await Promise.all(
						folders.map((folder) => {
							const requestData = { docId: folder.doc_id };

							return new Promise((resolve, reject) => {
								gaiaCommon.post("api/document/hierarchy/count", requestData, function (response) {
									if (response) {
										const fileCnt = response.details.fileFolderCount.files;
										const folderCnt = response.details.fileFolderCount.folders;

										// 파일 및 폴더 개수 누적
										totalFileCount += fileCnt;
										totalFolderCount += folderCnt;

										resolve({ folder, fileCnt, folderCnt });
									} else {
										reject(new Error("Failed to fetch hierarchy count"));
									}
								});
							});
						})
					).catch((error) => {
						console.error("Error processing folder deletion:", error);
						gaiaPortal.customAlert("{{ message('msg.060') }}"); // 서버와의 통신 중 오류가 발생했습니다.
						return [];
					});
				}

				// 폴더와 파일에 대해 한 번만 사용자 확인
				if (folders.length > 0 || files.length > 0) {
					const message = totalFileCount > 0 || totalFolderCount > 0
						? "{{ message('msg.doc.055') }}" // 선택된 문서 중 폴더에 하위 문서가 존재합니다. 정말로 삭제하시겠습니까?
						: "{{ message('msg.doc.056') }}"; // 선택된 문서를 삭제하시겠습니까?

					const userConfirmed = await new Promise((resolve) => {
						gaiaPortal.customConfirm(
							"{{ message('item.doc.070') }}",	// 문서 삭제
							"{{ message('item.doc.070') }}",
							message,
							() => resolve(true),
							() => resolve(false)
						);
					});

					if (userConfirmed) {
						// 폴더 ID 추가
						folderDetails.forEach((detail) => docIdList.push(detail.folder.doc_id));

						// 파일 ID 추가
						files.forEach((file) => docIdList.push(file.doc_id));

						//서버로 전송
						gaiaCommon.post("api/document/list/delete", { docIdList }, function (result) {
							gaiaPortal.customAlert("{{ message('msg.doc.010') }}");	// 문서가 삭제되었습니다.
							page.refresh(false, true);
						});
					}

				} else {
					gaiaPortal.customAlert("{{ message('msg.doc.057') }}"); // 삭제할 문서가 존재하지 않습니다.
					return;
				}

			},

			//문서 이동 모달창 이동
			moveDocMove() {
				this.docMoveCopyMode = "move";
				const selectedDocData = this.grid.getCheckedRows();
				const docPath = page.document.data.upDocInfo.breadCrumb;

				if (selectedDocData.length <= 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.058') }}"); // 이동할 문서를 선택해주세요.
					return;
				}

				this.data.selected = selectedDocData;

				this.setDocMoveCopyTreeInit();
				$("#current_doc_path").val(docPath);
				$("#doc_chg_tit").text("{{ message('item.doc.042') }}"); // 문서 이동
				$("#path_nm").text("{{ message('item.doc.074') }}");	// 이동할 경로

				$("#docMoveCopy").addClass('open');
			},

			//문서 복사 모달창 이동
			moveDocCopy() {
				this.docMoveCopyMode = "copy";
				const selectedDocData = this.grid.getCheckedRows();
				const docPath = page.document.data.upDocInfo.breadCrumb;

				if (selectedDocData.length <= 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.059') }}"); // 복사할 문서를 선택해주세요.
					return;
				}

				this.data.selected = selectedDocData;

				this.setDocMoveCopyTreeInit();
				// $("#current_doc_path").val(selectedDocData[0].doc_path);
				$("#current_doc_path").val(docPath);
				$("#doc_chg_tit").text("{{ message('item.doc.057') }}"); 	// 문서 복사
				$("#path_nm").text("{{ message('item.doc.075') }}"); 		// 복사할 경로

				$("#docMoveCopy").addClass('open');

			},

			//문서 이동,복사 경로 트리 설정
			setDocMoveCopyTreeInit() {
				// 최상위 노드 값 가져오기
				const treeInstance = $('#jstree').jstree(true); 		// jstree 인스턴스 가져오기
				const topNode = treeInstance.get_node('#').children[0]; // 최상위 노드 ID 가져오기

				// doc_type이 'FOLDR'인 항목의 doc_id 추출
				const docFolderIdList = this.data.selected.filter(item => item.doc_type === 'FOLDR') // doc_type이 'FOLDR'인 항목만 필터링
					.map(item => item.doc_id);               // doc_id만 추출

				//네비 + 문서(폴더) 경로 트리 데이터 설정
				const reqData = {
					topNaviId: topNode,
					docFolderIdList: docFolderIdList
				};

				// 기존 jstree 초기화
				if ($.jstree.reference("#full_tree")) {
					$("#full_tree").jstree("destroy").empty(); // 기존 jstree 해제
				}

				this.fullTree = $("#full_tree").jstree({
					plugins: ["search"],
					core: {
						data: function (obj, cb) {
							gaiaCommon.post("api/document/full-tree", reqData, function (result) {
								var data = [];
								if (result.details?.fullTree) {
									result.details.fullTree.forEach((tree, index) => {
										let text = tree.item_nm;
										let maxLength = 50;  // 50자 이상이면 자름.
										let displayText = text.length > maxLength ? text.substring(0, maxLength) + "..." : text;

										data.push({
											id: tree.item_id,
											parent: tree.up_item_id || "#",
											text: displayText,
											state: { opened: true },
											data: { tree },
											icons: 'fa-solid fa-caret-right',
											li_attr: { title: tree.item_nm }

										});
									});
									cb.call(obj, data);
								}
							});
						},
						check_callback: true,
						themes: {
							"theme": "default",
							"dots": false,
							"responsive": false,
							"icons": false
						}
					},
				});

				/*네비게이션 바 클릭 이벤트 처리*/
				this.fullTree.on("select_node.jstree", function (e, data) {
					// 현재 노드의 경로를 추적하여 breadCrumb에 추가
					const selectedNode = data.node;
					const itemType = selectedNode.data.tree.item_type;
					let breadCrumbList = [];

					// 최상위 노드는 선택 불가
					if (selectedNode.parent === '#') {
						gaiaPortal.customAlert("{{ message('msg.doc.123') }}"); // 최상위 경로로 변경할 수 없습니다.
						page.document.fullTree.jstree(true).deselect_all();
						return;
					}

					// 선택한 경로가 ITEM형 타입일 경우
					if (itemType === 'ITEM') {
						gaiaPortal.customAlert("{{ message('msg.doc.060') }}"); // 해당 경로로 변경할 수 없습니다.(경로 종류: 아이템형)
						page.document.fullTree.jstree(true).deselect_all();
						return;
					}

					let currentNode = selectedNode;
					while (currentNode && currentNode.id !== "#") {
						let data = {
							naviId: currentNode.data.item_id,
							naviNo: currentNode.data.item_no,
							docNm: currentNode.text,
						}
						breadCrumbList.unshift(data); // 상위 노드부터 배열에 추가
						currentNode = page.document.fullTree.jstree("get_node", currentNode.parent);
					}

					// 같은 경로 선택 방지
					const breadCrumb = breadCrumbList.map(item => item.docNm).join(" > ");
					const currentPath = $("#current_doc_path").val(); 			// 현재 경로 값

					if (currentPath === breadCrumb) {
						gaiaPortal.customAlert("{{ message('msg.doc.061') }}"); // 같은 위치에는 변경할 수 없습니다.
						page.document.fullTree.jstree(true).deselect_all();
						return;
					}

					$("#chg_doc_path").val(breadCrumb);							// 변경할 경로
					$("#source_item_id").val(data.node.id);						// 변경할 경로의 id
					$("#source_item_no").val(data.node.data.tree.item_no);		// 변경할 경로의 no
					$("#source_item_kind").val(data.node.data.tree.item_kind);	// 변경할 경로의 타입 (NAVI / DOC)

				});
			},

			//문서 복사, 이동 저장
			saveDocMoveCopy() {
				if (this.docMoveCopyMode === 'move') {
					this.docMove();
				} else if (this.docMoveCopyMode === 'copy') {
					this.docCopy();
				} else {
					gaiaPortal.customAlert("{{ message('msg.061') }}"); // 유효하지 않은 값입니다.
				}
				this.docMoveCopyMode = null; //모드 초기화
			},

			//문서 이동
			docMove() {
				const sourceItemId = $("#source_item_id").val();
				const sourceItemNo = $("#source_item_no").val();
				const sourceItemKind = $("#source_item_kind").val();
				const sourceItemPath = $("#chg_doc_path").val();

				// 이동 변경 값이 없는 경우
				if (!sourceItemId || !sourceItemNo || !sourceItemKind) {
					gaiaPortal.customAlert("{{ message('msg.doc.062') }}"); // 이동 대상 정보가 올바르지 않습니다. 다시 시도해주세요.
					return;
				}

				if (this.data.selected.length <= 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.064') }}"); // 이동할 문서가 선택되지 않았습니다.
					this.data.selected = {};
					page.popup.closePopup("docMoveCopy");
					return;
				}

				let selectedDocDataList = this.data.selected;
				// 필요한 정보만 추출
				const targetDocIdList = selectedDocDataList.map(item => (item.doc_id));

				//서버 전송
				const reqData = {
					sourceItemId: sourceItemId,
					sourceItemNo: sourceItemNo,
					sourceItemKind: sourceItemKind,
					sourceItemPath: sourceItemPath,
					targetDocIdList: targetDocIdList
				}

				gaiaCommon.post("api/document/move", reqData, function (result) {
					if (result.ok) {
						const moveDoc = result.details.moveDoc;

						//선택 문서 초기화
						page.document.data.selected = {};
						gaiaPortal.customAlert("{{ message('msg.doc.063') }}"); // 문서가 이동되었습니다.
						page.popup.closePopup("docMoveCopy");

						//문서가 이동된 위치로 이동.
						page.upDocId = sourceItemKind === 'DOC' ? sourceItemId : "#"; // 이동한 문서 Id 값 설정
						page.tree.selectNode(moveDoc[0].naviId);					  // 이동한 네비게이션 위치 선택

						if (moveDoc[0].docId) {
							let lastDoc; 							// 이동한 최하위 문서
							moveDoc.forEach(doc => {				// 브레드크럼 정보 업데이트
								page.document.data.breadCrumbList.push(doc);
								lastDoc = doc;
							});
							page.document.setDocBreadcrumb();

							//이동한 문서 위치의 서버데이터 요청
							let docListGet = {
								naviId: lastDoc.naviId,
								upDocId: lastDoc.docId
							}
							page.document.grid.readData(1, docListGet, true);
						}


					} else {
						gaiaPortal.customAlert("{{ message('msg.060') }}"); // 서버와의 통신 중 오류가 발생했습니다.
					}
				});
			},

			//문서 복사
			docCopy() {
				const sourceItemId = $("#source_item_id").val();
				const sourceItemNo = $("#source_item_no").val();
				const sourceItemKind = $("#source_item_kind").val();
				const sourceItemPath = $("#chg_doc_path").val();

				// 이동 변경 값이 없는 경우
				if (!sourceItemId || !sourceItemNo || !sourceItemKind) {
					gaiaPortal.customAlert("{{ message('msg.doc.065') }}"); // 복사 대상 정보가 올바르지 않습니다. 다시 시도해주세요.
					return;
				}

				if (this.data.selected.length <= 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.067') }}"); // 복사할 문서가 선택되지 않았습니다.
					this.data.selected = {};
					page.popup.closePopup("docMoveCopy");
					return;
				}

				let selectedDocDataList = this.data.selected;
				// 필요한 정보만 추출
				const targetDocIdList = selectedDocDataList.map(item => (item.doc_id));

				//서버 전송
				const reqData = {
					sourceItemId: sourceItemId,
					sourceItemNo: sourceItemNo,
					sourceItemKind: sourceItemKind,
					sourceItemPath: sourceItemPath,
					targetDocIdList: targetDocIdList
				}

				gaiaCommon.post("api/document/copy", reqData, function (result) {
					if (result.ok) {
						const copyDoc = result.details.copyDoc;

						//선택 문서 초기화
						page.document.data.selected = {};
						gaiaPortal.customAlert("{{ message('msg.doc.066') }}"); // 문서가 복사되었습니다.
						// page.refresh(false, true);
						page.popup.closePopup("docMoveCopy");

						//문서가 복사된 위치로 이동.
						page.upDocId = sourceItemKind === 'DOC' ? sourceItemId : "#"; // 복사한 문서 Id 값 설정
						page.tree.selectNode(copyDoc[0].naviId);					  // 복사한 네비게이션 위치 선택

						if (copyDoc[0].docId) {
							let lastDoc; 							// 복사한 최하위 문서
							moveDoc.forEach(doc => {				// 브레드크럼 정보 업데이트
								page.document.data.breadCrumbList.push(doc);
								lastDoc = doc;
							});
							page.document.setDocBreadcrumb();

							//복사한 문서 위치의 서버데이터 요청
							let docListGet = {
								naviId: lastDoc.naviId,
								upDocId: lastDoc.docId
							}
							page.document.grid.readData(1, docListGet, true);
						}

					} else {
						gaiaPortal.customAlert("{{ message('msg.060') }}"); // 서버와의 통신 중 오류가 발생했습니다.
					}
				});
			},

			//폴더 생성 모달창 이동
			moveAddFolder() {
				if (!page.navigation.data.selected.naviId) {
					gaiaPortal.customAlert("{{ message('msg.doc.069') }}"); // 네비게이션을 선택하고 폴더생성을 눌러주세요.
					return;
				}

				// 문서 경로가 최상위 경로인 경우 생성 불가
				if (page.navigation.data.selected.upNaviId === '#') {
					gaiaPortal.customAlert("{{ message('msg.doc.068') }}"); // 최상위 네비게이션에는 폴더를 생성 할 수 없습니다.
					return;
				}

				$('#addFolderNm').val('');
				$('#folderNmValid').val('N');
				$("#folder_c_tit").text("{{ message('btn.032') }}"); // 폴더 생성
				$('#insertFolder').addClass('open');
			},

			//폴더명 중복체크
			checkFolderExist() {
				let addFolderNm = $('#addFolderNm').val();

				if (!addFolderNm) {
					gaiaPortal.customAlert("{{ message('msg.doc.073') }}"); // 폴더명을 입력해주세요.
					$('#addFolderNm').focus();
					return;
				}

				if (!addRegex.test(addFolderNm)) {
					gaiaPortal.customAlert("{{ message('msg.doc.072') }}"); // 폴더명에 사용 할 수 없는 문자가 포함되어 있습니다.
					$('#addFolderNm').focus();
					return;
				}

				const requestData = {
					naviId: page.navigation.data.selected.naviId,
					upDocId: page.document.data.upDocInfo.docId ? page.document.data.upDocInfo.docId : "#",
					docNm: addFolderNm,
				};

				// 서버 전송
				gaiaCommon.post("/api/document/folder/check/exist", requestData, function (result) {
					if (result.details?.checkFolderExist === 'Y') {
						gaiaPortal.customAlert("{{ message('msg.doc.070') }}"); // 이미 사용중인 폴더명입니다.
						$('#addFolderNm').focus();
					} else {
						$('#folderNmValid').val('Y');
						gaiaPortal.customAlert("{{ message('msg.doc.071') }}"); // 사용 가능한 폴더명입니다.
					}
				});

			},

			//폴더 생성
			addFolder() {
				// 입력값 가져오기
				const addFolderNm = $('#addFolderNm').val();
				const isNameValid = $('#folderNmValid').val() === 'Y';

				// 폴더명 입력 확인
				if (!addFolderNm) {
					gaiaPortal.customAlert("{{ message('msg.doc.073') }}"); // 폴더명을 입력해주세요.
					$('#addFolderNm').focus();
					return;
				}

				// 폴더명 중복 체크 여부 확인
				if (!isNameValid) {
					gaiaPortal.customAlert("{{ message('msg.doc.074') }}"); // 폴더명 중복체크를 해주세요.
					$('#addFolderNm').focus();
					return;
				}

				// 서버로 전송할 데이터 생성
				const data = {
					naviNo: page.navigation.data.selected.naviNo,
					naviId: page.navigation.data.selected.naviId,
					upDocNo: page.document.data.upDocInfo.docNo ? page.document.data.upDocInfo.docNo : 0,
					upDocId: page.document.data.upDocInfo.docId ? page.document.data.upDocInfo.docId : "#",
					docPath: page.document.data.upDocInfo.breadCrumb,
					docNm: addFolderNm,
				};

				// 서버 요청
				gaiaCommon.post("/api/document/file-folder/create", data, (result) => {
					if (result.ok) {
						gaiaPortal.customAlert("{{ message('msg.doc.075') }}"); // 신규폴더가 생성되었습니다.
						$('#insertFolder').removeClass('open');
						page.refresh(false, true);
					} else {
						gaiaPortal.customAlert(result.message || "{{ message('msg.doc.076') }}"); // 폴더 생성 중 오류가 발생했습니다.
					}
				}, (error) => {
					gaiaPortal.customAlert(error.message || "{{ message('msg.060') }}"); // 서버와의 통신 중 오류가 발생했습니다.
				});

			},

			//문서 이름 변경 모달창 이동
			moveRename(rowKey) {
				//기존 데이터 초기화
				$("#after_doc_nm").val("");
				$("#doc_breadcrumb").text("");

				const rowData = page.document.grid.getRow(rowKey);
				this.data.selected = rowData; 	//선택한 문서 데이터

				//문서 데이터 설정
				$("#before_doc_nm").val(rowData.doc_nm);
				// $("#doc_breadcrumb").text(rowData.doc_path);
				$("#doc_breadcrumb").text(page.document.data.upDocInfo.breadCrumb);
				$("#doc_u_tit").text("{{ message('item.doc.031') }}"); // 이름 변경


				//모달창 열기
				$('#updateDocName').addClass('open');
			},

			//문서 이름 중복체크
			reDocNmExist() {
				const reDocNm = $('#after_doc_nm').val();

				if (!reDocNm) {
					gaiaPortal.customAlert("{{ message('msg.doc.080') }}"); // 문서 명을 입력해주세요.
					$('#after_doc_nm').focus();
					return;
				}

				if (!addRegex.test(reDocNm)) {
					gaiaPortal.customAlert("{{ message('msg.doc.079') }}"); // 문서 명에 사용 할 수 없는 문자가 포함되어 있습니다.
					return;
				}

				const requestData = {
					naviId: page.navigation.data.selected.naviId,
					upDocId: page.document.data.upDocInfo.docId || "#",
					docNm: reDocNm,
				};

				gaiaCommon.post("/api/document/name/exist", requestData, (result) => {
					if (result.details?.docNmExist === 'Y') {
						gaiaPortal.customAlert("{{ message('msg.doc.077') }}"); // 이미 사용중인 문서 명입니다.
						return;
					}

					$('#docNmValid').val('Y');
					gaiaPortal.customAlert("{{ message('msg.doc.078') }}"); // 사용 가능한 문서 명입니다.
				});

			},

			//문서 이름 변경
			docRename() {
				// 입력값 수집 및 XSS 방지
				const sanitizedInput = (val) => val?.replace(/[<>]/g, "") || "";

				const newDocNm = $("#after_doc_nm").val();
				const isValidChecked = $('#docNmValid').val();

				if (!newDocNm) {
					gaiaPortal.customAlert("{{ message('msg.doc.081') }}"); // 변경할 문서 명을 입력해주세요.
					$("#after_doc_nm").focus();
					return false;
				}

				if (isValidChecked === 'N') {
					gaiaPortal.customAlert("{{ message('msg.doc.082') }}"); // 중복체크를 진행해주세요.
					$("#after_doc_nm").focus();
					return false;
				}

				let data = {
					docNm: sanitizedInput(newDocNm),
					docNo: this.data.selected.doc_no,
					docId: this.data.selected.doc_id
				}

				gaiaCommon.post("/api/document/name/update", data, function (result) {
					if (result.ok) {
						gaiaPortal.customAlert("{{ message('msg.doc.083') }}"); // 문서 명이 변경되었습니다.

						$('#updateDocName').removeClass('open');
						page.document.data.selected = {}; //선택된 데이터 초기화
						page.refresh(false, true);
					} else {
						gaiaPortal.customAlert("{{ message('msg.doc.084') }}"); // 문서 명 변경에 실패했습니다.
					}
				});
			},

			//문서 속성 정보 수정 - 모달창 이동
			moveUpdateProperty(rowKey) {
				const naviId = page.navigation.data.selected.naviId;
				const rowData = page.document.grid.getRow(rowKey);

				$("#doc_property_u_tit").text("{{ message('item.doc.034') }}"); // 속성 정보 수정

				//선택한 문서 데이터 설정
				this.data.selected = rowData;

				const data = {
					naviId: naviId,
					actionTy: "update"
				}

				// 문서 이름 기본값 설정
				$("#p_docNm").val(rowData.doc_nm);

				//선택된 트리 노드의 속성 데이터 가져와서 html 요소 그리기
				gaiaCommon.post("/api/document/add-item/html/create", data, function (result) {
					const dynamicFieldsContainer = document.querySelector("#updateProperty #dynamicFieldsContainer_update");
					dynamicFieldsContainer.querySelectorAll(".row.dynamic-row").forEach(row => row.remove());

					const propertyList = result.details.propertyList;
					
					// console.log(propertyList[0]);
					let attrCdList = [];
					let makeAttachment = false; // 파일 업로드 수정 입력창 여부
					if(propertyList.length > 0) {
						propertyList.forEach(item => {
							const rowDiv = document.createElement("div");
							rowDiv.classList.add("row", "dynamic-row");
	
							const options = item.options ? JSON.parse(item.options.value) : []; // options가 있는 경우에만 파싱
	
							let inputHtml = "";
	
							if (item.attrbt_type === 'DAT') {
								inputHtml = `<input type="date" class="w-md date" id="${item.attrbt_cd}" name="${item.attrbt_cd}" />`;
							} 
							else if (item.attrbt_type === 'NUM') {
								inputHtml = `<input type="text" class="number" id="${item.attrbt_cd}" name="${item.attrbt_cd}" />`;
							} 
							else if (item.attrbt_type === 'SEL') {
								inputHtml = `<div><span class="selectbox" style="z-index: 1;"><select id="${item.attrbt_cd}" name="${item.attrbt_cd}"><option value="" disabled>{{ message("item.com.005") }}</option>`;
								options.forEach(opt => {
									inputHtml += `<option value="${opt.value}">${opt.label}</option>`;
								});
								inputHtml += `</select></span></div>`;
							} 
							else if (item.attrbt_type === 'TXTA') {
								inputHtml = `<textarea class="maxlength" id="${item.attrbt_cd}" name="${item.attrbt_cd}" maxlength="2000"></textarea>`;
							} 
							else if (item.attrbt_type === 'ATCH') {
								inputHtml = `<div class=""><input type="file" class="attach_file" id="${item.attrbt_cd}" name="${item.attrbt_cd}" style="pointer-events: auto;" /></div>`; // style="pointer-events: auto;" component.css에 pointer-events: none; 으로 막혀있음.
							}
							else {
								inputHtml = `<input type="text" id="${item.attrbt_cd}" name="${item.attrbt_cd}" maxlength="200" />`;
							}
	
							rowDiv.innerHTML = `
								<div class="col">
									<div class="form_label required">${item.attrbt_name}</div>
									<div class="form_data">${inputHtml}</div>
								</div>
							`;
	
							dynamicFieldsContainer.appendChild(rowDiv);
	
							attrCdList.push({ attrbtCd: item.attrbt_cd, attrbtNo: item.attrbt_no }); // 속성 코드 저장
	
							// 기존 값 세팅
							$(`#dynamicFieldsContainer_update #${item.attrbt_cd}`).val(rowData[item.attrbt_cd]);

							/* 이벤트 리스너 추가*/
							// .number 클래스에 이벤트 리스너 추가
							rowDiv.querySelectorAll(".number").forEach(input => {
								input.addEventListener("input", function () {
									this.value = this.value.replace(/[^0-9]/g, ""); // 숫자가 아닌 문자는 제거
								});
							});

							// .maxlength 클래스에 이벤트 리스너 추가

							// .attach_file 클래스에 이벤트 리스너 추가
							
						});
					}

					page.document.attrCdList = attrCdList;

					//그리드 행의 타입이 item형인 경우 파일 업로드 수정 입력창 띄우기
					if (rowData.doc_type === 'ITEM') {
						$("#item_update_files").show();
						page.item.fileUpload.init("update", "updateProperty");
						page.item.fileUpload.currentDocNo = rowData.doc_no;

						const attachments = rowData.attachments || [];

						// 파일 목록 업데이트
						const fileList = $("#updateProperty #fileList");
						if (fileList) {
							page.item.fileUpload.clearFileList(); // 기존 파일 목록 지우기
							if (attachments.length > 0) {
								page.item.fileUpload.processFetchedFiles(attachments); // 새 파일 목록 추가
							} else {
								page.item.fileUpload.updateFileSizeSummary(); // 파일 사이즈 요약 업데이트
								page.item.fileUpload.updateFileCount(); // 파일 개수 업데이트
							}
						}
					} 
					else {
						$("#item_update_files").hide(); //파일 업로드 수정 입력창 숨김.
					}

					$('#updateProperty').addClass('open');
				});






				// //선택된 트리 노드의 속성 데이터 가져와서 html 요소 그리기
				// gaiaCommon.post("/api/document/add-item/html/create", data, function (result) {
				// 	// 동적 요소를 추가할 위치
				// 	const dynamicFieldsContainer = document.querySelector("#updateProperty #dynamicFieldsContainer_update");

				// 	// // 기존 동적으로 생성된 요소 제거
				// 	// $("#item_docNm").val("");
				// 	dynamicFieldsContainer.querySelectorAll(".row.dynamic-row").forEach(row => row.remove());

				// 	// 서버 html데이터를 기반으로 요소 생성
				// 	let attrCdList = []; // 속성 코드 리스트
				// 	result.details.propertyToHtml.forEach(item => {

				// 		// 속성 코드 저장
				// 		attrCdList.push({ attrbtCd: item.attrbt_cd, attrbtNo: item.attrbt_no });

				// 		const rowDiv = document.createElement("div");
				// 		rowDiv.classList.add("row", "dynamic-row"); // "dynamic-row" 클래스로 동적 생성임을 표시

				// 		// html_element를 DOMParser로 파싱
				// 		const parser = new DOMParser();
				// 		const parsedHtml = parser.parseFromString(item.html_element, "text/html");

				// 		// rowDiv에 파싱된 HTML 추가
				// 		rowDiv.innerHTML = `
				// 			<div class="col">
				// 				${parsedHtml.body.innerHTML}
				// 			</div>
				// 		`;

				// 		// 즉시 .number 클래스에 이벤트 리스너 추가
				// 		rowDiv.querySelectorAll(".number").forEach(input => {
				// 			input.addEventListener("input", function () {
				// 				this.value = this.value.replace(/[^0-9]/g, ""); // 숫자가 아닌 문자는 제거
				// 			});
				// 		});

				// 		dynamicFieldsContainer.appendChild(rowDiv); // 요소 추가 위치 변경

				// 		//기존 데이터 세팅
				// 		$(`#dynamicFieldsContainer_update #${item.attrbt_cd}`).val(rowData[item.attrbt_cd]); //행 데이터 바인딩
				// 	});

				// 	page.document.attrCdList = attrCdList;

				// 	//그리드 행의 타입이 item형인 경우 파일 업로드 수정 입력창 띄우기
				// 	if (rowData.doc_type === 'ITEM') {
				// 		$("#item_update_files").show();
				// 		page.item.fileUpload.init("update", "updateProperty");
				// 		page.item.fileUpload.currentDocNo = rowData.doc_no;

				// 		const attachments = rowData.attachments || [];

				// 		// 파일 목록 업데이트
				// 		const fileList = $("#updateProperty #fileList");
				// 		if (fileList) {
				// 			page.item.fileUpload.clearFileList(); // 기존 파일 목록 지우기
				// 			if (attachments.length > 0) {
				// 				page.item.fileUpload.processFetchedFiles(attachments); // 새 파일 목록 추가
				// 			} else {
				// 				page.item.fileUpload.updateFileSizeSummary(); // 파일 사이즈 요약 업데이트
				// 				page.item.fileUpload.updateFileCount(); // 파일 개수 업데이트
				// 			}
				// 		}
				// 	} 
				// 	else {
				// 		$("#item_update_files").hide(); //파일 업로드 수정 입력창 숨김.
				// 	}

				// 	$('#updateProperty').addClass('open');
				// });
			},

			//문서 속성 정보 수정
			updateProperty() {
				let requiredValid = true;
				let fileDataModified = false; // 파일 수정 여부를 확인

				let attrbtData = {
					docNo: page.document.data.selected.doc_no,
					docId: page.document.data.selected.doc_id,
					attrbtDataList: []
				}

				// 추가 속성 필드 확인
				page.document.attrCdList.forEach(item => {
					const value = $(`#dynamicFieldsContainer_update #${item.attrbtCd}`).val();
					if (!value || /[<>]/g.test(value)) {
						gaiaPortal.customAlert("{{ message('msg.062') }}"); // 필수 값이 누락되었거나 잘못된 값이 포함되었습니다.
						$(`#${item.attrbtCd}`).focus();
						console.log(item.attrbtCd, value);
						requiredValid = false;
						return;
					}
					attrbtData.attrbtDataList.push({
						attrbtCntnts: value.replace(/[<>]/g, ''), // 특수문자 < > 제거
						attrbtCd: item.attrbtCd,
						attrbtNo: item.attrbtNo
					});
				});

				if (!requiredValid) return;

				const formData = new FormData();
				formData.append("attrbtData", new Blob([JSON.stringify(attrbtData)], { type: "application/json" }));

				//속성 수정할 문서가 아이템형인 경우 혹은 첨부파일 수정 입력창이 있는 경우
				if (page.document.data.selected.doc_type === "ITEM") {
					// 제거된 파일 정보 추가
					if (page.item.fileUpload.currentDocNo && page.item.fileUpload.removedFiles[page.item.fileUpload.currentDocNo]) {
						page.item.fileUpload.removedFiles[page.item.fileUpload.currentDocNo].forEach(file => {
							formData.append('removedFiles[]', file.fileNo);
							fileDataModified = true; // 파일 데이터가 수정됨
						});
					}

					// 파일 첨부 창에서 자동으로 추가된 files 필드 제거
					formData.delete('files');
					// 기존 파일 목록인 existingFiles만 수동으로 formData에 추가
					page.item.fileUpload.existingFiles.forEach(file => {
						formData.append('files', file);
						fileDataModified = true; // 파일 데이터가 수정됨
					});
				}

				// 서버에 데이터 전송
				gaiaCommon.postForm("/api/document/property-data/update",formData,(response)=>{
					if (response.ok) {
						gaiaPortal.customAlert("{{ message('msg.doc.085') }}"); // 속성 데이터가 수정되었습니다.

						// 파일이 수정된 경우에만 모든 파일 제거 함수 실행
						if (fileDataModified) {
							page.item.fileUpload.removeAllFiles();
						}

						//모달창 닫기
						page.popup.closePopup("updateProperty");
						page.refresh(false, true);
					} else {
						gaiaPortal.customAlert(response.message);
					}
				},(error)=>{
					// 로그인 세션 만료의 경우,
					if (error.status === 401) {
						gaiaPortal.customAlert("{{ message('msg.064') }}", function () {
							location.reload();
						});
					} else {
						gaiaPortal.customAlert(error.responseJSON?.message);
					}
				})
			},

			//권한 설정 모달창 이동
			moveSetDocAuthority(rowKey) {
				//권한 모드 - doc
				page.setAuthMode = "doc";
				const rowData = page.document.grid.getRow(rowKey);
				page.document.data.selected = rowData;


				// 선택된 네비게이션 유효성 확인
				if (!page.document.data.selected?.doc_id) {
					gaiaPortal.customAlert("{{ message('msg.doc.086') }}"); // 선택된 문서가 없습니다.
					return;
				}

				const requestData = {
					naviNo: page.navigation.data.selected.naviNo,
					naviId: page.navigation.data.selected.naviId,
					upDocNo: page.document.data.selected.up_doc_no,
					upDocId: page.document.data.selected.up_doc_id,
					docId: page.document.data.selected.doc_id,
					docNo: page.document.data.selected.doc_no,
					pjtNo: page.navigation.data.selected.pjtNo,
					cntrctNo: page.navigation.data.selected.cntrctNo,
				};

				//서버 요청
				gaiaCommon.post("/api/document/document-authority/list", requestData, function (result) {
					$('#authorityAllCheckbox').prop('checked', false);
					const authorityList = result.details?.authorityList || [];
					const rghtTyList = result.details?.rghtTyList || [];

					if (!rghtTyList.length) {
						gaiaPortal.customAlert("{{ message('msg.doc.038') }}"); // 권한정보가 존재하지 않습니다.
						return;
					}

					if (!authorityList.length) {
						gaiaPortal.customAlert("{{ message('msg.doc.040') }}"); // 설정할 권한정보가 없습니다. 상위 경로부터 권한 설정을 하세요.
						return;
					}

					const tableBody = document.querySelector("#list-grid tbody");
					tableBody.innerHTML = ""; // 기존 데이터 삭제
					let checkAllYn = true;

					$.each(result.details?.authorityList, function (index, obj) {
						const row = document.createElement("tr");

						// 셀렉트박스 옵션 생성
						const selectOptions = result.details?.rghtTyList.map(option => {
							const isSelected = option.cmnCd === obj.rghtTy ? "selected" : "";
							return `<option value="${option.cmnCd}" ${isSelected}>${option.cmnCdNm}</option>`;
						}).join("");

						row.innerHTML = `
											<td>
												<label class="form_check">
													<input class="check_mark" type="checkbox" id="checkboxgroup" ${obj.checkyn}>
													<span class="check_label blind">선택</span>
													<input type="hidden" id="rghtNo" value="${obj.rghtNo}">
													<input type="hidden" id="rghtGrpNo" value="${obj.rghtGrpNo}">
													<input type="hidden" id="rghtGrpCd" value="${obj.rghtGrpCd}">
													<input type="hidden" id="oldRghtTy" value="${obj.rghtTy}">
												</label>
											</td>
											<td class="clickable-cell" style="text-align: center; vertical-align: middle;">
												<div style="display: flex; justify-content: center; position: relative;">
													<span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer; padding-left: 5px;">${obj.rghtGrpNmKrn}</span>
													<i class="ic ic-sent-to-back" style="cursor: pointer; margin-left: 10px; visibility: hidden; right: 10px; position: absolute;"></i>
												</div>
											</td>
											<td style="text-align: center; vertical-align: middle;">
												<div style="display: flex; justify-content: left; position: relative;">
													<span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer; padding-left: 5px;">${obj.rghtGrpDscrpt}</span>
												</div>
											</td>
											<td>
												<span class="selectbox">
													<select class="combo_box" id="rghtTy">																	
														<option selected disabled value="">선택</option>
														${selectOptions}
													</select>
												</span>
											</td>
										`;
						if (obj.checkyn !== 'CHECKED') {
							checkAllYn = false;
						}

						// 체크박스 클릭 이벤트 추가
						row.querySelector(".check_mark").addEventListener("change", (e) => {
							if (e.target.checked) {
								checkAllYn = true;

								document.querySelectorAll("#list-grid tbody .check_mark").forEach((checkbox) => {
									if (!checkbox.checked) {
										checkAllYn = false;
									}
								});
								if (checkAllYn) {
									$('#authorityAllCheckbox').prop('checked', true);
								}
							} else {
								$('#authorityAllCheckbox').prop('checked', false);
							}
						});

						row.querySelector(".clickable-cell").addEventListener("mouseover", (event) => {
							row.querySelector(".ic").style.visibility = 'visible';
						});

						row.querySelector(".clickable-cell").addEventListener("mouseout", (event) => {
							row.querySelector(".ic").style.visibility = 'hidden';
						});

						row.querySelector(".ic").addEventListener("click", (event) => {
							const _width = '500';
							const _height = '420';

							let _left = Math.ceil((window.screen.width - _width) / 2);
							_left += window.screenLeft; // 듀얼 모니터일 때
							let _top = Math.ceil((window.screen.height - _height) / 2);

							navigationPopup = window.open('/document/navi/authority/popup?rghtGrpNo=' + obj.rghtGrpNo + '&rghtGrpCd=' + obj.rghtGrpCd, '_blank', 'width=' + _width + ', height=' + _height + ',left=' + _left + ',top=' + _top + ', scrollbars=yes, resizable=yes');
						});

						tableBody.appendChild(row);
					});

					if (checkAllYn) {
						$('#authorityAllCheckbox').prop('checked', true);
					}

					$("#set_authority_tit").text('{{ message("item.doc.066") }}'); // 권한설정
					$('#authority').addClass('open');
				});


			},

			//문서 권한설정 팝업에서 권한 설정 저장하기
			setDocAuthority() {
				let treeAuthorityList = [];
				const rows = document.querySelectorAll("#list-grid tbody .check_mark");

				for (let index = 0; index < rows.length; index++) {
					const checkbox = rows[index];
					const actionType = page.navigation.getActionType(checkbox, index);

					// 유효성 검사 실패 처리
					if (actionType === 'invalid') {
						return null; // 유효성 검사 실패 시 null 반환
					}

					// 변경 사항 있는 데이터만 리스트에 추가
					if (actionType !== 'PASS') {
						const rghtNo = $('input[id="rghtNo"]')[index].value === 'NON' ? null : $('input[id="rghtNo"]')[index].value;
						let treeAuthority = {
							actionType: actionType,
							id: page.document.data.selected.doc_id,
							no: page.document.data.selected.doc_no,
							rghtNo: rghtNo,
							rghtGrpNo: $('input[id="rghtGrpNo"]')[index].value,
							rghtGrpCd: $('input[id="rghtGrpCd"]')[index].value,
							rghtTy: $('select[id="rghtTy"]')[index].value
						}

						treeAuthorityList.push(treeAuthority);
					}
				}

				// 변경사항 확인
				if (!treeAuthorityList) {
					return; // 유효성 검사에서 실패했으므로 함수 종료
				}

				if (!treeAuthorityList.length) {
					gaiaPortal.customAlert('{{ message("msg.doc.041") }}'); // 권한설정 변경사항이 존재하지 않습니다.
					return;
				}

				// 서버 요청
				gaiaCommon.post("/api/document/document-authority/setup", { setAuthorityList: treeAuthorityList }, (result) => {
					gaiaPortal.customAlert('{{ message("msg.doc.042") }}'); // 권한설정을 완료하였습니다.
					$('#authority').removeClass('open');
					page.setAuthMode = null; // 권한 모드 초기화
				});

			},

			//권한 복사
			copyAuthority(rowKey) {
				const currentRowData = page.document.grid.getRow(rowKey);
				page.document.data.selected = currentRowData;

				if (!page.document.data.selected.doc_id) {
					gaiaPortal.customAlert("{{ message('msg.doc.102') }}"); // 문서를 선택해주세요.
					return;
				}

				const copyData = {
					sourceDocNo: page.document.data.selected.doc_no,
					sourceDocId: page.document.data.selected.doc_id,
					upDocNo: page.document.data.selected.up_doc_no,
					upDocId: page.document.data.selected.up_doc_id,
					pjtNo: page.navigation.data.selected.pjtNo,
					cntrctNo: page.navigation.data.selected.cntrctNo,
					naviId: page.navigation.data.selected.naviId,
				};

				const requestData = {
					targetId: copyData.sourceDocId,
					targetNo: copyData.sourceDocNo,
				}

				//해당 네비게이션 권한 존재 여부 확인.
				gaiaCommon.post("/api/document/navigation-authority/copy", requestData, function (result) {
					if (result.details.authorities.length > 0) {
						page.document.data.copiedAuthorityData = copyData;
						gaiaPortal.customAlert("{{ message('msg.doc.044') }}"); // 복사되었습니다.
					} else {
						gaiaPortal.customAlert("{{ message('msg.doc.045') }}"); // 권한이 존재하지 않습니다.
						page.document.data.copiedAuthorityData = {}; // 초기화
						return false;
					}
				});

			},

			//권한 붙여넣기
			pasteAuthority(rowKey) {
				if (Object.keys(page.document.data.copiedAuthorityData).length <= 0) {
					gaiaPortal.customAlert("{{ message('msg.doc.049') }}"); // 붙여넣을 권한을 복사해주세요.
					return false;
				}

				const currentRowData = page.document.grid.getRow(rowKey); //현재 선택한 문서 데이터
				const copiedData = page.document.data.copiedAuthorityData;
				const pasteData = currentRowData;

				//경로 레벨, 상위 navi가 같은 경우에만 붙여넣기 진행.
				if ((copiedData.upDocId !== pasteData.up_doc_id) || (copiedData.naviId !== pasteData.navi_id)) {
					gaiaPortal.customAlert("{{ message('msg.doc.046') }}"); // 권한을 붙여넣을 수 없는 경로입니다.
					return false;
				} else if (copiedData.sourceDocId === pasteData.doc_id) {
					gaiaPortal.customAlert("{{ message('msg.doc.047') }}"); // 같은 경로는 권한을 붙일 수 없습니다.
					return false;
				} else {
					const requestData = {
						targetId: pasteData.doc_id,
						targetNo: pasteData.doc_no,
						sourceId: copiedData.sourceDocId,
						sourceNo: copiedData.sourceDocNo,
					}

					// 서버 전송
					gaiaCommon.post("/api/document/navigation-authority/paste", requestData, function (result) {
						gaiaPortal.customAlert("{{ message('msg.doc.048') }}"); // 권한을 붙여넣었습니다.
						page.document.data.copiedAuthorityData = {}; // 붙이기 완료 후, 초기화
					});

				}
			},

			//파일 정보 조회
			showDocInfo(rowKey) {
				//파일 명, 파일 용량, 파일 경로, 수정자, 작성자, 수정일, 작성일 표시.
				const currentRowData = page.document.grid.getRow(rowKey); 	//현재 선택한 문서 데이터
				const docPath = page.document.data.upDocInfo.breadCrumb; 	//현재 파일 경로
				const docType = currentRowData.doc_type;
				let docTypeTxt;
				if (docType === "FOLDR") {
					docTypeTxt = "Folder"
				} else {
					docTypeTxt = "File"
				}

				// $("#doc_file_path").val(currentRowData.doc_path);
				$("#doc_file_path").val(docPath);
				$("#doc_file_nm").val(currentRowData.doc_nm);
				$("#doc_rgstr_id").val(currentRowData.rgstr_id);
				$("#doc_chg_id").val(currentRowData.chg_id);
				$("#doc_rgst_dt").val(currentRowData.rgst_dt);
				$("#doc_chg_dt").val(currentRowData.chg_dt);
				$("#doc_file_type").val(docTypeTxt);

				//파일 사이즈 변환
				let docSize = currentRowData.doc_size;
				// let docSizeInMB = (docSize / (1024 * 1024)).toFixed(2); // MB 단위로 변환하고 소수점 둘째 자리까지 표시
				// let docSizeInKB = (docSize / 1024).toFixed(2); 			// KB 단위로 변환하고 소수점 둘째 자리까지 표시
				// $("#doc_file_size").val(docSizeInKB + "KB");
				$("#doc_file_size").val(page.item.fileUpload.formatFileSize(docSize));

				$("#doc_info_tit").text("{{ message('item.doc.035') }}"); // 파일 정보
				$("#docFileInfo").addClass("open");

			},
			//파일 정보 데이터 초기화
			clearDocInfo() {
				$("#doc_file_info input").val("");
			},

			//엑셀 내보내기
			exportToExcel() {
				const options = {
					includeHiddenColumns: true, //숨겨진 컬럼의 포함 여부
					fileName: 'myExport',
				};

				this.grid.export('xlsx', options);
			},

			//PDF 파일 미리보기
			previewPDFDoc(rowKey) {
				const row = page.document.grid.getRow(rowKey); 	// 선택한 로우 데이터 가져오기
				this.previewPDFData.docId = row.doc_id;
				this.previewPDFData.docNm = row.doc_nm;

				const _width = '1000';
				const _height = '1000';

				let _left = Math.ceil((window.screen.width - _width) / 2);
				_left += window.screenLeft; // 듀얼 모니터일 때
				let _top = Math.ceil((window.screen.height - _height) / 2);

				window.open('/document/pdf-file/preview', 'preview_popup', 'width=' + _width + ', height=' + _height + ',left=' + _left + ',top=' + _top + ', scrollbars=yes, resizable=yes');
			},

			//문서 URL 복사
			docUrlCopy(rowKey) {
				const currentRowData = page.document.grid.getRow(rowKey); 	// 현재 선택한 문서 데이터
				// const cntrctNo = page.tree.data.selectCntrctNo;				// 현재 계약번호
				const currentPjtData = page.selectedPjtData;
				const naviId = currentRowData.navi_id;
				const docId = currentRowData.doc_id;
				const docNm = currentRowData.doc_nm;
				const upDocId = currentRowData.up_doc_id;

				// URL 생성 
				let queryParam = {
					div: page.tree.data.documentType,
					pjtNo: currentPjtData.pjtNo,
					pjtNm: currentPjtData.pjt_nm,
					cntrctNo: currentPjtData.cntrctNo,
					cntrctNm: currentPjtData.cntrct_nm,
					navi_id: naviId,
					up_doc_id: upDocId,
					docId: docId,
					docNm: docNm
				};

				let queryStr = new URLSearchParams(queryParam).toString();

				//쿼리스트링 문자열의 공백 처리('+'를 '%20'으로 치환)
				queryStr = queryStr.replace(/\+/g, '%20');

				const BASE_URL = window.location.origin;	//TODO: 로컬 서버 -> 도메인 변경 필요.
				const url = `${BASE_URL}/document?${queryStr}`;

				// URL을 클립보드에 복사
				if (navigator.clipboard) {
					navigator.clipboard.writeText(url).then(() => {
						gaiaPortal.customAlert("{{ message('msg.doc.088') }}"); // URL이 클립보드에 복사되었습니다.
					}).catch(err => {
						console.error("URL 복사 중 오류가 발생했습니다:", err);
						gaiaPortal.customAlert("{{ message('msg.doc.089') }}"); // URL 복사 중 오류가 발생했습니다.
					});
				} else {
					// Clipboard API를 지원하지 않는 경우의 처리
					console.warn("Clipboard API를 지원하지 않습니다.");
					const textarea = document.createElement('textarea');
					textarea.value = url;

					document.body.appendChild(textarea);
					textarea.select();

					document.execCommand('copy');
					document.body.removeChild(textarea);

					gaiaPortal.customAlert("{{ message('msg.doc.088') }}"); // URL이 클립보드에 복사되었습니다.
					// gaiaPortal.customAlert("{{ message('msg.doc.090') }}"); // 브라우저가 URL 복사를 지원하지 않습니다.
				}

			},

			//문서관리(폴더형) - 파일 관련 처리 모음
			file: {
				setUploadEventListener() {
					const documentGrid = $("#document_grid");

					// dragover 이벤트: 드래그 중 기본 동작을 막고 드래그 상태 표시
					documentGrid.on("dragover", function (event) {
						event.preventDefault();
						event.stopPropagation();
						$(this).addClass("drag-over"); // 드래그 상태를 나타내기 위해 클래스 추가
					});

					// dragleave 이벤트: 드래그가 벗어날 때 드래그 상태 제거
					documentGrid.on("dragleave", function (event) {
						event.preventDefault();
						event.stopPropagation();
						$(this).removeClass("drag-over"); // 드래그 상태 해제
					});

					// drop 이벤트: 파일 드롭 시 업로드를 수행
					documentGrid.on("drop", (event) => {
						event.preventDefault();
						event.stopPropagation();
						$(documentGrid).removeClass("drag-over");

						// 드롭된 item 항목 목록 가져오기
						const items = event.originalEvent.dataTransfer.items;
						let hasFolder = false;

						// 폴더가 포함되었는지 확인
						for (let i = 0; i < items.length; i++) {
							const item = items[i].webkitGetAsEntry(); // 파일 시스템 Entry 얻기
							if (item && item.isDirectory) { // 폴더인지 확인
								hasFolder = true;
								break;
							}
						}

						if (hasFolder) {
							gaiaPortal.customAlert("{{ message('msg.doc.091') }}"); // 폴더는 업로드할 수 없습니다. 파일만 드롭해 주세요.
							return; // 폴더가 포함되어 있으면 업로드 중단
						}

						// 폴더가 아닌 파일만 있는 경우에만 업로드 수행
						const files = event.originalEvent.dataTransfer.files;
						if (files.length > 0) {
							$("#fileInput")[0].files = files;
							this.upload();
						}
					});
				},

				openUpload() {
					$("#fileInput").click(); //첨부파일 창 오픈.
				},

				// 문서 업로드
				upload() {
					const fileInput = $("#fileInput"); // DOM 요소에 접근

					const selectedFiles = fileInput[0].files; // 파일리스트 조회

					// 업로드 조건 확인
					// 1. 네비게이션 선택 확인.
					if (!page.navigation.data.selected || Object.keys(page.navigation.data.selected).length === 0) {
						gaiaPortal.customAlert("{{ message('msg.doc.016') }}"); // 경로를 선택해주세요.
						return;
					}

					// 2. 네비 타입 확인.
					if (page.navigation.data.selected.naviType !== 'FOLDR') {
						gaiaPortal.customAlert("{{ message('msg.doc.092') }}"); // 유효하지 않은 업로드 위치입니다.
						return;
					}

					const formData = new FormData();

					let docData = {
						naviNo: page.navigation.data.selected.naviNo,
						naviId: page.navigation.data.selected.naviId,
						upDocNo: page.document.data.upDocInfo.docNo ? page.document.data.upDocInfo.docNo : 0,
						upDocId: page.document.data.upDocInfo.docId ? page.document.data.upDocInfo.docId : "#",
						docPath: page.document.data.upDocInfo.breadCrumb,
					};

					formData.append("docData", new Blob([JSON.stringify(docData)], { type: "application/json" }));


					// 파일 크기 및 개수 제한
					const maxFileSize = 500 * 1024 * 1024; // 500MB
					const maxFileSizeToMB = 100;
					const maxFileCount = 5;
					// if (selectedFiles.length > maxFileCount) {
					// 	const messageTemplate = "{{ message('msg.doc.093', '{0}') }}"; // 최대 n개의 파일만 업로드할 수 있습니다.
					// 	const alertMessage = messageTemplate.replace("{0}", maxFileCount);
					// 	gaiaPortal.customAlert(alertMessage); 
					// 	return;
					// }

					// 첨부파일 데이터 폼에 추가 (크기 검사)
					let isValid = true;

					Array.from(selectedFiles).forEach(file => {
						const fileNm = file.name;
						const fileSizeToMB = file.size / (1024 * 1024);
						// 파일 크기 제한 검증
						if (file.size > maxFileSize) {
							const messageTemplate = "{{ message('msg.doc.094', '{0}', '{1}') }}"; // 파일 {파일명}이(가) 너무 큽니다. 최대 (n)MB까지 허용됩니다.
							const alertMessage = messageTemplate.replace("{0}", fileNm)
								.replace("{1}", maxFileSizeToMB);

							gaiaPortal.customAlert(alertMessage);
							isValid = false;
							fileInput.val(""); // 동일한 파일 재업로드 허용을 위해 파일 입력 값 초기화
							return;
						} else if (file.size === 0) {
							const messageTemplate = "{{ message('msg.doc.095', '{0}', '{1}') }}"; // 파일 {파일명}이(가) 손상되었습니다. 파일 크기 : {파일크기}MB
							const alertMessage = messageTemplate.replace("{0}", fileNm)
								.replace("{1}", fileSizeToMB);

							gaiaPortal.customAlert(alertMessage);
							isValid = false;
							fileInput.val(""); // 동일한 파일 재업로드 허용을 위해 파일 입력 값 초기화
							return;
						}
						formData.append('files', file);
					});

					if (!isValid) return; // 유효하지 않은 파일이 있을 경우 업로드 중단

					// 서버에 데이터 전송
					gaiaCommon.LoadingOverlay('body', true); // 파일 업로드 시, 로딩 바 활성화
					gaiaCommon.postForm("/api/document/file/create",formData,(response)=>{
						if (response.ok) {
							gaiaCommon.LoadingOverlay('body', false); // 로딩 바 종료
							gaiaPortal.customAlert("{{ message('msg.doc.096') }}"); // 문서가 저장되었습니다.

							// 파일 입력 데이터 초기화
							fileInput.val("");
							page.refresh(false, true);
						} else {
							gaiaCommon.LoadingOverlay('body', false); // 로딩 바 종료
							gaiaPortal.customAlert(response.message);
						}
					},(error)=>{
						gaiaCommon.LoadingOverlay('body', false); // 로딩 바 종료
						// 로그인 세션 만료의 경우,
						if (error.status === 401) {
							gaiaPortal.customAlert("{{ message('msg.064') }}", function () {
								location.reload();
							});
						} else {
							gaiaPortal.customAlert(error.responseJSON?.message);
						}
					})
				},

				// 문서 다운로드
				download() {
					// 선택한 파일 데이터 정보
					let docIdList = [];
					const selectedNaviType = page.navigation.data.selected.naviType;

					// 그리드 데이터 가져오기
					const gridData = page.document.grid.getData();
					const checkedRows = page.document.grid.getCheckedRows();

					// 문서인 경우
					if (selectedNaviType === "FOLDR") {
						//폴더인 경우, 다운로드 X
						for (let v of page.document.grid.getData()) {
							if (v._attributes.checked) {
								if (v.doc_type === "FOLDR") {
									gaiaPortal.customAlert("{{ message('msg.doc.097') }}"); // 폴더는 다운로드 할 수 없습니다. 파일을 선택해주세요.
									docIdList = []; //문서 데이터 초기화
									return;
								}
								docIdList.push(v.doc_id);
							}
						};

						if (docIdList.length === 1) {
							const docId = docIdList[0];
							const url = `/api/document/file/${docId}/download`;

							// 단일 파일 다운로드
							gaiaCommon.download(url, function (error) {
								if (error.status === 404) {
									gaiaPortal.customAlert("{{ message('msg.doc.128') }}"); // 파일이 존재하지 않아 다운로드할 수 없습니다.
								} else if (error.status === 400) {
									gaiaPortal.customAlert("{{ message('msg.059') }}"); // 잘못된 요청입니다.
								} else {
									gaiaPortal.customAlert("{{ message('msg.doc.129') }}"); // 서버 오류로 인해 다운로드할 수 없습니다.
								}
							});
							// window.open("/api/document/file/" + docIdList[0] + "/download", "_blank"); // 새 창을 열어 파일을 다운로드
						} else if (docIdList.length > 1) {
							// 여러 파일 압축 다운로드
							gaiaCommon.downloadZip("/api/document/file/download-zip", { docIdList });
						} else {
							// 선택된 파일 없음
							gaiaPortal.customAlert("{{ message('msg.doc.098') }}"); // 다운로드할 파일을 선택해주세요.
						}

						//아이템형인 경우
					} else if (selectedNaviType === "ITEM") {

						if (checkedRows.length === 0) {
							gaiaPortal.customAlert("{{ message('msg.doc.101') }}"); // 다운로드할 아이템을 선택해주세요.
							return;
						}

						if (checkedRows.length > 1) {
							gaiaPortal.customAlert("{{ message('msg.doc.100') }}"); // 하나의 아이템만 선택해주세요.
							return;
						}

						const itemData = checkedRows[0];
						const attachments = itemData.attachments;
						const itemNm = itemData.doc_nm;

						if (!attachments || attachments.length === 0) {
							gaiaPortal.customAlert("{{ message('msg.doc.099') }}"); // 다운로드할 첨부파일이 존재하지 않습니다.
							return;
						}

						// 첨부파일 압축 다운로드
						const docId = attachments[0].docId;
						gaiaCommon.downloadZip("api/document/file/download-zip/item", { itemDocId: docId }, selectedNaviType, itemNm);

					}

				}
			},
		},

		//문서관리(아이템형) 관련
		item: {
			attrCdList: [],
			//문서관리 > 아이템형 - 아이템 생성 팝업으로 이동.
			moveAddItem() {
				if (!page.navigation.data.selected.naviId) {
					gaiaPortal.customAlert("{{ message('msg.doc.104') }}"); // 경로를 선택하고 추가를 눌러주세요.
					return;
				}

				if (page.navigation.data.selected.upNaviId === '#') {
					gaiaPortal.customAlert("{{ message('msg.doc.103') }}"); // 최상위 경로에는 폴더를 생성 할 수 없습니다.
					return;
				}

				const naviId = page.navigation.data.selected.naviId;
				let data = {
					naviId: naviId
				}

				//선택된 트리 노드의 속성 데이터 가져와서 html 요소 그리기
				gaiaCommon.post("/api/document/add-item/html/create", data, function (result) {
					// 동적 요소를 추가할 위치
					const dynamicFieldsContainer = document.querySelector("#dynamicFieldsContainer");

					// 기존 동적으로 생성된 요소 제거
					$("#item_docNm").val("");
					dynamicFieldsContainer.querySelectorAll(".row.dynamic-row").forEach(row => row.remove());

					// 서버 html데이터를 기반으로 요소 생성
					const propertyList = result.details.propertyList;
					let attrCdList = []; // 속성 코드 리스트

					if(propertyList.length > 0) {
						propertyList.forEach(item => {
							const rowDiv = document.createElement("div");
							rowDiv.classList.add("row", "dynamic-row");
	
							const options = item.options ? JSON.parse(item.options.value) : []; // options가 있는 경우에만 파싱
	
							let inputHtml = "";
	
							if (item.attrbt_type === 'DAT') {
								inputHtml = `<input type="date" class="w-md date" id="${item.attrbt_cd}" name="${item.attrbt_cd}" />`;
							} 
							else if (item.attrbt_type === 'NUM') {
								inputHtml = `<input type="text" class="number" id="${item.attrbt_cd}" name="${item.attrbt_cd}" />`;
							} 
							else if (item.attrbt_type === 'SEL') {
								inputHtml = `<div><span class="selectbox" style="z-index: 1;"><select id="${item.attrbt_cd}" name="${item.attrbt_cd}">`;
								options.forEach(opt => {
									inputHtml += `<option value="${opt.value}">${opt.label}</option>`;
								});
								inputHtml += `</select></span></div>`;
							} 
							else if (item.attrbt_type === 'TXTA') {
								inputHtml = `<textarea class="maxlength" id="${item.attrbt_cd}" name="${item.attrbt_cd}" maxlength="2000"></textarea>`;
							} 
							else if (item.attrbt_type === 'ATCH') {
								// makeAttachment = true; // 파일 업로드 수정 입력창 여부
								// return;
							}
							else {
								inputHtml = `<input type="text" id="${item.attrbt_cd}" name="${item.attrbt_cd}" maxlength="200" />`;
							}
	
							rowDiv.innerHTML = `
								<div class="col">
									<div class="form_label required">${item.attrbt_name}</div>
									<div class="form_data">${inputHtml}</div>
								</div>
							`;
	
							dynamicFieldsContainer.appendChild(rowDiv);
	
							attrCdList.push({ attrbtCd: item.attrbt_cd, attrbtNo: item.attrbt_no }); // 속성 코드 저장


							/* 이벤트 리스너 추가*/
							// .number 클래스에 이벤트 리스너 추가
							rowDiv.querySelectorAll(".number").forEach(input => {
								input.addEventListener("input", function () {
									this.value = this.value.replace(/[^0-9]/g, ""); // 숫자가 아닌 문자는 제거
								});
							});
						});
					}









					// result.details.propertyToHtml.forEach(item => {

					// 	// 속성 코드 저장
					// 	attrCdList.push(item.attrbt_cd);

					// 	const rowDiv = document.createElement("div");
					// 	rowDiv.classList.add("row", "dynamic-row"); // "dynamic-row" 클래스로 동적 생성임을 표시

					// 	// html_element를 DOMParser로 파싱
					// 	const parser = new DOMParser();
					// 	const parsedHtml = parser.parseFromString(item.html_element, "text/html");

					// 	// rowDiv에 파싱된 HTML 추가
					// 	rowDiv.innerHTML = `
					// 		<div class="col">
					// 			${parsedHtml.body.innerHTML}
					// 		</div>
					// 	`;

					// 	// 즉시 .number 클래스에 이벤트 리스너 추가
					// 	rowDiv.querySelectorAll(".number").forEach(input => {
					// 		input.addEventListener("input", function () {
					// 			this.value = this.value.replace(/[^0-9]/g, ""); // 숫자가 아닌 문자는 제거
					// 		});
					// 	});

					// 	dynamicFieldsContainer.appendChild(rowDiv); // 요소 추가 위치 변경
					// });

					page.item.attrCdList = attrCdList;
					page.item.fileUpload.init("insert", "insertItem");

					$("#item_cu_tit").text("{{ message('item.doc.030') }}"); // 아이템 추가
					$('#insertItem').addClass('open');
				});
			},

			//아이템형 - 아이템 추가
			addDocItem() {
				// 입력값 수집 및 XSS 방지
				const sanitizedInput = (val) => val?.replace(/[<>]/g, "") || "";
				let requiredValid = true;

				// docNm 필수 값 확인
				const docNm = $("#item_docNm").val();
				if (!docNm) {
					gaiaPortal.customAlert("{{ message('msg.doc.105') }}"); // 아이템 제목을 입력해주세요.
					$("#item_docNm").focus();
					return;
				}

				if (!addRegex.test(docNm)) { // 유효성 검사
					gaiaPortal.customAlert("{{ message('msg.doc.124') }}"); // 아이템 제목에 사용할 수 없는 특수 기호가 포함되어 있습니다.
					$("#item_docNm").focus();
					return;
				}

				const storageData = {
					docNm: sanitizedInput(docNm),
					naviNo: page.navigation.data.selected?.naviNo,
					naviId: page.navigation.data.selected?.naviId,
					upDocNo: page.document.data.upDocInfo.docNo ? page.document.data.upDocInfo.docNo : 0,
					upDocId: page.document.data.upDocInfo.docId ? page.document.data.upDocInfo.docId : "#",
					docPath: page.document.data.upDocInfo.breadCrumb,
				};

				// 추가 속성 데이터 유효성 검사 및 생성
				const attrbtData = { attrbtDataList: [] };
				page.item.attrCdList.forEach(attrbtCd => {
					const value = $(`#${attrbtCd}`).val();
					if (!value) {
						gaiaPortal.customAlert("{{ message('msg.008') }}"); // 필수 값이 누락되었습니다.
						$(`#${attrbtCd}`).focus();
						requiredValid = false;
						return;
					}
					attrbtData.attrbtDataList.push({ attrbtCntnts: value, attrbtCd: attrbtCd });
				});

				if (!requiredValid) return;


				// 파일 데이터 수집
				const formData = new FormData();
				formData.append("storageData", new Blob([JSON.stringify(storageData)], { type: "application/json" }));
				formData.append("attrbtData", new Blob([JSON.stringify(attrbtData)], { type: "application/json" }));

				// 제거된 파일 정보 추가
				if (this.fileUpload.currentDocNo && this.fileUpload.removedFiles[this.fileUpload.currentDocNo]) {
					this.fileUpload.removedFiles[this.fileUpload.currentDocNo].forEach(file => {
						formData.append('removedFiles[]', file.fileNo);
						formData.append('removedDocNos[]', file.docNo);
					});
				}

				// 기존 파일 목록 추가
				formData.delete('files'); // 자동 추가된 파일 필드 제거
				this.fileUpload.existingFiles.forEach(file => {
					formData.append('files', file);
				});

				// 서버에 데이터 전송
				gaiaCommon.postForm("/api/document/file-item/create",formData,(response)=>{
					if (response.ok) {
						gaiaPortal.customAlert("{{ message('msg.doc.106') }}"); // 아이템이 저장되었습니다.
						page.popup.closePopup("addItem");
						page.refresh(false, true);

					} else {
						gaiaPortal.customAlert(response.message);
					}
				},(error) => {
					// 로그인 세션 만료의 경우,
					if (error.status === 401) {
						gaiaPortal.customAlert(error.responseJSON.message, function () {
							location.reload();
						});
					} else {
						gaiaPortal.customAlert(error.responseJSON.message);
					}
				})
			},

			/* 파일 첨부 관련 기능 모음 */
			fileUpload: {
				isUpDateItemInitialized: false, 		// 속성 정보 수정(아이템)초기화 여부 플래그
				isAddItemInitialized: false, 			// 아이템 추가 초기화 여부 플래그
				rootContainer: null,
				fileList: null,
				fileInput: null,
				uploadedFileCount: null,
				failedFileCount: null,
				uploadedFileSize: null,
				maxTotalFileSize: 100 * 1024 * 1024, 	// 100 MB (추후 변경 가능)
				currentDocNo: null,
				totalFileSize: 0,
				failedFileCounts: 0,
				successfulFileCount: 0,
				existingFiles: [],
				allRemovedFiles: [],
				removedFiles: {}, 						// 프로젝트별로 삭제된 파일을 관리

				// 팝업별로 ID 프리픽스 전달
				init(prefix, elementId) {
					if (prefix === "update" && this.isUpDateItemInitialized) return; // 이미 초기화된 경우 return
					if (prefix === "insert" && this.isAddItemInitialized) return; // 이미 초기화된 경우 return

					this.prefix = prefix;
					this.rootContainer = document.getElementById(elementId); // 모달의 루트 컨테이너 설정
					this.cacheElements();
					this.addEventListeners();

					if (prefix === "update") {
						this.isUpDateItemInitialized = true;
					} else if (prefix === "insert") {
						this.isAddItemInitialized = true;
					}
				},

				cacheElements(prefix) {
					this.fileInput = document.getElementById(`${this.prefix}_fileInput`);
					this.fileList = document.getElementById(`${this.prefix}_fileList`);
					this.uploadedFileCount = document.getElementById(`${this.prefix}_uploadedFileCount`); // 성공한 파일 개수
					this.failedFileCount = document.getElementById(`${this.prefix}_failedFileCount`); // 실패한 파일 개수
					this.uploadedFileSize = document.getElementById(`${this.prefix}_uploadedFileSize`); // 업로드된 파일 용량
					this.removeAllButton = document.getElementById(`${this.prefix}_removeAllButton`);
					this.addFileButton = document.getElementById(`${this.prefix}_addFileButton`);
				},

				addEventListeners() {
					// 파일 목록 단일 삭제(x) 버튼
					this.rootContainer.querySelectorAll('.file-item .remove-button').forEach(button => {
						button.addEventListener('click', (event) => this.removeFile(event));
					});

					// 파일첨부 창
					this.addFileButton.addEventListener('click', () => this.fileInput.click());

					// 드래그 앤 드롭
					// this.attachArea = document.querySelector('.attach_area');
					this.attachArea = this.rootContainer.querySelector('.attach_area');
					this.attachArea.addEventListener('dragover', (event) => this.dragOver(event));
					this.attachArea.addEventListener('dragleave', () => this.dragLeave());
					this.attachArea.addEventListener('drop', (event) => this.handleDrop(event));

					this.fileInput.addEventListener('change', () => this.updateFileListFromInput());    // 파일목록 업데이트

					this.removeAllButton.addEventListener('click', () => this.removeAllFiles());    // 모두삭제
				},

				// 파일 삭제(단일)
				removeFile(event) {
					const fileItem = event.target.parentElement;
					const fileNo = fileItem.getAttribute('data-file-no');
					const sno = fileItem.getAttribute('data-docNo');

					this.allRemovedFiles.push({ fileNo, docNo });
					fileItem.remove();
				},

				// 파일 드래그 앤 드롭
				dragOver(event) {
					event.preventDefault();
					this.attachArea.classList.add('dragging');
				},
				dragLeave() {
					this.attachArea.classList.remove('dragging');
				},
				handleDrop(event) {
					event.preventDefault();
					this.attachArea.classList.remove('dragging');

					const newFiles = event.dataTransfer.files;
					// FileList를 배열로 변환하고, 각 파일의 크기(size)를 합산
					const newFilesSize = Array.from(newFiles).reduce((acc, file) => acc + file.size, 0);
					const newFilesSizeToMB = (newFilesSize / (1024 * 1024)).toFixed(2); // 소수 둘째자리까지 표시.
					const maxTotalSizeToMB = this.maxTotalFileSize / (1024 * 1024);
					if (newFiles.length > 0) {
						if (this.totalFileSize + newFilesSize > this.maxTotalFileSize) {
							// 업로드 할 수 있는 크기(maxTotalSizeToMB)를 초과하였습니다. 현재 업로드 할 파일 크기 : ${newFilesSizeToMB}MB
							gaiaPortal.customAlert(`{{ message('msg.doc.126', '${maxTotalSizeToMB}', '${newFilesSizeToMB}')}}`);
							return;
						}

						this.existingFiles = this.existingFiles.concat(newFiles); // 기존 파일 목록에 새 파일 추가
						this.updateFileList(newFiles);
					}
				},

				updateFileListFromInput() { // '파일 첨부'로 첨부된 파일 추가
					const newFiles = this.fileInput.files;

					const newFilesSize = Array.from(newFiles).reduce((acc, file) => acc + file.size, 0);
					const newFilesSizeToMB = (newFilesSize / (1024 * 1024)).toFixed(2); // 소수 둘째자리까지 표시.
					const maxTotalSizeToMB = this.maxTotalFileSize / (1024 * 1024);

					if (newFiles.length > 0) {
						if (this.totalFileSize + newFilesSize > this.maxTotalFileSize) {
							// 업로드 할 수 있는 크기(maxTotalSizeToMB)를 초과하였습니다. 현재 업로드 할 파일 크기 : ${newFilesSizeToMB}MB
							gaiaPortal.customAlert(`{{ message('msg.doc.126', '${maxTotalSizeToMB}', '${newFilesSizeToMB}')}}`);
							return;
						}

						this.existingFiles = this.existingFiles.concat(newFiles);
						this.updateFileList(newFiles);
					}
				},

				removeAllFiles() { // '모두 삭제'
					// const fileItems = document.querySelectorAll('.file_list .list_item');
					const fileItems = this.rootContainer.querySelectorAll('.file_list .list_item');
					fileItems.forEach(fileItem => {
						const fileNo = fileItem.dataset.fileNo;
						const docNo = fileItem.dataset.docNo;
						this.allRemovedFiles.push({ fileNo, docNo });
					});
					this.updateFileSizeSummary();
					this.clearFileList();
					this.fileInput.value = '';
				},

				processFetchedFiles(attachments) {   // 서버에서 받은 파일 정보 처리
					const files = attachments.map(file => ({
						name: file.fileNm,
						size: file.fileSize,
						fileNo: file.fileNo,
						docNo: file.docNo
					}));

					this.updateFileList(files);
				},

				clearFileList() {  // 파일 목록 초기화
					this.fileList.innerHTML = '';
					this.totalFileSize = 0;
					this.successfulFileCount = 0;
					this.failedFileCounts = 0;
					this.existingFiles = [];
					this.updateFileSizeSummary();
					this.updateFileCount();
					this.updateFailedFileCount();

					// 파일 목록이 비었을 때 메시지 표시
					const dataInfo = this.rootContainer.querySelector('.data_info');
					const attachList = this.rootContainer.querySelector('.attach_list');

					if (this.fileList.querySelectorAll('.list_item').length === 0) {
						dataInfo.classList.remove('hide');
						attachList.classList.add('hide');
					}
				},

				removeFileFromDoc(fileNo, docNo) {   // 파일 삭제 처리 함수
					if (!this.removedFiles[this.currentDocNo]) {
						this.removedFiles[this.currentDocNo] = [];
					}
					this.removedFiles[this.currentDocNo].push({ fileNo, docNo });
				},

				updateFileSizeSummary() {  // 파일 크기 업데이트
					const totalSizeText = this.formatFileSize(this.totalFileSize);
					this.uploadedFileSize.textContent = `${totalSizeText}`;
				},

				formatFileSize(size) { // 파일 크기 포맷팅
					if (size >= 1024 * 1024) {
						return (size / (1024 * 1024)).toFixed(2) + ' MB';
					} else if (size >= 1024) {
						return (size / 1024).toFixed(2) + ' KB';
					} else {
						return size + ' bytes';
					}
				},

				updateFileList(files) { // 파일 목록 업데이트
					const existingFileNames = this.existingFiles.map(file => file.name);
					// const fileListElement = document.getElementById('fileList');
					const fileListElement = this.fileList;
					// const dataInfo = document.querySelector('.data_info');
					// const attachList = document.querySelector('.attach_list');
					const dataInfo = this.rootContainer.querySelector('.data_info');
					const attachList = this.rootContainer.querySelector('.attach_list');
					this.totalFileSize = this.existingFiles.reduce((sum, file) => sum + (file.size || 0), 0);

					if (files.length === 0 && this.existingFiles.length === 0) {
						dataInfo.classList.remove('hide');
						attachList.classList.add('hide');
					} else {
						dataInfo.classList.add('hide');
						attachList.classList.remove('hide');

						const allFiles = [...this.existingFiles, ...files];

						allFiles.forEach(file => {
							if (!existingFileNames.includes(file.name)) {
								const fileItem = this.createFileItem(file, fileListElement);
								this.handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList);
							}
						});

						this.updateFileCount();
						this.updateFailedFileCount();
					}
				},

				createFileItem(file, fileListElement) {
					const fileItem = document.createElement('li');
					fileItem.classList.add('list_item');
					fileItem.dataset.filename = file.name;
					fileItem.dataset.fileNo = file.fileNo || '';
					fileItem.dataset.sno = file.sno || '';

					const fileName = document.createElement('span');
					fileName.classList.add('f_name');
					fileName.textContent = file.name;

					const fileSizeText = this.formatFileSize(file.size);
					const fileSize = document.createElement('span');
					fileSize.classList.add('f_capacity');
					fileSize.textContent = fileSizeText;

					const progressContainer = document.createElement('span');
					progressContainer.classList.add('f_progress');

					const progress = document.createElement('span');
					progress.classList.add('progress');

					const successIndicator = document.createElement('span');
					successIndicator.classList.add(file.size > this.maxTotalFileSize ? 'fail' : 'sucess');
					successIndicator.innerHTML = file.size > this.maxTotalFileSize ? '<i class="ic ic-close"></i>' : '<i class="ic ic-check"></i>';

					if (file.size > this.maxTotalFileSize) {
						progress.innerHTML = `<span class="bar" style="width: 100%;"></span>`;
						progress.classList.add('fail');
						this.failedFileCounts++;
					} else {
						progress.innerHTML = `<span class="bar" style="width: 0%;"></span>`;
						progress.classList.add('ing');
					}

					progressContainer.appendChild(progress);
					progressContainer.appendChild(successIndicator);

					fileItem.appendChild(this.createRemoveButton(file, fileListElement));
					fileItem.appendChild(fileName);
					fileItem.appendChild(progressContainer);
					fileItem.appendChild(fileSize);

					fileListElement.appendChild(fileItem);
					this.totalFileSize += file.size;
					this.updateFileSizeSummary();

					if (file.size <= this.maxTotalFileSize) {
						this.successfulFileCount++;
						this.existingFiles.push(file);
						this.uploadFile(file, fileItem);
					}

					return fileItem;
				},

				createRemoveButton(file, fileListElement) {
					const removeButton = document.createElement('button');
					removeButton.type = 'button';
					removeButton.classList.add('icon_btn');
					removeButton.innerHTML = '<i class="ic ic-close"></i><span class="blind">삭제</span>';

					if (this.currentProject && this.currentProject.openPstats !== '01') {
						removeButton.style.visibility = 'hidden';
					}

					return removeButton;
				},

				handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList) {
					const removeButton = fileItem.querySelector('.icon_btn');
					removeButton.addEventListener('click', () => {
						this.removeFileFromDoc(file.fileNo, file.docNo);
						fileItem.remove();
						this.totalFileSize -= file.size;
						this.updateFileSizeSummary();

						if (file.size <= this.maxTotalFileSize) {
							this.successfulFileCount--;
							this.updateFileCount();
						} else {
							this.failedFileCounts--;
							this.updateFailedFileCount();
						}

						this.existingFiles = this.existingFiles.filter(f => f.fileNo !== file.fileNo || f.docNo !== file.docNo);

						if (fileListElement.querySelectorAll('.list_item').length === 0) {
							dataInfo.classList.remove('hide');
							attachList.classList.add('hide');
						}
						// document.querySelector('#fileInput').value = '';
						this.rootContainer.querySelector('#fileInput').value = '';
					});
				},

				updateFileCount() { // 파일 개수 업데이트
					const uploadedFileCountElement = this.uploadedFileCount;
					uploadedFileCountElement.textContent = this.successfulFileCount > 0 ? this.successfulFileCount : '0';
				},

				updateFailedFileCount(failedCount) { // 실패한 파일 개수 업데이트
					const failedFileCountElement = this.failedFileCount;
					failedFileCountElement.textContent = this.failedFileCounts > 0 ? this.failedFileCounts : '0';
				},

				uploadFile(file, fileItem) { // 파일 업로드 상태 확인
					const formData = new FormData();
					formData.append('file', file);

					const xhr = new XMLHttpRequest();
					xhr.open('POST', '/upload', true);

					xhr.upload.onprogress = (event) => {
						if (event.lengthComputable) {
							const percentComplete = Math.round((event.loaded / event.total) * 100);
							this.updateProgress(file.name, percentComplete, fileItem);
						}
					};
					xhr.onload = () => {
						this.updateProgress(file.name, xhr.status === 200 ? 100 : 0, fileItem, xhr.status === 200);
					};
					xhr.onerror = () => {
						this.updateProgress(file.name, 0, fileItem, false);
					};
					xhr.send(formData);
				},

				updateProgress(fileName, percent, fileItem, success = true) { // 파일 업로드 상태바
					const progressBar = fileItem.querySelector('.progress .bar');
					const progressContainer = fileItem.querySelector('.progress');
					const successIndicator = fileItem.querySelector('.sucess');
					progressBar.style.width = percent + '%';

					if (percent === 100) {
						progressBar.style.display = 'none';
						progressContainer.classList.remove('ing');
						successIndicator.classList.remove('hide');
						successIndicator.classList.add(success ? 'sucess' : 'fail');
						successIndicator.innerHTML = success ? '<i class="ic ic-check"></i>' : '<i class="ic ic-close"></i>';
					} else {
						progressBar.style.display = 'block';
						successIndicator.classList.add('hide');
						progressBar.classList.add('ing');
					}
				},

				formatFileSize(size) { // 파일 크기 포맷
					return size < 1024 ? `${size} bytes` : size < 1048576 ? `${(size / 1024).toFixed(2)} KB` : `${(size / 1048576).toFixed(2)} MB`;
				},


			}

		},

		/* 착공계 문서관리 관련 모음 */
		construction: {
			openAllDownloadPop() {
				$('#customAlertModal').show();
				$('#customPopBoxAlert').show();

				$('#c_pop_tit').text("{{ message('item.doc.080') }}");
				$('#c_pop_box_cancle').text("{{ message('btn.007') }}");
				$('#c_pop_box_confirm').text("{{ message('btn.034') }}");
				$('#customPopBoxAlert').addClass('on');

				document.body.style.overflow = 'hidden';

				// 기존 클릭 이벤트 제거 (이벤트 핸들러 중복 등록 방지)
				$("#c_pop_box_cancle").off("click");
				$("#c_pop_box_confirm").off("click");

				// 기존 라디오 버튼 제거 후 새로 추가
				$('#c_pop_body').empty();

				// 라디오 버튼 옵션 (추후 동적으로 변경 가능)
				const radioOptions = [
					{ id: "download_zip", value: "zip", label: "{{ message('item.doc.079') }}" }, //착공계 문서 파일 묶음 다운로드 (ZIP)
				];

				// 라디오 버튼을 감쌀 컨테이너 생성
				const radioContainer = $('<div class="radio-group"></div>');

				// 라디오 버튼 동적 생성
				radioOptions.forEach(option => {
					const radioItem = `
						<label for="${option.id}" class="radio-label">
							<input type="radio" name="downloadOption" id="${option.id}" value="${option.value}" class="check_mark" checked>
							${option.label}
						</label>
					`;
					radioContainer.append(radioItem);
				});

				// 생성된 라디오 버튼을 `c_pop_body`에 추가
				$('#c_pop_body').append(radioContainer);

				$("#c_pop_box_cancle").click(function () {

					$("#customPopBoxAlert").hide();

					$('#customAlertModal').hide();
					document.body.style.overflow = 'unset';
				});

				$("#c_pop_box_confirm").click(function () {
					const downloadType = $('input[name="downloadOption"]:checked').val();
					if (downloadType === 'zip') {
						page.construction.downloadAllZip();
					}

					$("#customPopBoxAlert").hide();

					$('#customAlertModal').hide();
					document.body.style.overflow = 'unset';
				});
			},

			// 통합 문서 전체 압축 다운로드 (ZIP)
			downloadAllZip() {
				const rootId = documentType + '_' + page.selectedPjtData.cntrctNo;
				const rootNodeData = page.tree.getNode(rootId).data
				var rootNaviId = rootNodeData.naviId;  // 문서 경로 트리 최상위 id 값
				const rootNaviNm = rootNodeData.naviNm; // 최상위 문서(계약)명

				gaiaCommon.LoadingOverlay('body', true); // 파일 업로드 시, 로딩 바 활성화
				$.ajax({
					url: `/api/document/download/all-zip/${rootNaviId}/${rootNaviNm}`,
					type: "GET",
					xhrFields: {
						responseType: "blob"  // 서버 응답을 바이너리(blob) 데이터로 받음
					},
					success: function (data, status, xhr) {
						// 파일명 추출 (Content-Disposition 헤더에서)
						var filename = "construction_document.zip";
						var disposition = xhr.getResponseHeader("Content-Disposition");
						if (disposition && disposition.indexOf("attachment") !== -1) {
							var matches = /filename[^;=\n]*=["']?([^;"']*)["']?/.exec(disposition);
							if (matches !== null && matches[1]) {
								filename = decodeURIComponent(matches[1]);
							}
						}

						// Blob을 URL로 변환 후 다운로드 처리
						var blob = new Blob([data], { type: "application/zip" });
						var link = document.createElement("a");
						var url = window.URL.createObjectURL(blob);
						link.href = url;
						link.download = filename;
						document.body.appendChild(link);
						link.click();
						document.body.removeChild(link);
						window.URL.revokeObjectURL(url);
					},
					complete: function (status, xhr) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화
						gaiaCommon.get(`/api/document/delete-zip/${rootNaviId}`,null, (response) => {
							if (response.nok) {
								gaiaPortal.customAlert(response.message);
							}
						},(xhr, status, error) => {
							console.warn("파일 삭제 요청 실패:", error);
						})
					},
					error: function (xhr, status, error) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화
						console.error("파일 다운로드 실패:", error);
						gaiaPortal.customAlert("{{ message('msg.doc.129') }}"); // 서버 오류로 인해 다운로드할 수 없습니다.
					}
				});
			},

			createExcelDoc() {
				const cntrctNo = page.selectedPjtData.cntrctNo;
				const cntrctNm = page.selectedPjtData.cntrct_nm;

				gaiaCommon.LoadingOverlay('body', true); // 파일 업로드 시, 로딩 바 활성화
				$.ajax({
					url: `/api/document/excel/all/${cntrctNo}/${cntrctNm}`,
					type: "GET",
					xhrFields: {
						responseType: "blob"  // 서버 응답을 바이너리(blob) 데이터로 받음
					},
					success: function (data, status, xhr) {
						// 파일명 추출 (Content-Disposition 헤더에서)
						var filename = "construction_document.zip";
						var disposition = xhr.getResponseHeader("Content-Disposition");
						if (disposition && disposition.indexOf("attachment") !== -1) {
							var matches = /filename[^;=\n]*=["']?([^;"']*)["']?/.exec(disposition);
							if (matches !== null && matches[1]) {
								filename = decodeURIComponent(matches[1]);
							}
						}

						const blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });

						// 다운로드 트리거
						const url = window.URL.createObjectURL(blob);
						const a = document.createElement("a");
						a.href = url;
						a.download = filename;
						document.body.appendChild(a);
						a.click();
						a.remove();
						window.URL.revokeObjectURL(url);
					},
					complete: function (status, xhr) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화

					},
					error: function (xhr, status, error) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화
						console.error("파일 다운로드 실패:", error);
						gaiaPortal.customAlert("{{ message('msg.doc.129') }}"); // 서버 오류로 인해 다운로드할 수 없습니다.
					}
				});
			},
			createExcelTest() {
				const cntrctNo = page.selectedPjtData.cntrctNo;
				const cntrctNm = page.selectedPjtData.cntrct_nm;

				gaiaCommon.LoadingOverlay('body', true); // 파일 업로드 시, 로딩 바 활성화
				$.ajax({
					url: `/api/document/excelTest/${cntrctNo}/${cntrctNm}`,
					type: "GET",
					xhrFields: {
						responseType: "blob"  // 서버 응답을 바이너리(blob) 데이터로 받음
					},
					success: function (data, status, xhr) {
						// 파일명 추출 (Content-Disposition 헤더에서)
						var filename = "construction_document.zip";
						var disposition = xhr.getResponseHeader("Content-Disposition");
						if (disposition && disposition.indexOf("attachment") !== -1) {
							var matches = /filename[^;=\n]*=["']?([^;"']*)["']?/.exec(disposition);
							if (matches !== null && matches[1]) {
								filename = decodeURIComponent(matches[1]);
							}
						}

						const blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });

						// 다운로드 트리거
						const url = window.URL.createObjectURL(blob);
						const a = document.createElement("a");
						a.href = url;
						a.download = filename;
						document.body.appendChild(a);
						a.click();
						a.remove();
						window.URL.revokeObjectURL(url);
					},
					complete: function (status, xhr) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화

					},
					error: function (xhr, status, error) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화
						console.error("파일 다운로드 실패:", error);
						gaiaPortal.customAlert("{{ message('msg.doc.129') }}"); // 서버 오류로 인해 다운로드할 수 없습니다.
					}
				});
			},
			createExcelTest2() {
				const cntrctNo = page.selectedPjtData.cntrctNo;
				const cntrctNm = page.selectedPjtData.cntrct_nm;

				gaiaCommon.LoadingOverlay('body', true); // 파일 업로드 시, 로딩 바 활성화
				$.ajax({
					url: `/api/document/excelTest2/${cntrctNo}/${cntrctNm}`,
					type: "GET",
					xhrFields: {
						responseType: "blob"  // 서버 응답을 바이너리(blob) 데이터로 받음
					},
					success: function (data, status, xhr) {
						// 파일명 추출 (Content-Disposition 헤더에서)
						var filename = "construction_document.zip";
						var disposition = xhr.getResponseHeader("Content-Disposition");
						if (disposition && disposition.indexOf("attachment") !== -1) {
							var matches = /filename[^;=\n]*=["']?([^;"']*)["']?/.exec(disposition);
							if (matches !== null && matches[1]) {
								filename = decodeURIComponent(matches[1]);
							}
						}

						const blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });

						// 다운로드 트리거
						const url = window.URL.createObjectURL(blob);
						const a = document.createElement("a");
						a.href = url;
						a.download = filename;
						document.body.appendChild(a);
						a.click();
						a.remove();
						window.URL.revokeObjectURL(url);
					},
					complete: function (status, xhr) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화

					},
					error: function (xhr, status, error) {
						gaiaCommon.LoadingOverlay('body', false); //로딩 바 비활성화
						console.error("파일 다운로드 실패:", error);
						gaiaPortal.customAlert("{{ message('msg.doc.129') }}"); // 서버 오류로 인해 다운로드할 수 없습니다.
					}
				});
			}
		},
	};
</script>