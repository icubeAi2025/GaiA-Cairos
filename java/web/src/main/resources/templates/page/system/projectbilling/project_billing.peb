{% extends 'layout/base_content' %} {% block content %}

<section class="contents_wrap g-col2 ty1">
    <!-- S: TREE View ------------------------------------------------------------------------ -->
    <div class="treeview_area" >
        <div class="treeview ty_pd0" id="jstree" style="overflow: auto; height:1050px; width:500px;"></div>
    </div>
	<article class="conts g-row">
		<div class="conts_grid">
			<h3 class="conts_tit">{{ message('item.pjtbill.007') }}</h3>
			<div class="toolbar">
				<div class="btn_area s_default _outline">
					<div class="btn_group _outline">
						<button type="button" class="btn" id="" onclick="page.billing.save()">{{ message('btn.006') }}</button>
					</div>
				</div>
			</div>
			<div class="grid" id="billing-grid"></div>
		</div>
	</article>

</section>

{% endblock content %} {% block footer_script %}
<script>
    var errorMessage = "{{ message('msg.012') }}";
	let unCheckRowKeys = [];

    var page = {

		billing: {
			grid: null,
			currentNode: null,
			data: {
				//
			},

			gridInit: function() {
				/*
				class CustomCheckRenderer {
					constructor(props) {
						const el = document.createElement('input');
						//el.type = 'checkbox';
						//el.name = 'isNewBil';
						this.el = el;
						this.render(props);
					}

					getElement() {
						return this.el;
					}
					
					render(props) {
						this.el.checked = Boolean(props.value);
					}
				}
				*/
				
				this.grid = new tui.Grid({
					el: document.getElementById('billing-grid'),
					scrollX: false,
					scrollY: true,					
					useClientSort: false,
					bodyHeight: 500,

					rowHeaders: [
						{
							type: 'checkbox',
							header: "{{ message('item.pjtbill.001') }}", 
							name: 'isBil',
							width: 70,
							align: 'center',
							// renderer: {type: CustomCheckRenderer}
						}						
					],

					columns:[
						{ 
							header: 'is Old Bil', 
							name: 'isOldBil',
							hidden: true,
						},
						{ 
							header: 'bil no', 
							name: 'bilNo',
							hidden: true,
						},
						{ 
							header: 'pjt bil no', 
							name: 'pjtBilNo',
							hidden: true,
						},
						{ 
							resizable: true,
							header: "{{ message('item.pjtbill.002') }}", 
							name: 'menuNm',
							align: 'left',
						},
						{ 
							header: "{{ message('item.pjtbill.003') }}",
							name: 'menuCd',
							align: 'center',
						},
						{ 
							header: "{{ message('item.pjtbill.004') }}",
							name: 'bilCode',
							align: 'center',
						},		
						{ 
							header: "{{ message('item.pjtbill.005') }}",
							name: 'bilNm',
							align: 'left',
						},				
						{ 
							header: "{{ message('item.pjtbill.006') }}",
							name: 'bilDscrpt',
							align: 'left',
						},	
					],
				});

				this.grid.on('uncheck', ev => {
					// console.log('uncheck!', ev);
					if (unCheckRowKeys.length == 0)
						unCheckRowKeys.push (ev.rowKey);
					else
					{
						var find = unCheckRowKeys.find (e => e == ev.rowKey);
						if (find == null)
							unCheckRowKeys.push (ev.rowKey);
					}
				});

				this.grid.on('check', ev => {
					// console.log('check!', ev);
				});
			},

			save: function() {
				
				var bilDataList = [];	// 변경된 Bil Data 목록
				// console.log (this.grid.getCheckedRows());

				var index = 0;
				this.grid.getCheckedRows().forEach ((rowData) => {					
					if (rowData.isOldBil == 0) {
						bilDataList[index] = {
							bilNo: rowData.bilNo,
							menuCd: rowData.menuCd,
							menuNo: rowData.menuNo,
							bilCode: rowData.bilCode,
							pjtNo: this.currentNode.data.pjtNo,
							cntrctNo: this.currentNode.data.cntrctNo,
							pjtType: PLATFORM.CAIROS,
						}
						index += 1;
					}
				});

				var delBilDataList = [];
				if (unCheckRowKeys.length > 0) {
					unCheckRowKeys.forEach ((key) => {
						var rowData = page.billing.grid.getRow(key);	
						if (rowData.isOldBil == 1 && rowData.pjtBilNo != 0) {
							delBilDataList.push (rowData.pjtBilNo);
						}
					});
				}

				unCheckRowKeys = []; // 전역변수로 선언된 Uncheck 저장 값 초기화

				// 저장할 데이타가 없을 경우 return;;
				if (bilDataList.length == 0 && delBilDataList.length == 0)
					return;
				
				//console.log("====================== 입력 될 데이터 ======================");
				//console.log(bilDataList);
				//console.log(delBilDataList);
				//console.log("============================================================");
				
				var param = {
					createBil: bilDataList,
					deleteBil: delBilDataList,
				};

				//FormData 새로운 객체 생성 
				var formData = new FormData();
				formData.append('param', new Blob([ JSON.stringify(param) ], {type : "application/json"}));

				gaiaCommon.postForm('/api/system/projectbilling/create',formData,(data)=>{
					page.billing.setList (page.billing.currentNode);
				}, (response)=>{
					// 저장할 수 없습니다.
					gaiaCommon.customAlert("{{ message('msg.045') }}");
				})
			},

			setList: function(node) {
				//console.log("============================================================");
				//console.log(node);
				this.currentNode = node;
				unCheckRowKeys = []; // 전역변수로 선언된 Uncheck 저장 값 초기화

				// get grid data
				cntrctNo = node.data.cntrctNo;
				url = "/api/system/projectbilling/" + cntrctNo + "/project-billing-list";
				gaiaCommon.get(url,null,(response)=>{
					let data = response.details.billingList;
					page.billing.data = data;
					page.billing.grid.resetData(data);
				},(response)=>{
					alert(response.message);
				})
			},
		},

        tree: {
            obj: null,

            refresh: function () {
				this.obj.jstree(true).refresh();
			},

            getNode: function (id) {
				return this.obj.jstree("get_node", id);
			},

            init: function () {
                this.obj = $("#jstree").jstree({
					plugins: ["search"],
                    core: {
						data: function (obj, cb) {
							gaiaCommon.get("/api/system/projectbilling/cmis-project-list", {}, function (result) {
								var data = [];
								if (result.details?.treeList) {
									result.details?.treeList.forEach((item, index) => {
										data.push({ 
											id: item.dept_id,
											parent: item.up_dept_id,
											text: item.pjt_nm,
											state: { opened: true },
											data: {
                                                    cntrctNo: item.cntrct_no,
                                                    pjtNo: item.pjt_no,
                                                    deptId: item.dept_id
                                                },
											icons: 'fa-solid fa-caret-right',
										});
									});
									cb.call(obj, data);
								}
							});
						},
						check_callback: true, // 요거이 없으면, create_node 안먹음
						themes : {
								"theme" : "default",
								"dots": false,
								"responsive": false,
								"icons" : false
						}
					},
				});

				this.obj.on("select_node.jstree", function (e, data) {
					 page.billing.setList (data.node);
				});
			},
        },
    };

	$(function () {
		gaia.create({
            $init: function ($params) {
                gaiaPortal.navMenuInit("SYSTEM02", "{{ message('item.pjtbill.008') }}");
				page.tree.init();
				page.billing.gridInit();

				gaia.loaded = true;

            }
        });
	});

</script>

<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>

{% endblock footer_script %}