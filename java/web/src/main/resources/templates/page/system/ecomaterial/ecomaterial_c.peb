{% extends header ? 'layout/base_content' : 'layout/base_popup' %}
{% block content %}
<article class="conts g-row">
    <div class="group">
        <div class="conts_form">
            <div class="btn_area s_default _outline">
                <button type="button" class="btn _outline" onclick="page.save()">{{ message("btn.006") }}</button>
                <button type="button" class="btn _outline" onclick="page.close()">{{ message("btn.007") }}</button>

                <div class="btn_group iconbtns" id="newWindow">
                    <button class="icon_btn" onclick="page.open()">
                        <i class="ic ic-sent-to-back"></i>
                        <span class="tooltip">
                            {{message("item.com.017")}}
                        </span>
                    </button>
                </div>

            </div>
            <div class="form_box">
                <!-- row -->
                <div class="row">
                    <div class="col">
                        <div class="form_label required">
                            {{ message('item.eco.006') }}
                        </div>
                        <div class="form_data">
                            <span class="item_wrap">
                                <span class="selectbox" id="searchBox">
                                </span>
                            </span>
                        </div>
                    </div>
                </div>
                <!-- row -->
                <div class="row cols2">
                    <div class="col">
                        <div class="form_label">
                            {{ message('item.eco.010') }}
                        </div>
                        <div class="form_data">
                            <span class="item_wrap">
                                <input type="text" class="form-control maxlength" id="preCert" name="preCert"
                                    maxlength="100" />
                            </span>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form_label">
                            {{ message('item.eco.011') }}
                        </div>
                        <div class="form_data">
                            <input type="text" class="form-control maxlength" id="finalCert" name="finalCert"
                                maxlength="100" />
                        </div>
                    </div>
                </div>
                <!-- row -->
                <div class="row cols2">
                    <div class="col">
                        <div class="form_label">
                            {{ message('item.eco.012') }}
                        </div>
                        <div class="form_data">
                            <input type="text" class="form-control maxlength" id="makrNm" name="makrNm"
                                maxlength="50" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form_label">
                            {{ message('item.eco.013') }}
                        </div>
                        <div class="form_data">
                            <input type="text" class="form-control maxlength" id="certRsn" name="certRsn"
                                maxlength="250" />
                        </div>
                    </div>
                </div>
                <!-- row -->
                <div class="row">
                    <div class="col">
                        <div class="form_label">
                            {{ message('item.com.022') }}
                        </div>
                        <div class="form_data">
                            <textarea class="maxlength" id="rmrk" name="rmrk" maxlength="500"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="s_conts conts_form">
                <h3 class="conts_tit" style="padding-bottom: 0;">{{ message('item.eco.014') }}</h3>

                <!-- S: 선택된 항목 표시 -->
                <p class="selected_list">
                </p>

                <div class="search_wrap">
                    <div class="searchbox_wrap">
                        <input type="text" id="searchText"
                            onkeypress="if( event.keyCode == 13 ){materialGrid.search(event);}"
                            placeholder="{{ message('msg.004') }}" />
                        <button type="button" class="icon_btn" onclick="materialGrid.search(event)">
                            <i class="ic ic-search"></i>
                            <span class="blind"> {{ message("item.com.014") }}</span>
                        </button>
                    </div>
                </div>

                <div class="grid" id="ecomaterial-grid"></div>
            </div>
        </div>
    </div>
</article>
{% endblock content %} {% block footer_script %}

<script>
    //새창 아이콘 렌더러
    const newWindowViewRenderer = window.NewWindowViewRenderer;
    const params = new URLSearchParams(window.location.search);
    const pjtNo = params.get("pjtNo");
    const cntrctNo = params.get("cntrctNo");
    var type = params.get("type");
    let materialList = [];

    var page = {
        init: function () {
            if (type === 'p') {
                $("#newWindow").hide();
            }
            gaiaCommon.LoadingOverlay('body', true);
            materialGrid.init();
            gaiaCommon.LoadingOverlay('body', false);
        },

        close: function () {
            if (type === 'd') {
                window.location.replace(`/system/ecomaterial?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
            } else if (type === 'p') {
                window.close();
            }
            sessionStorage.setItem('ecoCntrctNo', cntrctNo);
        },

        // 새창
        open: function () {
            const width = 1500;
            const height = 700;
            let left = Math.ceil((window.screen.width - width) / 2);
            left += window.screenLeft; // 듀얼 모니터일 때
            const top = Math.ceil((window.screen.height - height) / 2);

            window.open(
                `/system/ecomaterial/create?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&type=p`,
                "",
                `width=${width},height=${height},left=${left},top=${top}`
            );

            window.location.replace(`/system/ecomaterial?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
            return false;
        },

        save: function () {
            const ecoTpCd = $("#ecoTpCd").val();
            const preCert = $("#preCert").val().trim();
            const finalCert = $("#finalCert").val().trim();
            const makrNm = $("#makrNm").val().trim();
            const certRsn = $("#certRsn").val().trim();
            const rmrk = $("#rmrk").val().trim();

            materialList = materialGrid.getCheckedRows().map(row => ({
                gnrlexpnsCd: row.rsceCd,
                rsceNm: row.dtlCnsttyNm,
                specNm: row.specNm,
                unit: row.unit
            }));

            // 친환경 자재 데이터
            let ecoData = {
                cntrctNo: cntrctNo,
                ecoTpCd: ecoTpCd,
                preCert: preCert,
                finalCert: finalCert,
                makrNm: makrNm,
                certRsn: certRsn,
                rmrk: rmrk,
                materialList: materialList
            };

            const url = "/api/system/ecomaterial/create";

            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.post(url, ecoData, function (result) {
                gaiaCommon.customAlert(result.ok ? "{{ message('msg.005') }}" : "{{ message('msg.eco.001') }}", function () {
                    sessionStorage.setItem('ecoCntrctNo', cntrctNo);
                    page.close();
                    gaiaCommon.LoadingOverlay('body', false);
                });
            }, function (error) {
                let callback;
                if (!$('#ecoTpCd').val()) {
                    callback = function () { $('#ecoTpCd').focus(); }
                    gaiaCommon.customAlert("{{ message('msg.eco.001') }}", callback);
                }
            });

        },

        initializeSelectBoxes: function () {
            let selectBoxRequests = [
                {
                    //친환경 유형
                    cmnGrpCd: "e2a882a5-7eeb-4f53-b75f-ca803e767b17",
                    selectBoxId: "ecoTpCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "== 선택 ==",
                    paramNm: "ecoTpCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "",
                },
            ];

            page.makeSelectBox(selectBoxRequests);
        },
        // 셀렉트박스 호출
        makeSelectBox: function (comCodeSelectBoxGets) {
            gaiaCommon.post("/api/util/make-selectBox",comCodeSelectBoxGets,(data)=>{
                let returnMap = data.details.returnMap;
                comCodeSelectBoxGets.forEach(function (item) {
                    let addAppLineContent = document.getElementById(
                        item.selectBoxId
                    );
                    let categorySelect = `${returnMap[item.selectBoxId]}`;
                    if (addAppLineContent) {
                        addAppLineContent.innerHTML =
                            returnMap[item.selectBoxId];
                    }
                    $("#searchBox").prepend(categorySelect);
                });
            }, (xhr,status,error) => {
                console.error("Error making select box:", status, error);
            })
        },
    };

    // 자재 목록 그리드
    var materialGrid = {
        data: {},

        init: function () {
            const Grid = tui.Grid;
            let _this = this;

            if (this.ecomaterialGrid) {
                this.ecomaterialGrid.destroy();
                this.ecomaterialGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/system/ecomaterial/materialList",
                    method: "Get",
                    initParams: {
                        cntrctNo: cntrctNo,
                        searchText: searchText
                    },
                },
            })

            if (!this.ecomaterialGrid) {
                this.ecomaterialGrid = new Grid({
                    el: document.getElementById("ecomaterial-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: true,
                    draggable: false,
                    contextMenu: null,
                    minBodyHeight: 280,
                    bodyHeight: 280,
                    rowHeaders: [
                        {
                            type: "checkbox",
                            header: `<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />`,
                        }
                    ],
                    columns: [
                        {
                            header: "{{ message('item.eco.007') }}",
                            name: "dtlCnsttyNm",
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.eco.008') }}",
                            name: "specNm",
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.eco.009') }}",
                            name: "unit",
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.eco.015') }}",
                            name: "govsplyMtrlYn",
                            resizable: true,
                        },
                    ],
                });

                this.ecomaterialGrid.on("check", function () {
                    materialGrid.updateSelectedList();
                });
                this.ecomaterialGrid.on("uncheck", function () {
                    materialGrid.updateSelectedList();
                });
                this.ecomaterialGrid.on("checkAll", function () {
                    materialGrid.updateSelectedList();
                });
                this.ecomaterialGrid.on("uncheckAll", function () {
                    materialGrid.updateSelectedList();
                });
            }
            refreshGrid(materialGrid.ecomaterialGrid);
        },

        // checked된 행들 반환
        getCheckedRows: function () {
            if (!this.ecomaterialGrid) return [];
            return this.ecomaterialGrid.getCheckedRows();
        },

        // 선택된 item list에 추가
        updateSelectedList: function () {
            const selectedData = materialGrid.getCheckedRows();

            const selectedListContainer = document.querySelector(".selected_list");
            selectedListContainer.innerHTML = ""; // 기존 선택 항목 초기화

            if (selectedData.length > 0) {
                selectedListContainer.classList.add("on");
            } else {
                selectedListContainer.classList.remove("on");
            }

            selectedData.forEach((row, idx) => {
                const span = document.createElement("span");
                span.classList.add("selected_item");
                span.innerHTML = `
                    <span class="item">${row.dtlCnsttyNm ? row.dtlCnsttyNm : '{{ message("msg.eco.002") }}'} / ${row.specNm ? row.specNm : '{{ message("msg.eco.003") }}'}</span>
                    <button type="button" class="icon_btn" onclick="materialGrid.removeSelectedItem('${row.rsceCd}')">
                        <i class="ic ic-close"></i>
                        <span class="blind">{{ message('btn.002') }}</span>
                    </button>
                `;
                selectedListContainer.appendChild(span);
            });
        },

        // list에서 item 삭제
        removeSelectedItem: function (rsceCd) {
            const allRows = materialGrid.ecomaterialGrid.getData();

            for (let i = 0; i < allRows.length; i++) {
                if (allRows[i].rsceCd === rsceCd) {
                    allRows[i]._attributes.checked = false;
                    materialGrid.ecomaterialGrid.setRow(i, allRows[i]);
                    break;
                }
            }

            materialGrid.updateSelectedList();
        },

        search: function () {
            searchText = $('#searchText').val();

            materialGrid.init();
            materialGrid.updateSelectedList();

        },
    }

    if (opener) {
        opener.document.onkeydown = fkey;
        opener.document.onkeypress = fkey;
        opener.document.onkeyup = fkey;

        function fkey(e) {
            if (window.event.keyCode == 116) {
                window.close();
            }
        };

        window.opener.onbeforeunload = function () {
            if (window) {
                window.close();
            }
        };

    }

    $(function(){
        gaia.create({
            $init: function ($params) {
                gaiaPortal.navMenuInit("M0738", "{{ message('item.eco.004') }}");
                $("#menuDepth").append(`<li class="breadcrumb_item">{{ message('item.eco.004') }}</li>`);
                page.initializeSelectBoxes();
                page.init();
                
                gaia.loaded = true;
            }
        });
    })    

</script>
{% endblock footer_script %}