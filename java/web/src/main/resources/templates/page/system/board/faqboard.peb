{% extends 'layout/base_content' %} {% block head %}
{% endblock %}{% block content %}
<article class="conts g-row" id="container">
    <div class="group">
        <div class="conts_grid">
            <h3 class="conts_tit">FAQ 목록</h3>
            <div class="search_wrap" id="searchBox">
                <span class="selectbox">
                    <select name="searchType" id="searchType">
                        <option selected value="">{{ message('item.com.059') }}</option>
                        <option value="boardTitle">{{ message('item.com.060') }}</option>
                        <option value="boardTxt">{{ message('item.com.061') }}</option>
                    </select>
                </span>

                <div class="searchbox_wrap">
                    <input type="text" name="searchText" id="searchText"
                        onkeypress="if( event.keyCode == 13 ){boardGrid.search();}"
                        placeholder="{{ message('item.com.060') }}, {{ message('item.com.061') }}" />
                    <button type="button" class="icon_btn search" onclick="boardGrid.search()">
                        <i class="ic ic-search"></i><span class="blind">{{ message('item.com.014') }}</span>
                    </button>
                </div>
            </div>
            <div class="toolbar">
                <div class="btn_area s_default">
                    {{ btnHtml | raw }}
                </div>
                <div class="selectbox sort">
                    <select name="items-per-page" id="items-per-page" onchange="boardGrid.changePerPage()">
                        <option selected disabled value="">
                            {{ message("item.com.004") }}
                        </option>
                        <option value="5">5</option>
                        <option selected value="10">10</option>
                        <option value="15">15</option>
                    </select>
                </div>
            </div>

            <div class="grid" id="board-grid"></div>

        </div>
    </div>
</article>
{% endblock content %} {% block footer_script %}
<script>
    const params = new URLSearchParams(window.location.search);
    let pjtNo;
    let cntrctNo;
    let isDelAuth = "{{ isDelAuth }}";

    var boardCategory = params.get("boardCategory") ? params.get("boardCategory") : "";
    var boardType = "2";
    var board = {
        init: function () {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;

            board.initializeSelectBoxes()
            boardGrid.init(boardType, boardCategory)
        },

        updateboardCategory: function () {
            boardCategory = $("#category").val() || "";
            boardGrid.init(boardType, boardCategory);
        },

        initializeSelectBoxes: function () {
            let selectBoxRequests = [
                {
                    //카테고리
                    cmnGrpCd: "7f4126c5-7670-4aae-ab58-0b758a4455ad",
                    selectBoxId: "category",
                    selectBoxNmType: "KOR",
                    ckeckedValue: boardCategory,
                    orderByCol: "",
                    orderByType: "",
                    paramNm: "category",
                    funName: "board.updateboardCategory",
                    funParam: "",
                    funtype: "onchange",
                },
            ];

            board.makeSelectBox(selectBoxRequests);
        },
        // 셀렉트박스 호출
        makeSelectBox: function (comCodeSelectBoxGets) {
            gaiaCommon.post("/api/util/make-selectBox",comCodeSelectBoxGets,(data) => {
                let returnMap = data.details.returnMap;
                comCodeSelectBoxGets.forEach(function (item) {
                    let addAppLineContent = document.getElementById(item.selectBoxId);
                    if (addAppLineContent) {
                        addAppLineContent.innerHTML = returnMap[item.selectBoxId];
                    }

                    if (!$('#categoryBox').length) {
                        let categorySelect = `<span class="selectbox" id="categoryBox">${returnMap[item.selectBoxId]}</span>`;
                        $("#searchBox").prepend(categorySelect);
                    }
                    board.updateboardCategory();
                });

            },(xhr, status, error) => {
                console.error("Error making select box:", status, error);
            })
        },
    }

    // board 그리드
    var boardGrid = {
        data: {},
        init: function (boardType, boardCategory, searchType, searchText) {
            const Grid = tui.Grid;

            let _this = this;

            if (this.boardGrid) {
                this.boardGrid.destroy();
                this.boardGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/system/board/list",
                    method: "Get",
                    initParams: {
                        boardType: boardType,
                        boardCategory: boardCategory,
                        searchType: searchType,
                        searchText: searchText
                    },
                },
            })

            if (!this.boardGrid) {
                this.boardGrid = new Grid({
                    el: document.getElementById("board-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: false,
                    draggable: false,
                    contextMenu: null,
                    minBodyHeight:400,
                    pageOptions: {
                        perPage: parseInt($('select[id="items-per-page"]').val(), 10),
                    },
                    rowHeaders: [
                        {
                            type: "checkbox",
                            header: `<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />`,
                            width: 100,
                            renderer: {
                                type: window.IconRenderer,
                                options: [
                                    {
                                        type:'checkBox'
                                    },
                                    {
                                        type:'trash',
                                        url: "/api/system/board/delete",
                                        idField: "boardCd",
                                        keyName: "boardList",
                                        auth: isDelAuth === "true",
                                        gridId: "board-grid",
                                        msgList: {
                                            confirmTit: "{{ message('item.board.006') }}",
                                            confirmMsg: "{{ message('msg.009') }}",
                                            completeMsg: "{{ message('msg.006') }}"
                                        }
                                    }
                                ],
                            },
                        },
                    ],
                    columns: [
                        {
                            header: "No",
                            name: "rownum",
                            align: 'center',
                            width: 50,
                        },
                        {
                            header: "{{ message('item.com.060') }}",
                            name: "boardTitle",
                            align: 'left',
                            width: 800,
                            renderer: {
                                type: window.IconRenderer,
                                options: [
                                    {
                                        type:'newWindow',
                                        align:"right",
                                        isHover:true,
                                        gridId: "board-grid",
                                        idFields: "boardNo,boardType,boardCategory",
                                        open: {
                                            url: `/system/board/read?boardNo={id1}&boardType={id2}&boardCategory={id3}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`
                                        }
                                    }
                                ],
                            },
                            resizable: true,
                            ellipsis: true,
                        },
                        {
                            header: "{{ message('item.com.064') }}",
                            name: "usrNm",
                            align: 'center',
                        },
                        {
                            header: "{{ message('item.com.063') }}",
                            name: "rgstDt",
                            align: "center",
                        },
                    ],
                });
                this.boardGrid.on("click", function (e) {
                    const rowKey = e.rowKey;
                    if (e.columnName == "_checked") {
                        let temp = boardGrid.boardGrid.getRow(rowKey);
                        temp._attributes.checked = boardGrid.boardGrid.getRow(rowKey)._attributes.checked ? false : true;
                        boardGrid.boardGrid.setRow(rowKey, temp);
                        return e.stop();
                    }
                })
            }
            refreshGrid(boardGrid.boardGrid);
        },
        create: function () {
            window.location.href = `/system/board/create?boardType=${boardType}&boardCategory=${boardCategory}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`;
        },
        update: function () {
            const checkedRows = this.boardGrid.getCheckedRows();
            const checkedNos = checkedRows.length;

            if (checkedNos == 1) {
                checkedRows.forEach(rowData => {
                    const boardNo = rowData.boardNo;
                    window.location.href = `/system/board/update?boardType=${boardType}&boardNo=${boardNo}&boardCategory=${boardCategory}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`;
                });
            } else {
                gaiaCommon.customAlert("{{ message('msg.020') }}");
            }
        },
        delete() {
            const listName = "boardList";
            let checked = [];

            const checkedRows = this.boardGrid.getCheckedRows();

            checkedRows.forEach(rowData => {
                checked.push(rowData.boardCd);
            });

            if (checkedRows.length > 0) {
                gaiaCommon.customConfirm("{{ message('item.board.006') }}", "{{ message('item.board.006') }}", "{{ message('msg.009') }}", function () {
                    let data = { [listName]: checked };

                    gaiaCommon.post("/api/system/board/delete",data,(response) => {
                        gaiaCommon.customAlert("{{ message('msg.006') }}");
                        boardGrid.boardGrid.reloadData();
                    },(xhr) => {
                        console.error(
                            "Error deleting data:",
                            xhr.responseText
                        );
                    })
                });

            } else {
                gaiaCommon.customAlert("{{ message('msg.021') }}");
            }
        },
        search() {
            const searchType = $("#searchType").val();
            const searchText = $('#searchText').val();
            boardGrid.init(boardType, boardCategory, searchType, searchText);

            boardGrid.pagination = boardGrid.boardGrid.paginationManager.getPagination();
            boardGrid.pagination.setItemsPerPage(boardGrid.limit);
            boardGrid.pagination.reset();
        },
        changePerPage() {
            var size = $('select[id="items-per-page"]').val();
            boardGrid.limit = size;
            boardGrid.boardGrid.setPerPage(boardGrid.limit);

            boardGrid.pagination = boardGrid.boardGrid.paginationManager.getPagination();
            boardGrid.pagination.setItemsPerPage(boardGrid.limit);
            boardGrid.pagination.reset();
        },
    }

    $(function () {
        gaia.create({
            $init: function ($params) {
                gaiaPortal.navMenuInit("SYSTEM01", "FAQ 관리");
                board.init()

                gaia.loaded = true
            }
        });
    })
</script>
{% endblock footer_script %}