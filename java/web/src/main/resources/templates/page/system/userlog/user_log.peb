{% extends 'layout/base_content' %}
{% block head %}
{% endblock %}
{% block content %}
<!--*디자인 적용 new 시작*-->
<section class="contents_wrap g-row">
<article class="conts_area">
	<div class="conts">
		<div class="conts_grid">
			<!-- S: search wrap ---------------------------------------------- -->
			<div class="search_group">   <!-- 검색 조건 박스-->
                <div class="search_row">   <!-- 검색 조건 1번째 줄 -->
                    <div class="search_col">
                        <div class="search_label">로그 유형</div>
                        <div class="search_data">
                            <span class="selectbox">
                                <select name="log_type" id="log_type">
                                    <option selected value="">전체</option>
                                    <option value="VIEW">접속</option>
                                    <option value="FUNCTION">기능</option>
                                    <option value="ETC">기타</option>
                                </select>
                            </span>
                        </div>
                    </div>
                    <div class="search_col">
                        <div class="search_label">사용자</div>
                        <div class="search_data">
                            <input type="text" name="user" placeholder="이름, ID 또는 IP 입력" onkeypress="if(event.keyCode == 13){page.userLog.search();}">
                        </div>
                    </div>
                </div>
                <div class="search_row">
                    <div class="search_col">
                        <div class="search_label">기간</div>
                        <div class="search_data">
                            <input type="date" name="start_dt" class="date" id="start_dt" placeholder="날짜 입력">
                            <span class="range-separator">~</span>
                            <input type="date" name="end_dt" class="date" id="end_dt" placeholder="날짜 입력">
                        </div>
                    </div>
                    <div class="search_col">
                        <div class="search_label">
                            <button type="button" class="btn _outline" onclick="page.setStartDateByOffset('7d')">7일</button>
                            <button type="button" class="btn _outline" onclick="page.setStartDateByOffset('1m')">1개월</button>
                            <button type="button" class="btn _outline" onclick="page.setStartDateByOffset('3m')">3개월</button>
                            <button type="button" class="btn _outline" onclick="page.setStartDateByOffset('6m')">6개월</button>
                            <button type="button" class="btn _outline" onclick="page.setStartDateByOffset('1y')">1년</button>
                        </div>
                        <div class="search_data"></div>
                    </div>
                </div>
                <div class="search_btn_wrap">
                    <button type="button" class="btn _fill" onclick="page.userLog.search()">검색</button>
                    <button type="button" class="btn _outline" onclick="page.userLog.searchInit()">초기화</button>
                </div>
            </div>
			<div class="toolbar">
				<div class="btn_area s_default">
<!--				    <button type="button" class="btn _outline" onclick="page.userLog.deleteUserLogList()">{{ message('btn.002') }}</button> -->
				<div class=totla-count>
					총 <strong id="totalCnt">0</strong>건
				</div>
			    </div>
				<span class="selectbox" style="margin-left: inherit; width: inherit;">
					<!-- <select name="items-per-page" id="items-per-page" onchange="page.changePerPage()"> -->
					<select name="items-per-page" id="items-per-page">
					  <option selected disabled value="">{{ message('item.com.004') }}</option>
					  <option value="5">5</option>
					  <option value="10">10</option>
					  <option value="15">15</option>
					</select>
				</span>
			</div>
			<div class="grid" id="user-log-grid"></div>
		</div>
	</article>
</section>

{% endblock content %}

{% block footer_script %}
<style>
.search_group {
    border: solid 1px #EAEAEA;
    border-radius: 10px;
    padding: 15px;
}
.search_row {
    display: flex;
    gap: 16px; /* 항목 간 간격 */
    align-items: center;
    justify-content: space-between; /* 아이템 사이 동일 간격 */
    padding-bottom: 10px;
}

.search_col {
    flex: 1;                /* 모든 항목 동일 너비로 */
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 0;           /* 줄어들 수 있게 설정 */
}

.search_label {
    white-space: nowrap;
    font-weight: 500;
    width: 80px;
}

.search_data {
    flex: 1;                /* 나머지 공간 차지 */
    display: flex;
    align-items: center;
    gap: 4px;
}
.search_btn_wrap {
    display: flex;
    gap: 8px;
    justify-content: center; /* 우측 정렬 */
    margin-top: 12px;
}
</style>
<script>
	const BASEPATH = '/api/system/';
	let pjtNo;
	let cntrctNo;
    let logType;
    let user;
    let startDt;
    let endDt;

	var page ={
		isDelAuth: "{{ isDelAuth }}", 	// 삭제 권한 여부
		init() {
			//프로젝트 정보 설정
			const urlParams = new URLSearchParams(window.location.search);
			pjtNo = urlParams.get('pjtNo');
			cntrctNo = urlParams.get('cntrctNo');

			// Timepicker 날짜 초기화
			page.setTodayToInput('start_dt');
			page.setTodayToInput('end_dt');

			gaiaPortal.navMenuInit('SYSTEM05', '사용자 로그 목록');
			this.userLog.gridInit();

			// 'items-per-page' 셀렉트박스 변경 이벤트 리스너 추가
			$('#items-per-page').on('change', (event) => {
				const newPerPage = parseInt(event.target.value, 10);
				if (this.userLog.grid) {
					this.userLog.grid.setPerPage(newPerPage); // 그리드의 perPage 설정 업데이트
				}
			});

		},

		//그리드
		userLog: {
			grid: null,
			obj: null,
			requestData: {},
			isSearch: false,
			data: {
				searchData: {},
				sortData: null
			},

			gridInit: function() {
				this.setRequestDatas();		// 요청 데이터 값 할당
				const dataSource = createDataSource({
                    readData: {
                        url: '/api/system/user-log/user-log-list', // 데이터를 요청할 API URL
                        method: 'GET',
                        initParams: {
                            logType: logType,
                            user: user,
                            startDt: startDt,
                            endDt: endDt
                        },

                    }
                })

				if (this.grid) { // 이미 그리드가 있으면 제거하고 새로 생성.
                    this.grid.destroy();
                    this.grid = null;
                }

				if (!this.grid) {
					this.grid = new tui.Grid({
						el: document.getElementById('user-log-grid'),
						data: dataSource,
						pageOptions: {
							useClient: false,
							perPage: 10, // 페이지당 항목 수
						},
						useClientSort: false,
						scrollX: false,
						scrollY: true,
						// bodyHeight: 200,
						minBodyHeight: 400,
						contextMenu: null,

						columns:[
							{
								header: '번호',
								name: 'logNo',
								sortable: true,
								sortingType: 'asc',
								resizable: true,
								align: 'center',
								validation: { required: true }
							},
							{
								header: '유형',
								name: 'logType',
								sortable: true,
								sortingType: 'asc',
								align: 'center',
								validation: { required: true }
							},
							{
								header: '사용자(ID)',
								name: 'userName',
								className: 'userName', //상세 조회 기능 구현 시, 설정.
								align: 'center',
								sortable: true,
								sortingType: 'asc',
								formatter: function({ row }) {
								    // 사용자명 + 사용자ID 합침
								    return `${row.userName} (${row.userId})`;
                                }
							},
							{
								header: '수행업무',
								name: 'execType',
								sortingType: 'asc',
								align: 'center',
								renderer: {
								    type: window.IconRenderer,
                                	options:[ {
                                        //새창, 상세 조회 시 필요한 값 설정
                                        type:"newWindow",
                                        isHover:true,
                                        align:"right",
                                        absolute:true,
                                        open:{
                                            url: `/system/user-log/read?logNo={id}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`, // 상세조회 url
                                        },
                                	    idField: 'logNo', //조회에 필요한 id
                                	    gridId: 'user-log-grid'
                                    }]
                                }
							},
							{
								header: '수행일시',
								name: 'rgstDt',
								align: 'center',
								sortable: true,
								sortingType: 'asc',
								validation: { required: true },
                                formatter: function (e) {
                                    const dateValue = e.value ? e.value.toString() : "";
                                    if (dateValue && dayjs(dateValue, "YYYYMMDDHHmmss").isValid()) {
                                        return dayjs(dateValue, "YYYYMMDDHHmmss").format("YYYY-MM-DD HH:mm:ss");
                                    }
                                    return "";
                                }
							},
							{
								header: '성공 여부',
								name: 'result' ,
								align: 'center'
							}
						],
					});

					refreshGrid(this.grid); // 그리드 리사이즈 문제 해결
				}

				// 'beforeSort' 이벤트 핸들러 설정(정렬 ui 멀티 컬럼 정렬로 나타나는 문제 해결)
                this.grid.on("beforeSort", (ev) => {
					// 'columns' 데이터 가져오기 및 멀티 컬럼 정렬 방지 처리
					const { columns } = ev.instance.store.data.sortState;
					if (columns.length > 1) {
						columns.shift();
					}

					// 추가 파라미터 설정
					let additionalParams = this.requestData;

					// 검색 조건이 활성화된 경우(search 관련 데이터 추가)
					if (this.isSearch) {
						additionalParams.searchText = this.data.searchData.searchText;
						additionalParams.columnNm = this.data.searchData.columnNm;
					}

					// 추가 파라미터를 요청 옵션에 병합
					ev.instance.dataProvider.setRequestParams(additionalParams);

				});

				this.grid.on("afterSort", (ev) => {
					// 정렬된 상태에서 다른 컬럼을 정렬하려고 할 때 정렬 초기화 진행.
					if(page.userLog.grid.getSortState().columns.length > 1){
						page.userLog.grid.unsort(page.userLog.grid.getSortState().columns[0].columnName);
					}
				});

				// errorResponse 이벤트 핸들러 추가
                this.grid.on("errorResponse", function (ev) {
                    // ev.xhr: XMLHttpRequest 객체를 참조
                    const statusCode = ev.xhr.status;

                    if (statusCode === 403) {
                        gaiaCommon.customAlert("로그인이 필요합니다. 로그인 페이지로 이동합니다.", function(){
							location.reload();
						});
                    } else {
                        console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                    }
                });

				// 요청에 대한 응답 처리
				this.grid.on("response", function (ev) {
					page.userLog.setTotalCount(ev);
				});
			},

			search(){
			    // Timepicker 날짜 유효성 확인
                if(page.validateDates()) {
                	this.setRequestDatas()
                    this.grid.readData(1, this.requestData, true);
                }

			},

			deleteUserLogList(){
				const url = '/api/system/user-log/delete';
				let logNoList = []; //체크된 행의 id 정보 가져오기

				this.grid.getCheckedRows().forEach(function(v){
                    logNoList.push(v.logNo);
				});

				if (logNoList.length > 0) {
                    //정말 삭제하시겠습니까?
                    gaiaCommon.customConfirm("사용자 로그 삭제", "사용자 로그 삭제", "{{ message('msg.009') }}", function(){
						gaiaCommon.post(url, {logNoList}, function (result) {
                            gaiaCommon.customAlert("{{ message('msg.006') }}"); // 삭제되었습니다.
                            page.userLog.grid.reloadData();
                        });
                    });

                } else {
                    gaiaCommon.customAlert("삭제할 사용자 로그를 선택해주세요.");
					return false;
                }

			},

			moveUpdateUserLog(){
                const checkedRows = this.grid.getCheckedRows();
				const checkUserLogSize = checkedRows.length;

				if(checkUserLogSize == 1){
					const logNo = checkedRows[0].logNo;

					window.location.href = `/system/user-log/form?mode=update&corpNo=${corpNo}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`;

				}else{
					page.customAlert("{{ message('msg.002') }}"); // 하나의 회사를 선택해주세요.
					return false;
				}
			},

			// 초기화 버튼 클릭할 경우 실행
			searchInit() {
				document.getElementById('log_type').value = '';

		        // 사용자 입력 초기화
		        document.querySelector('input[name="user"]').value = '';

		        // 날짜 입력 초기화
		        document.getElementById('start_dt').value = page.formatToday();
		        document.getElementById('end_dt').value = page.formatToday();
			},

			// 전체 조회 건 수 설정
			setTotalCount(ev) {
				const res = JSON.parse(ev.xhr.responseText);
	    		const totalCount = res?.data?.pagination?.totalCount ?? 0;
				const el = document.getElementById("totalCnt");
				el.textContent = totalCount;
			},

			// 요청 보낼 파라미터 값 할당
			setRequestDatas(){
				logType = $('select[name="log_type"]').val();
	            user = $('input[name="user"]').val();
	            startDt = $('input[name="start_dt"]').val();
	            endDt = $('input[name="end_dt"]').val();

	            this.isSearch = true;

	            // 서버 전달할 데이터 세팅
	            this.requestData.logType = logType;
	            this.requestData.user = user;
	            this.requestData.startDt = startDt;
	            this.requestData.endDt = endDt;

                this.data.searchData = {
                    logType: logType,
                    user: user,
                    startDt: startDt,
                    endDt: endDt
                };
			}
		},


		//알림창 기능
		customAlert(msg){
			$('.pop_box.toast').show();
			$('.toast_msg').text(msg);
			$('.pop_box.toast').addClass('on');

			// 일정 시간 후에 'on' 클래스 제거
			setTimeout(function() {
				$('.pop_box.toast').removeClass('on');
				$('.pop_box.toast').hide();
			}, 1500); // 1500ms = 1.5초
		},

		// Timepicker 현재 날짜로 초기화
        formatToday() {
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            return `${yyyy}-${mm}-${dd}`;
        },

        // 선택한 Timepicker formatToday 함수 실행
        setTodayToInput(id) {
            const el = document.getElementById(id);
            if (el && !el.value) {
              el.value = this.formatToday();
            }
        },

        // Timepicker 유효성 확인
        validateDates() {
            const startEl = document.getElementById('start_dt');
            const endEl = document.getElementById('end_dt');

            if (!startEl.value || !endEl.value) {
              alert("시작일과 종료일을 모두 입력해주세요.");
              return false;
            }

            const startDate = new Date(startEl.value);
            const endDate = new Date(endEl.value);
            const today = new Date();
            today.setHours(23, 59, 59, 999); // 오늘 마지막 시간으로 설정: 날짜 비교할 때 시간 기준으로 비교함

            // 종료일이 시작일보다 이전
            if (endDate < startDate) {
              alert("검색 종료 시점은 시작 시점보다 뒤에 있어야 합니다.");
              return false;
            }

            // 날짜 범위가 1년 초과
            const oneYearMs = 365 * 24 * 60 * 60 * 1000;
            if ((endDate - startDate) > oneYearMs) {
              alert("날짜 검색 범위는 최대 1년입니다.");
              return false;
            }

            // 미래 날짜 검사
            if (startDate > today || endDate > today) {
              alert("날짜 설정이 잘못되었습니다.");
              return false;
            }
            return true;
          },

        // 검색 날짜 종료 기준으로부터 클릭한 버튼만큼 이전 일자로 시작 날짜 설정
        setStartDateByOffset(offsetStr) {
            const endEl = document.getElementById('end_dt');
            const startEl = document.getElementById('start_dt');

            const endDate = new Date(endEl.value);

            let startDate = new Date(endDate);
            const unit = offsetStr.slice(-1);
            const amount = parseInt(offsetStr.slice(0, -1), 10);    // 마지막 글자 빼고 10진수로 변환

            switch (unit) {
              case 'd': startDate.setDate(startDate.getDate() - amount); break;
              case 'm': startDate.setMonth(startDate.getMonth() - amount); break;
              case 'y': startDate.setFullYear(startDate.getFullYear() - amount); break;
            }

            // 날짜를 YYYY-MM-DD 형식으로 변환
            const yyyy = startDate.getFullYear();
            const mm = String(startDate.getMonth() + 1).padStart(2, '0');
            const dd = String(startDate.getDate()).padStart(2, '0');
            const formatted = `${yyyy}-${mm}-${dd}`;

            startEl.value = formatted;

        }

  	};

	$(document).ready(function() {
		gaia.create({
			$init: function ($params) {
				page.init();
            }
        });


		$('.pop_box.toast').hide();
		// 창닫기 버튼 클릭 시 알림창 숨김 처리
		$('.pop_close').click(function() {
			$('.pop_box.toast').removeClass('on');
			$('.pop_box.toast').hide();
		});
	});


</script>

{% endblock footer_script %}