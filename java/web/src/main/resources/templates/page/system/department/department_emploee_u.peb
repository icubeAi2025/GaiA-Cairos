<div class="modal open">
	<div class="pop_box _sm">
		<div class="pop_header">
			<h5 class="pop_tit" id="dept_emp_u_tit"></h5>
			<button type="button" class="icon_btn pop_close" onclick="popup.close()">
				<i class="ic ic-close"></i>
				<span class="blind">창닫기</span>
			</button>
		</div>

		<div class="pop_body">
			<div class="form_box">
				<form id="menu-form">
				<!-- row -->
				<div class="row">
					<div class="col">
						<div class="form_label required">{{ message('item.com.025') }}</div>
						<div class="form_data">
							<input type="text" id="pop-loginId" name="loginId" required readonly>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<div class="form_label required">{{ message('item.com.024') }}</div>
						<div class="form_data">
							<div class="item_group">
								<input type="text" id="pop-usrNm" name="usrNm" required readonly>
							</div>
						</div>
					</div>
				</div>
				<!-- row -->
				<div class="row">
					<div class="col">
						<div class="form_label">{{ message('item.com.026') }}</div>
						<div class="form_data">
							<div class="item_group">
								<input type="text" id="pop-pstnCd" name="pstnCd" required readonly>
							</div>
						</div>
					</div>
				</div>
				<!-- row -->
				<div class="row">
					<div class="col">
						<div class="form_label">{{ message('item.com.027') }}</div>
						<div class="form_data">
							<div class="selectbox sort" style="margin-left: 0; z-index: 1;">
								<span class="selectbox" id="ratngCd_box">

								</span>
								<!-- <select name="ratngCd" class="required" id="ratngCd" required>
									<option value="" style="display: none">
									</option>
								</select> -->
							</div>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<div class="form_label required">{{ message('item.com.028') }}</div>
						<div class="form_data">
							<div class="selectbox sort" style="margin-left: 0; z-index: 1;">
								<span class="selectbox" id="flag_box">

								</span>
								<!-- <select name="flag" class="required" id="flag" required>
									<option value="" style="display: none">
									</option>
								</select> -->
							</div>
						</div>
					</div>
				</div>
				<!-- row -->
				<div class="row">
					<div class="col">
						<div class="form_label">{{ message('item.com.029') }}</div>
						<div class="form_data">
							<input type="date" class="w-md date" id="pop-startDt" name="pop-startDt"/>
						</div>
					</div>
				</div>
				<!-- row -->
				<div class="row">
					<div class="col">
						<div class="form_label">{{ message('item.com.030') }}</div>
						<div class="form_data">
							<input type="date" class="w-md date" id="pop-endDt" name="pop-endDt"/>
						</div>
					</div>
				</div>
				</form>
			</div>
		</div>

		<div class="pop_footer">
			<div class="btn_area jc_e">
				<button type="button" class="btn _outline" onclick="popup.close()">{{ message('btn.007') }}</button>
				<button type="button" class="btn _fill" onclick="popup.save()">{{ message('btn.006') }}</button>
			</div>
		</div>
	</div>
</div>
<!-- 토스트 메세지 : 활성화:'on'추가, 수초 후 'on'제거-->
<div class="pop_box toast" style="display: none;">
	<span class="toast_msg">
	</span>
	<button type="button" class="icon_btn pop_close">
		<i class="ic ic-close"></i>
		<span class="blind">창닫기</span>
	</button>
</div>
<script>
	var popup = {
		mode: "",
		data: {
			details: {},
		},
		existChecked: false,

		init: async function () { 

			if (opener) {
				page = opener.page;
			}

			this.data.details = page.department.employee.data.updateEmployeeInfo;

			this.setInput();

			// 콤보박스 생성
			this.initializeSelectBoxes.ratngCd(this.data.details.ratngCd);
			this.initializeSelectBoxes.flag(this.data.details.flag);

			// 시작일, 종료일 변경 시 유효성 검증
			$('#pop-startDt, #pop-endDt').on('change', function() {
				const startDate = new Date($('#pop-startDt').val());
				const endDate = new Date($('#pop-endDt').val());
				
				if (endDate <= startDate) {
                    gaiaCommon.customAlert("{{ message('msg.dept.013') }}"); //종료일은 시작일 이후여야 합니다.
					$(this).val(''); // 유효하지 않은 값 초기화
				}
			});

			gaia.loaded = true;

		},

		flagChange: function(){
			// flag 값이 변경될 때마다 시작일, 종료일 필드 표시/숨김 설정
			// 오늘 날짜를 구해 'YYYY-MM-DD' 형식으로 변환
			const today = new Date().toISOString().split('T')[0];

			if ($("#flag").val() === "T") { // flag가 "T"일 때만
				// $('#pop-startDt').prop('hidden', false); // 시작일 필드 보이기
				// $('#pop-endDt').prop('hidden', false);   // 종료일 필드 보이기
				$('#pop-startDt').prop('disabled', false); // 시작일 필드 보이기
				$('#pop-endDt').prop('disabled', false);   // 종료일 필드 보이기
			} else {
				// $('#pop-startDt').prop('hidden', true).val(''); // 시작일 필드 숨기고 값 초기화
				// $('#pop-endDt').prop('hidden', true).val('');   // 종료일 필드 숨기고 값 초기화
				$('#pop-startDt').prop('disabled', true).val(''); // 시작일 필드 숨기고 값 초기화
				$('#pop-endDt').prop('disabled', true).val('');   // 종료일 필드 숨기고 값 초기화
			}
		},

		// 셀렉트박스 호출
        makeSelectBox: function (cmnGrpCd, selectBoxId, elementId, initText, ckeckedValue, funName) {
            let requestData = {
                cmnGrpCd: cmnGrpCd,
                selectBoxId: selectBoxId,
                selectBoxNmType: "KOR", //TODO: 영어일 때 항목 가져오는 거 필요.
                ckeckedValue: ckeckedValue,
                orderByCol: "",
                orderByType: "",
                initText: initText,
                paramNm: selectBoxId,
                funName: funName || "",
                funParam: "this.value",
                funtype: "onchange",
            };

            gaiaCommon.post("/api/util/make-selectBox",[requestData],
                function(result) {
                    let returnMap = result.details.returnMap;
                    let addAppLineContent = document.getElementById(elementId);
                    addAppLineContent.innerHTML = returnMap[selectBoxId];
                },
                function (error){
                    console.error("Error making select box:", error);
                }
            );
        },
		initializeSelectBoxes: {
			ratngCd : function (ckeckedValue) {
				popup.makeSelectBox(
					"7de5a73e-ec43-475a-a10b-78cbc4ceec77", 			 //직급 구분
					"ratngCd",
					"ratngCd_box",
					"{{ message('msg.038', message('item.com.027')) }}", //직급을 선택해주세요.
					ckeckedValue,
				);
			},

			flag : function (ckeckedValue) {
				popup.makeSelectBox(
					"5e939c68-643c-45a8-87c8-1c28564dd45f", 			 //근무 상태 구분
					"flag",
					"flag_box",
					"{{ message('msg.038', message('item.com.028')) }}", //근무 상태를 선택해주세요.
					ckeckedValue,
					"popup.flagChange"								 	 //함수 이름
				);
			}

		},

		close() {
			page.refresh(true); // ?
			page.popup.close();
			if (opener) {
				window.close();
			}
		},
		setInput() {
				$("#dept_emp_u_tit").text("{{ message('item.dept.024') }}"); //소속 직원 수정

				$("#pop-loginId").val(this.data.details.loginId);
				$("#pop-usrNm").val(this.data.details.usrNm);
				$("#pop-pstnCd").val(this.data.details.pstnNm);

				// 오늘 날짜를 구해 'YYYY-MM-DD' 형식으로 변환
				const today = new Date().toISOString().split('T')[0];

				// flag 값이 'T'일 때만 시작일과 종료일 필드를 보여주고 기본값 설정
				if (this.data.details.flag === 'T') {
					// $("#pop-startDt").prop('hidden', false);
					// $("#pop-endDt").prop('hidden', false);
					$("#pop-startDt").prop('disabled', false);
					$("#pop-endDt").prop('disabled', false);

					// this.data.details에 시작일과 종료일이 있으면 해당 값 사용, 없으면 기본값으로 오늘 날짜 설정
					$("#pop-startDt").val(this.data.details.startDt || today);
					$("#pop-endDt").val(this.data.details.endDt || today);
				} else {
					// $("#pop-startDt").prop('hidden', true).val('');
					// $("#pop-endDt").prop('hidden', true).val('');
					$("#pop-startDt").prop('disabled', true).val('');
					$("#pop-endDt").prop('disabled', true).val('');
				}

				$("#pop-startDt").prop('min', today);
				$("#pop-endDt").prop('min', today);

		},
		save() {
			let flag = $("#flag").val();
			let startDt = $("#pop-startDt").val();
			let endDt = $("#pop-endDt").val();
			if(!flag){
                gaiaCommon.customAlert("{{ message('msg.dept.015') }}"); // 근무 상태를 선택해주세요.
			}

            const pjtNo = page.department.data.details.pjtNo;

			let data = {
				orgNo: this.data.details.orgNo,
				ratngCd: $("#ratngCd").val(),
				flag: flag,
                pjtNo: pjtNo
			};

			if(flag === "T"){
				if (!startDt || !endDt) {
                    gaiaCommon.customAlert("{{ message('msg.dept.011') }}"); // 임시직의 경우 시작일과 종료일을 입력해 주세요.
					return;
				}

				const startDate = new Date(startDt);
				const endDate = new Date(endDt);
				if (endDate <= startDate) {
                    gaiaCommon.customAlert("{{ message('msg.dept.013') }}"); //종료일은 시작일 이후여야 합니다.
					return;
				}

				data.startDt = startDate;
				data.endDt = endDate;
			}

			console.log("저장할 데이터: ", data);


			gaiaCommon.LoadingOverlay('body', true); // 로딩 바 활성화
			gaiaCommon.post("/api/system/department/user/update", data,
                function (result) {
                    if(result.ok){
                        gaiaCommon.LoadingOverlay('body', false); // 로딩 바 비활성화
                        gaiaCommon.customAlert("{{ message('msg.044') }}"); // 저장되었습니다.
                        popup.close();
                    }
			    },
                function (error) {
                    console.error(error);
                    gaiaCommon.customAlert(error.responseJSON?.message);
                }
            );
		},

	};

	$(function(){
		popup.init();
    });

</script>
