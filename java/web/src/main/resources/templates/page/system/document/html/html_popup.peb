{% extends 'layout/base_popup' %}
{% block content %}
<style>
	input[type=text].no-validated{
		border-color: var(--color-red);
		animation: shake 0.4s ease;
	}
	input[type=text].validated{
		border-color:var(--color-green)
	}
	@keyframes shake {
		0% { transform: translateX(0); }
		20% { transform: translateX(-5px); }
		40% { transform: translateX(5px); }
		60% { transform: translateX(-4px); }
		80% { transform: translateX(4px); }
		100% { transform: translateX(0); }
	}

	.modal .select_area{
		gap: 0.5em;
	}
    .modal#htmlPropertyForm > .pop_box{
        width:45rem;
    }
</style>
<!--*디자인 적용 new 시작*-->
<section class="contents_wrap g-row">
	<article class="conts_area">
		<div class="conts">
			<div class="conts_grid">
				<div class="toolbar">
					<div class="btn_area s_default _outline">
<!--						{{ btnHtml | raw }}-->
						<button type="button" class="btn" id="" onclick="htmlPopup.remove()">{{ message('btn.002') }}</button>
						<button type="button" class="btn" id="" onclick="htmlPopup.modify()">{{ message('btn.003') }}</button>
						<button type="button" class="btn _fill" id="" onclick="htmlPopup.regist()">{{ message('btn.001') }}</button>
					</div>
				</div>
				<div class="grid" id="html_grid"></div>
			</div>
			<div class="btn_area s_default" style="justify-content: end;">
				<button type="button" class="btn _outline" onclick="htmlPopup.close()" style="margin-top: 10px;">{{ message('btn.007') }}</button>
			</div>
		</div>
	</article>
</section>
<!-- 토스트 메세지 : 활성화:'on'추가, 수초 후 'on'제거-->
<div class="pop_box toast" style="display: none; z-index: 16;">
	<span class="toast_msg">
	</span>
	<button type="button" class="icon_btn pop_close">
		<i class="ic ic-close"></i>
		<span class="blind">창닫기</span>
	</button>
</div>
<section>{% include "page/system/document/html/html_modal" %}</section>
<script>
	$(document).ready(()=>{
		gaia.create({
			$init: function ($params) {
				if(opener){
					page = opener.page;

					opener.document.onkeydown = fkey;
					opener.document.onkeypress = fkey;
					opener.document.onkeyup = fkey;

					// 부모창의 f5 새로고침 누를때 열려있는 팝업 창 닫기
					function fkey(e){
						if (window.event.keyCode == 116) {
							window.close();
						}
					};

					window.opener.onbeforeunload = function () {
						// 부모창이 새로고침되거나 페이지 이동할 때 실행
						if (window) {
							// 자식 창 닫기
							window.close();
						}
					};
				}
				htmlPopup.init(page.cbgnDocTypeMap);
            }
        });
	}) 
    


	var htmlPopup = {
		htmlFormList: [],
		init(cbgnDocTypeMap) {
			//page 헤더 생성
			gaiaPortal.navMenuInit('M070307', "HTML 양식 관리"); 	//속성 정의
			$("#menuDepth").append(`<li class=\"breadcrumb_item\">HTML 양식 관리</li>`);
			this.cbgnDocTypeMap = cbgnDocTypeMap;
            gaiaCommon.get('/api/system/document/html/list',{},function(result){
                htmlPopup.htmlFormList = result.details?.htmlFormList;
                htmlPopup.grid.init();
            },function(error){
                console.error(`HTML 양식 리스트 조회 실패, /api/system/document/html/list, PARAMS : {}`)
            })

			gaia.loaded = true;
		},

		close() {
			htmlPopup.htmlFormList = null;
			window.close();
		},
        grid:{
            obj:null,
            init: function(){
				tui.Grid.setLanguage('ko', {
					display: {
						noData: '데이터가 없습니다'
					}
				});
				this.obj = new tui.Grid({
					el: document.getElementById('html_grid'),
					scrollX: false,
					scrollY: true,
					useClientSort: false,
					minBodyHeight: 40,
					// bodyHeight: 160,
					contextMenu: null,
					rowHeaders: [
						{
							type: 'checkbox',
							header: `
								<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />
							`,
							width: 100,
							renderer: {
								type: window.IconRenderer,
								options:[
									{
										type:'checkbox'
									},
									{ //휴지통 클릭 삭제 시 필요한 값 설정
										url: '/api/system/document/html/remove',
										idField:'formNo',
										keyName: 'formNoList',
										msgList: {
											confirmMsg: "{{ message('msg.009') }}", 		 	// 정말 삭제하시겠습니까?
											confirmTit: "HTML 양식 삭제",  // 문서 삭제
											completeMsg: "{{ message('msg.006') }}" 	// 삭제되었습니다.
										},
										success:(rowData) => { //사후처리를 위한 rowData 반환 후 콜백
											htmlPopup.htmlFormList = htmlPopup.htmlFormList.filter((item) => rowData.formNo != item.formNo);
											htmlPopup.grid.redraw();
										},
										fail:(rowData) => { //사후처리를 위한 rowData 반환 후 콜백
											console.log("실패",rowData)
										}

									}
								]
							}
						}
					],
					columns:[
						{ 
							header: "양식 번호", 	//양식 번호
							name: 'formNo',
							align: 'center',
							resizable: false,
							width: 120
						},
						{ 
							header: "양식 이름", 	//양식 이름
							name: 'formNm',
							align: 'left',
							resizable: false,
							// width: 400
						},
						{ 
							header: "문서 양식", 	//문서 양식
							name: 'formType',
							align: 'center',
							resizable: false,
							width: 220,
                            formatter:({row})=>{
                                return page.cbgnDocTypeMap[row.formType];
                            }
						},
						{ 
							header: "최종 수정일", 	//수정여부
							name: 'chgDt',
							align: 'center',
							resizable: false,
							width: 180,
                            formatter: ({row}) => {
                                const date = new Date(row.chgDt);
                                const formatted = `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
                                return formatted;
                            }
						},
					],
				});

				this.obj.on("click", (ev) => { //체크박스 상태 설정
					if(ev.columnName == "_checked" && ev.rowKey >= 0){
						let temp = this.obj.getRow(ev.rowKey);
						temp._attributes.checked = this.obj.getRow(ev.rowKey)._attributes.checked ? false : true;
						this.obj.setRow(ev.rowKey, temp);
					}
				});
                htmlPopup.grid.redraw();
			},
            redraw: function(){
                // 그리드의 높이를 동적으로 설정
                // gaiaCommon.get('/api/system/document/html/list',{},function(result){
                //     const data = result.details?.htmlFormList;
                //     htmlPopup.htmlFormList = data;
                //
                //     const rowCount = data.length;
                //     const rowHeight = 40; // 행당 높이 (임의로 40px로 설정)
                //     const maxHeight = 600; // 그리드의 최대 높이
                //     const newHeight = Math.min(rowCount * rowHeight, maxHeight); // 행의 개수에 맞춰 높이 조정
                //
                //     htmlPopup.grid.obj.setBodyHeight(newHeight);
                //
                //     htmlPopup.grid.obj.resetData(data);
                // },function(error){
                //     console.error(`HTML 양식 리스트 조회 실패, /api/system/document/html/list, PARAMS : {}`)
                // })

                const data = htmlPopup.htmlFormList;
                const rowCount = data.length;
                const rowHeight = 40; // 행당 높이 (임의로 40px로 설정)
                const maxHeight = 600; // 그리드의 최대 높이
                const newHeight = Math.min(rowCount * rowHeight, maxHeight); // 행의 개수에 맞춰 높이 조정
                htmlPopup.grid.obj.resetData(data);
            }
        },
        // HTML 양식 등록
		regist: function () {
			const params = {
                mode:'create'
			}
			htmlFormModal.init(params,htmlPopup.createDocTypeDropdown,(htmlFormDto)=>{
                htmlPopup.htmlFormList.push(htmlFormDto);
                htmlPopup.grid.redraw();
            });
		},

		// HTML 양식 삭제
		remove: function() {
			var formNoList = [];

			htmlPopup.grid.obj.getData().forEach(function(v){
				if(v._attributes.checked){
					formNoList.push(v.formNo);
				}
			});
            const params = {formNoList : formNoList}
			if (formNoList.length > 0) {
				//선택한 속성을 삭제하시겠습니까?
                gaiaCommon.customConfirm("HTML 양식 삭제", "HTML 양식 삭제", "선택한 HTML 양식을 삭제하시겠습니까?", function(){ // 선택한 속성을 삭제하시겠습니까?
					gaiaCommon.post("/api/system/document/html/remove", params, function (result) {
                        gaiaCommon.customAlert("{{ message('msg.006') }}", function(){ //삭제되었습니다.
						    htmlPopup.htmlFormList = htmlPopup.htmlFormList.filter((item) => {
                                return !formNoList.includes(item.formNo);
                            });
							htmlPopup.grid.redraw();
						}, {timeout: 0});
					},function(error){
						console.log(`속성 삭제 실패, /api/system/document/property/remove, PARAMS :`
						,params,error);
					});
				});
					
			} else {
                gaiaCommon.customAlert("삭제할 양식을 선택해주세요."); //삭제할 양식을 선택해주세요.
			}
		},

		//HTML 양식 수정
		modify: function() {
			var formNoList = [];
            var checkedIndex = 0;

			htmlPopup.grid.obj.getData().forEach(function(v,index){
				if(v._attributes.checked){
					formNoList.push(v.formNo);
                    checkedIndex = index;
				}
			});
			let length = formNoList.length

			if(length === 1){
				const params = {
					mode:"modify",
                    htmlFormDto:htmlPopup.htmlFormList[checkedIndex]
				}
				htmlFormModal.init(params,htmlPopup.createDocTypeDropdown,(htmlFormDto)=>{
                    console.log("수정 후 HTMLFORMDTO",htmlFormDto);
                    for(const htmlForm of htmlPopup.htmlFormList){
                        if(htmlForm.formNo == htmlFormDto.formNo){
                            htmlForm.chgDt = htmlFormDto.chgDt;
                            htmlForm.chgId = htmlFormDto.chgId;
                            htmlForm.dcForm = htmlFormDto.dcForm;
                            htmlForm.formNm = htmlFormDto.formNm;
                            break;
                        }
                    }
                    console.log(htmlPopup.htmlFormList);
                    htmlPopup.grid.redraw();
                });
			}else if(length > 1){
                gaiaCommon.customAlert("하나의 양식을 선택해주세요."); // 하나의 양식을 선택해주세요.
				return;
			}else{
                gaiaCommon.customAlert("수정할 양식을 선택해주세요."); // 수정할 양식을 선택해주세요.
				return;
			}
		},
		createDocTypeDropdown:function(id){
            const selectTag = document.getElementById(id);
            selectTag.innerHTML = `<option selected disabled value="">선택</option>`;
            for(const cbgnDocType in page.cbgnDocTypeMap){
                const option = document.createElement("option")
                option.setAttribute("value",cbgnDocType);
                option.innerHTML = page.cbgnDocTypeMap[cbgnDocType];
                selectTag.appendChild(option);
            }
		}
	};

	

	
</script>
</html>
{% endblock content %}
