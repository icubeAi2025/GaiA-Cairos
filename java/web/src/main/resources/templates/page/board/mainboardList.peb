<!DOCTYPE html>
<html lang="en" style="min-width:0;">

<head>
    {% include "sub/head" %}
    {% block head %}{% endblock %}
    <header>
        <h1 class="brand" style="width: 130px;">
            <a href="" onclick="return false">GAIA</a>
        </h1>
        <h2 class="" id="title"></h2>
        <div style="padding: 0 30px;"></div>
    </header>
</head>

<body style="min-width:0;">
    <article class="conts" id="container" style="display: flex;justify-content: center; height: auto">
        <div class="conts_grid" style="width: 1000px;">
            <div class="btn_area s_default">
                <button type="button" class="btn _outline" id="close-popup" onclick="board.close()">
                    {{ message("btn.007") }}
                </button>
            </div>
            <div class="search_wrap" id="searchBox">
                <span class="selectbox">
                    <select name="searchType" id="searchType">
                        <option selected value="">{{ message('item.com.059') }}</option>
                        <option value="boardTitle">{{ message('item.com.060') }}</option>
                        <option value="boardTxt">{{ message('item.com.061') }}</option>
                    </select>
                </span>

                <div class="searchbox_wrap">
                    <input type="text" name="searchText" id="searchText"
                        onkeypress="if( event.keyCode == 13 ){boardGrid.search();}"
                        placeholder="{{ message('msg.004') }}" />
                    <button type="submit" class="icon_btn search" onclick="boardGrid.search()">
                        <i class="ic ic-search"></i>
                        <span class="blind">{{ message('item.com.014') }}</span>
                    </button>
                </div>
                <div class="selectbox sort">
                    <select name="items-per-page" id="items-per-page" onchange="boardGrid.changePerPage()">
                        <option selected disabled value="">
                            {{ message("item.com.004") }}
                        </option>
                        <option value="5">5</option>
                        <option selected value="10">10</option>
                        <option value="15">15</option>
                    </select>
                </div>
            </div>
            <div class="grid" id="board-grid"></div>
        </div>
    </article>
</body>

</html>

<script>
    const params = new URLSearchParams(window.location.search);
    var boardType = params.get("boardType");
    var boardCategory = params.get("boardCategory");

    var board = {
        init: function () {
            categoryCd = boardCategory ? boardCategory : "";
            $("#title").text(boardType == "1" ? "{{ message('item.board.007') }}" : "{{ message('item.board.001') }}")
            if (boardType === "2") {
                if (!$('#category').length) {
                    board.initializeSelectBoxes()
                }
            } else if (boardType === "1") {
                $('#categoryBox').remove();
                categoryCd = "";
                board.updateCategoryCd()
            }
        },

        close: function () {
            window.close();
        },

        updateCategoryCd: function () {
            categoryCd = $("#category").val()
            boardGrid.init(boardType, categoryCd);
        },

        initializeSelectBoxes: function () {
            let selectBoxRequests = [
                {
                    //카테고리
                    cmnGrpCd: "7f4126c5-7670-4aae-ab58-0b758a4455ad",
                    selectBoxId: "category",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    paramNm: "category",
                    funName: "board.updateCategoryCd",
                    funParam: "",
                    funtype: "onchange",
                },
            ];

            board.makeSelectBox(selectBoxRequests);
        },
        // 셀렉트박스 호출
        makeSelectBox: function (comCodeSelectBoxGets) {
            gaiaCommon.post("/api/util/make-selectBox", comCodeSelectBoxGets, function (result) {
                let returnMap = result.details.returnMap;
                comCodeSelectBoxGets.forEach(function (item) {
                    let addAppLineContent = document.getElementById(item.selectBoxId);
                    if (addAppLineContent) {
                        addAppLineContent.innerHTML = returnMap[item.selectBoxId];
                    }

                    if (!$('#categoryBox').length) {
                        let categorySelect = `<span class="selectbox" id="categoryBox">${returnMap[item.selectBoxId]}</span>`;
                        $("#searchBox").prepend(categorySelect);
                    }
                    $('#category').val(boardCategory)

                    categoryCd = boardCategory || "";
                    boardGrid.init(boardType, categoryCd);
                });
            },function (xhr, status, error){
                console.error("Error making select box:", status, error);

            });
        },
    }

    // board 그리드
    var boardGrid = {
        data: {},
        init: function (boardType, categoryCd, searchType, searchText) {
            const Grid = tui.Grid;

            let _this = this;

            if (this.boardGrid) {
                this.boardGrid.destroy();
                this.boardGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/board/mainBoardList",
                    method: "Get",
                    initParams: {
                        boardType: boardType,
                        boardCategory: categoryCd,
                        searchType: searchType,
                        searchText: searchText
                    },
                },
            });


    if (!this.boardGrid) {
                this.boardGrid = new Grid({
                    el: document.getElementById("board-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: true,
                    draggable: false,
                    contextMenu: null,
                    minBodyHeight: 400,
                    bodyHeight: 400,
                    pageOptions: {
                        perPage: 10,
                    },
                    columns: [
                        {
                            header: "No",
                            name: "rownum",
                            align: 'center',
                            width: 50,
                        },
                        {
                            header: "{{ message('item.com.060') }}",
                            name: "boardTitle",
                            align: 'center',
                            renderer: {
                                type: window.NewWindowViewRenderer,
                                options: {
                                    urlTemplate: "/board/readMain?boardType={id1}&boardNo={id2}&boardCategory={id3}",
                                    idFields: "boardType,boardNo,boardCategory",
                                    gridId: "board-grid",
                                    viewCount: "true"
                                },
                            },
                        },
                        {
                            header: "{{ message('item.com.064') }}",
                            name: "usrNm",
                            align: 'center',
                            width: 100,
                        },
                        {
                            header: "{{ message('item.com.063') }}",
                            name: "rgstDt",
                            align: "center",
                            width: 100,
                        },
                        // {
                        //     header: "{{ message('item.com.065') }}",
                        //     name: "boardView",
                        //     align: "center",
                        //     width: 100,
                        // },
                    ],
                });

            }
            refreshGrid(boardGrid.boardGrid);
        },

        search() {
            const searchType = $("#searchType").val();
            const searchText = $('#searchText').val();
            boardGrid.init(boardType, categoryCd, searchType, searchText);

            boardGrid.pagination = boardGrid.boardGrid.paginationManager.getPagination();
            boardGrid.pagination.setItemsPerPage(boardGrid.limit);
            boardGrid.pagination.reset();
        },
        changePerPage() {
            var size = $('select[id="items-per-page"]').val();
            boardGrid.limit = size;
            boardGrid.boardGrid.setPerPage(boardGrid.limit);

            boardGrid.pagination = boardGrid.boardGrid.paginationManager.getPagination();
            boardGrid.pagination.setItemsPerPage(boardGrid.limit);
            boardGrid.pagination.reset();
        },
    }

    // 새창 모드일때, 부모창이 있는지 감지.
    if (opener) {
        opener.document.onkeydown = fkey;
        opener.document.onkeypress = fkey;
        opener.document.onkeyup = fkey;

        function fkey(e) {
            if (window.event.keyCode == 116) {
                window.close();
            }
        };

        window.opener.onbeforeunload = function () {
            if (window) {
                window.close();
            }
        };

    }

    $(function () {
        gaia.create({
            $init: function ($params) {
                board.init()
                gaia.loaded = true
            }
        });
    })

</script>