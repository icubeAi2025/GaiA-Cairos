{% extends 'layout/base_content' %}
{% block content %}

<section class="contents_wrap">

	<article class="conts_area">
		<div class="conts g-row" id="cntrct_no_select">
			<div class="conts_form">
				<!-- S: search wrap ---------------------------------------------- -->
				<div class="search_wrap">
					<span class="selectbox">
						<select name="year" id="year">
							<option selected value="">선택</option>
						</select>
					</span>
					<span class="selectbox">
						<select name="month" id="month">
							<option selected value="">선택</option>
							<option value="1">1</option>
							<option value="2">2</option>
							<option value="3">3</option>
							<option value="4">4</option>
							<option value="5">5</option>
							<option value="6">6</option>
							<option value="7">7</option>
							<option value="8">8</option>
							<option value="9">9</option>
							<option value="10">10</option>
							<option value="11">11</option>
							<option value="12">12</option>
						</select>
					</span>
					<span class="selectbox" id="spanStatus">
					</span>
					<!-- searchbox -->
					<div class="searchbox_wrap">
						<input type="text" id="searchText" placeholder="검색어를 입력하세요">
						<button type="button" class="icon_btn search">
							<i class="ic ic-search"></i>
							<span class="blind">검색</span>
						</button>
					</div>
				</div>
				<!-- // E: search wrap ---------------------------------------------- -->
				<div class="btn_area s_default _outline">
					{{ btnHtml | raw }}
					<div class="btn_group _outline">
						{{ chkBtnHtml | raw }}
					</div>
					<button type="button" class="btn" style="display:none;">Excel</button>
				</div>
				<div class="grid" id="dailyreportDataGrid">
				</div>
			</div>
		</div>
	</article>

	<div class="dateModal fade" style="z-index:16;">
    	<div class="pop_box alert on" id="dateModal" data-name="Alert" style="display:none;">
    	    <div class="pop_header">
    	        <h5 class="pop_tit">복사</h5>
    	        <button type="button" class="icon_btn pop_close" onclick="closeDateModal()">
    	            <i class="ic ic-close"></i>
    	            <span class="blind">창닫기</span>
    	        </button>
    	    </div>
    	    <div class="pop_body">
    	        <strong class="msg_tit">날짜 선택</strong>
    	        <div class="form_data" style="margin-top: 12px; padding:0px; width: max-content;">
                    <input type="date" style="width: 250px;" id="copyDate" class="date" value="">
                </div>
    	    </div>
    	    <div class="pop_footer">
    	        <div class="btn_area jc_e">
    	            <button type="button" class="btn _fill" onclick="copyDailyReport()">복사</button>
    	            <button type="button" class="btn _outline" onclick="closeDateModal()" >취소</button>
    	        </div>
    	    </div>
    	</div>
    </div>

</section>
{% endblock content %}

{% block footer_script %}
<style>
	.tui-grid-cell-header {
		white-space: break-spaces;
	}
</style>
<script src="/assets/js/construction/construction.js"></script>
<script>
	//콤보박스 렌더러, 에디터
	let url = window.location.origin.replace(/\/$/, '') + '/';
	let imgDir = "{{ imgDir }}";
    var urlParams = new URLSearchParams(location.search);
	var cntrctNo = urlParams.get('cntrctNo');
    let requestData = {};
	var isDelAuth = "{{ isDelAuth }}";
    var isAddAuth = "{{ isAddAuth }}";
	let dailyReportId = '';

	var init = function () {
		gaiaCommon.LoadingOverlay('body', true);
		gaiaCommon.makeCntrctSelectBox(
            "#cntrct_no_select",
            // 계약 없음 콜백
            function() {
                gaiaCommon.LoadingOverlay('body', false);
            },
            // initCb: 초기 세팅 후 호출
            function(initialCntrctNo) {
                cntrctNo = initialCntrctNo;
                dailyreport.init();
            },
            // chgCb: 값 변경 시 호출
            function(newCntrctNo) {
                cntrctNo = newCntrctNo;
                dailyreport.init();
            }
        );
        gaia.loaded = true;

		$("#year, #month, #spanStatus").change(function (e) {
			setTimeout(() => {
                // session 저장
                updateRequestData();
			    dailyreport.init();
			}, 100);

		});
        $(".icon_btn.search").on("click", function(e) {
            setTimeout(() => {
                // session 저장
                updateRequestData();
			    dailyreport.init();
			}, 100);
        });

		$("#searchText").on("keyup", function (key) {
			// session 저장
			if (key.keyCode == 13) {
			setTimeout(() => {
                // session 저장
                updateRequestData();
			    dailyreport.init();
			}, 100);
			}
		});

		var param = {
			pjtNo: pjtNo
		};


		let commonItem = [];
		commonItem[0] = {
			cmnGrpCd: 'f5a2c6ff-458b-8ef4-7219-12b06087a70f',
			selectBoxId: 'selectStatus',
			selectBoxNmType: 'KOR',
			initText: '{{ message("item.com.005") }}',
			initSelect: 'Y',
			paramNm: 'testBox',
			funName: '',
			funParam: 'dailyreport.init()',
			funtype: 'onchange'
		};

		$.ajax({
			url: '/api/util/make-selectBox',
			method: "POST",
			dataType: "json",
			xhrFields: { withCredentials: true },
			contentType: 'application/json; charset=UTF-8',
			traditional: true,
			data: JSON.stringify(commonItem),
			success: function (data) {
				let selectStatusMap = data.details.returnMap;

				selectStatusMap.testBox = selectStatusMap.testBox.replace("<option value='C'>취소</option>", "");

				$("#spanStatus").append(selectStatusMap.testBox);

                // session 값으로 설정
                let searchData = gaia.getSearchData();
                if(searchData.spanStatus !== undefined && searchData.spanStatus !== ''){
                    $("#selectStatus").val(searchData.spanStatus);
                }
			},
            error: function (xhr, status, error) {
                console.error(status, error);
                gaiaCommon.customAlert("{{ message('msg.060') }}");
            }
		});

		let date = new Date();
		let now_year = date.getFullYear();
		let start_year = date.getFullYear() - 4;
		for (var i = now_year; i >= start_year; i--) {
			$("#year").append("<option value='" + i + "'>" + i + " 년" + "</option>");
		}
	}

	let dailyreport = {
		init: function (type) {
			let _this = this;

			if (!_this.dailyreportGrid) {
				_this.dailyreportGrid = new tui.Grid({
					el: document.getElementById('dailyreportDataGrid'),
					bodyHeight: 550,
					scrollX: true,
					scrollY: true,
					contextMenu: null,
					rowHeaders: [
						{
							type: 'checkbox',
							width: 100,
							renderer: {
								type:window.IconRenderer,
								options:[
									{
										type:"checkBox"
									},
									{
										type:"trash",
										auth:isDelAuth === "Y",
										success:(rowData)=>{
											delDailyreport("r",rowData.daily_report_id,rowData.apprvl_stats,rowData.apprvl_stats_txt);
										}
									},
									{
										type:"copy",
										auth:isAddAuth === "Y",
										success:(rowData)=>{
											copy('l',rowData.daily_report_id);
										}
									},
									{
										type:"eyes",
										success:(rowData)=>{
											gaiaCommon.openReportViewer('/daily-report/daily_report.jrf', {
												cntrctNo: cntrctNo,
												dailyReportId: rowData.daily_report_id,
												url: url,
												imgDir: imgDir
											})
										}
									}
								]
							}
						},

					],
					header: {
						height: 120,
						complexColumns: [
							{
								header: '{{ message("item.construction.005") }}',
								name: 'wthr',
								childNames: ['am_wthr', 'pm_wthr']
							},
							{
								header: '{{ message("item.construction.008") }}',
								name: 'tmprt',
								childNames: ['dtop_tmprt_val', 'dlowst_tmprt_val']
							}
						],
					},
					columns: [
						{
							header: '{{ message("item.construction.001") }}', name: 'report_no', allowMerging: true, align: 'center', resizable: true, minWidth: 120,
							renderer: {
								type:window.IconRenderer,
								isHover:true,
								align:"right",
								options:[
									{
										type:'newWindow',
										isHover:true,
										align:"right",
										success:(rowData)=>{
											goLink("detail", rowData.daily_report_id);
										}
									}
								]
							}
						},
						{ header: '{{ message("item.construction.002") }}', name: 'daily_report_date', resizable: true, align: 'center', width: 120 },
						{
							header: '{{ message("item.construction.003") }}', name: 'rgstr_nm', resizable: true, align: 'center', width: 120,
							formatter: numberFormat
						},
						{
							header: '{{ message("item.construction.063") }}', name: 'apprvl_nm', width: 120, align: 'center',
							formatter: numberFormat
						},
						{
							header: '{{ message("item.construction.064") }}', name: 'apprvl_stats_txt', width: 120, align: 'center',
							class: "multi-line-css",
							renderer:{
								type:window.IconRenderer,
								options:[
									{
										type:"printer",
										auth:(rowData) => {
											return rowData.apprvl_stats === "A";
										},
										success:(rowData)=>{
										    // PDF 미리보기
                                            const docId = rowData.doc_id;
                                            // 파라미터 1: 통합문서관리(DOC), 2: 열람할 문서 key(cw_daily_report 의 docId), 3: 다운로드 여부(o: 'DA', x: 입력안함)
                                            gaiaCommon.pdfViewUtil('DOC', docId, 'DA');
										}
									}
								]
							},
						},
						{
							header: '{{ message("item.construction.006") }}', name: 'am_wthr', width: 120, align: 'left',
							class: "multi-line-css",
							formatter: numberFormat
						},
						{
							header: '{{ message("item.construction.007") }}', name: 'pm_wthr', width: 120, align: 'left',
							formatter: numberFormat
						},
						{ header: '{{ message("item.construction.009") }}', name: 'dtop_tmprt_val', width: 80, align: 'center' },
						{ header: '{{ message("item.construction.010") }}', name: 'dlowst_tmprt_val', width: 80, align: 'center' },
						{ header: '{{ message("item.construction.011") }}', name: 'rmrk', width: 100, align: 'left', align: 'center' },
						{ name: 'daily_report_id', hidden: true },

					]
				});
			}


			let list = this.read();

			if (list) {
				this.dailyreportGrid.resetData(list);
				refreshGrid(this.dailyreportGrid);
			}


            // session 값으로 설정
            let searchData = gaia.getSearchData();
            if(searchData.year !== undefined && searchData.year !== ''){
                $("#year").val(searchData.year);
            }
            if(searchData.month !== undefined && searchData.month !== ''){
                $("#month").val(searchData.month);
            }
            if(searchData.searchText !== undefined && searchData.searchText !== ''){
                $("#searchText").val(searchData.searchText);
            }

		},
		read: function () {
			let _this = this;
			let data;
			let root;
			let newMonth = $("#month option:selected").val();
			newMonth = newMonth != '' && newMonth < 10 ? '0' + newMonth : newMonth

			var param = {
				cntrctNo: cntrctNo
				, year: $("#year option:selected").val()
				, month: newMonth
				, status: $("#selectStatus option:selected").val()
				, searchText: $("#searchText").val()
			};

			$.ajax({
				url: BASEPATH + 'dailyreport/dailyreport-list',
				method: 'POST',
				dataType: 'json',
				contentType: 'application/json; charset-utf-8',
				data: JSON.stringify(param),
				async: false,
				success: function (response, status, xhr) {
					data = response.details.dailyreportList;
					if (data.length > 0) {

					} else {
						_this.dailyreportGrid.resetData([]);
					}
					_this.dailyreportGrid.findRows(gd => gd.rowtype === "ori").forEach(row => _this.dailyreportGrid.addRowClassName(row.rowKey, "cell-BizON"));
				},
                error: function (xhr, status, error) {
                    console.error(status, error);
                    gaiaCommon.customAlert("{{ message('msg.060') }}");
                }
			});

			gaiaCommon.LoadingOverlay('body', false);
			return data;
		},

	}

	function goLink(type, rid) {
		const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
		if (type == "del") {
			if (checkedRows.length < 1) {
				gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', "{{ message('btn.002') }}"));
				return false;
			}
			delDailyreport("b");
		}

		if (type == "edit") {
			if (checkedRows.length < 1) {
				gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', "{{ message('btn.003') }}"));
				return false;
			}
			if (checkedRows.length > 1) {
				gaiaCommon.customAlert("{{ message('msg.036') }}".replace('{0}', "{{ message('btn.003') }}"));
				return false;
			}

			let options = "toolbar=no,scrollbars=no,resizable=yes,status=no,menubar=no,width=1200, height=800, top=0,left=0";

			const checkedRow = checkedRows[0];
			const apprvl_stats = checkedRow.apprvl_stats;
			if (apprvl_stats == "A" || apprvl_stats == "E") {
				// 승인요청, 승인 상태 수정 불가
				gaiaCommon.customAlert("{{ message('msg.construction.001') }}".replace('{0}', checkedRow.apprvl_stats_txt).replace('{1}', "{{ message('btn.003') }}"));
				return false;
			} else {
				window.location.href = "/construction/dailyreport/update?cntrctNo=" + cntrctNo + "&rId=" + checkedRow.daily_report_id+`&pjtNo=${pjtInfo.pjtNo}`;
			}
		}

		if (type == "add") {
			window.location.href = "/construction/dailyreport/create?cntrctNo=" + cntrctNo +`&pjtNo=${pjtInfo.pjtNo}`;
		}
		if (type == "detail") {
			window.location.href = "/construction/dailyreport/detail?cntrctNo=" + cntrctNo + "&rId=" + rid+`&pjtNo=${pjtInfo.pjtNo}`;
		}
	}

	// 작업일보 삭제
	function delDailyreport(type, rid, stats, stats_txt) {
		gaiaCommon.customConfirm("{{ message('item.com.005') }}", "{{ message('msg.009') }}", "{{ message('msg.009') }}", function () {
			let formData = []; // 체크된 행의 id 정보 가져오기
			if (type == "r") {
				if (stats == "A" || stats == "E") {
					// 승인요청, 승인 상태 삭제 불가
					gaiaCommon.customAlert("{{ message('msg.construction.001') }}".replace('{0}', stats_txt).replace('{1}', "{{ message('btn.002') }}"));
					return false;
				} else {
					formData.push({ cntrctNo: cntrctNo, dailyReportId: rid });
				}
			} else if (type == "b") {
				const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
				checkedRows.forEach((checkedRow) => {
					if (checkedRow.apprvl_stats == "A" || checkedRow.apprvl_stats == "E") {
						// 승인요청, 승인 상태 삭제 불가
						gaiaCommon.customAlert("{{ message('msg.construction.001') }}".replace('{0}', checkedRow.apprvl_stats_txt).replace('{1}', "{{ message('btn.002') }}"));
						return false;
					} else {
						formData.push({ cntrctNo: cntrctNo, dailyReportId: checkedRow.daily_report_id });
					}
				});
			}

			if (formData.length < 1) {
				return false;
			}

			const data = {};
			data['dailyReportList'] = formData;

			$.ajax({
				url: BASEPATH + 'dailyreport/del-dailyreport',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(data),
				success(result) {
					gaiaCommon.customAlert("{{ message('msg.006') }}", function () {
						location.reload();
					});
				},
                error: function (xhr, status, error) {
                    console.error(status, error);
                    gaiaCommon.customAlert("{{ message('msg.060') }}");
                }
			});
		});
	}

	function chkStatus(stats_type, txt) {
		const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
		if (checkedRows.length < 1) {
			gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', txt));
			return false;
		}

		gaiaCommon.customConfirm("{{ message('item.app.010') }}", "{{ message('msg.037') }}".replace('{0}', txt), "", function () {
			setStatus(stats_type, txt);
		});

		//JSON.parse(localStorage.getItem("pageCommonData"));
	}

	// 작업일보 상태 업데이트 ( 승인요청, 승인, 반려 )
	function setStatus(stats_type, txt) {
		let formData = []; // 체크된 행의 id 정보 가져오기
		let chk = 0;
		const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
		checkedRows.forEach((checkedRow) => {
			const apprvl_stats = checkedRow.apprvl_stats;
			//승인요청
			if (stats_type == "E") {
				if (apprvl_stats == "E" || apprvl_stats == "A" || apprvl_stats == "R") {
					let temp_txt = "";
					if (apprvl_stats == "E") {
						temp_txt = "{{ message('btn.027') }}";
					} else if (apprvl_stats == "A") {
						temp_txt = "{{ message('btn.025') }}";
					} else if (apprvl_stats == "R") {
						temp_txt = "{{ message('btn.026') }}";
					}
					gaiaCommon.customAlert("{{ message('msg.projectcost.003') }} ".replace('{0}', temp_txt));
					// 이미 {0} 상태입니다.
					chk += 1;
					return false;
				}
			} else if(stats_type == "C") {
			    // 승인 취소
			    if (apprvl_stats != "A") {
			        gaiaCommon.customAlert("승인취소는 승인 상태여야 합니다.");
					chk += 1;
					return false;
			    }

			}

			//승인, 반려
			if (stats_type == "A" || stats_type == "R") {
				if (apprvl_stats == null) {
					gaiaCommon.customAlert("{{ message('msg.projectcost.004') }} ".replace('{0}', txt));
					//  승인요청 상태에만 {0}할 수 있습니다.
					chk += 1;
					return false;
				}
			}

			if (chk == 0) {
				// 상태 업데이트 가능한 데이터일 경우 formData 추가
				formData.push({ cntrctNo: cntrctNo, dailyReportId: checkedRow.daily_report_id, apprvlStats: stats_type, docId: checkedRow.doc_id});
			}

		});

		if (chk < 1) {
			const data = {};
			let apiUrl = 'dailyreport/update-status-dailyreport';
			data['dailyReportList'] = formData;

			// 승인 취소인 경우
			if(stats_type == "C") {
			    apiUrl = 'dailyreport/cancel-approval';
			}


			$.ajax({
				url: BASEPATH + apiUrl,
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(data),
				success(result) {
					if (result.ok) {
					    let alertMsg = "{{ message('msg.034') }}";           // 처리가 완료되었습니다.
						if (result.details && result.details.result === "FailCancelApproval") {
                            alertMsg = "작업일지 승인 취소 처리 중 오류가 발생했습니다."
                        }
                        gaiaCommon.customAlert(alertMsg, function () {
                            location.reload();
                        });
					} else if (result.code === 1000) {
						gaiaCommon.customAlert("{{ message('msg.monthlyreport.010') }}"); // 지정된 결재선이 없습니다. 결재선을 설정해주세요.
					}
				},
				error(result) {
					gaiaCommon.customAlert("{{ message('msg.monthlyreport.004') }}"); // 다시 시도해주세요.
				}
			});
		}
	}

	// 검색 조건 유지, session 저장
	function updateRequestData() {
	    requestData = {
            year: $("#year").val(),
            month: $("#month").val(),
            spanStatus: $("#selectStatus").val(),
            searchText: $("#searchText").val()
	    };
	    gaia.setSearchData(requestData);
	}

	// 복사 버튼 클릭 이벤트
	// l: 목록의 버튼 클릭, b: 상단 복사 버튼 클릭
	function copy(clickType, clickDailyReportId) {
		const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
	    if(clickType == 'b') {
            // 체크박스 유효성 확인
            if (checkedRows.length < 1) {
                gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', "복사"));     // {}할 항목을 선택해주세요.
                return false;
            }

            if (checkedRows.length > 1) {
                gaiaCommon.customAlert("{{ message('msg.036') }}".replace('{0}', "복사"));    // {}할 항목을 하나만 선택해주세요.
                return false;
            }
        }
        dailyReportId = clickDailyReportId;

	    // 날짜 선택 alert 생성
        $('#dateModal').show();

	}

	// 게시물 복사 및 생성
	async function copyDailyReport() {
        gaiaCommon.LoadingOverlay('body', true);

        // 금일 이후 날짜 선택한 경우 return
        let selectedDate = new Date($('#copyDate').val());
        let today = new Date();
        let currentRId;
        let siteLaborData;

        // 시간 비교 시 시각 00:00:00으로 고정 (날짜만 비교)
        selectedDate.setHours(0, 0, 0, 0);
        today.setHours(0, 0, 0, 0);

        if(selectedDate > today) {
            gaiaCommon.customAlert("미래 일자로 게시물을 작성할 수 없습니다.");
            return false;
        }


	    // 게시물 존재 여부 확인, true: 존재, false: 미존재
        let reportExists = checkDailyReportExists();

        if(reportExists == false) {
			const checkedRows = dailyreport.dailyreportGrid.getCheckedRows();
            // 체크한 체크 박스 rid 추출
            const rId = dailyReportId || checkedRows[0].daily_report_id ;


            // 복사 대상 게시물 조회
            const detailResp = await getDailyReportDetail(rId);
            const details = detailResp.details || {};
            const summary = details.summaryDetail || {};
            // const siteLaborData = details.lData || [];

            // 기상청 데이터 조회
            const kmaResp = await getKma();
            const kma = kmaResp.details.kma;
            const amWthr        = String(kma?.am_wf ?? '');
            const pmWthr        = String(kma?.pm_wf ?? '');
            const dlowstTmprtVal= String(kma?.ta_min ?? '');
            const dtopTmprtVal  = String(kma?.ta_max ?? '');
            const prcptRate     = String(kma?.rn_day ?? '');
            const snowRate      = String(kma?.sd_max ?? '');


            // 복사한 데이터로 게시물 저장
            const addParam = {
              cntrctNo: cntrctNo,
              dailyReportDate: $('#copyDate').val(),
              createType: 'copy',
              reportNo: summary.reportNo, // detail에서 가져온 reportNo 사용
              title: summary.title,
              majorMatter: summary.majorMatter,
              sftyWorkItem: summary.sftyWorkItem,
              todayActivityContents: summary.todayActivityContents,
              tomorrowActivityContents: summary.tomorrowActivityContents,
              amWthr, pmWthr, dlowstTmprtVal, dtopTmprtVal, prcptRate, snowRate
            };
            const addResp = await addDailyReport(addParam);
            currentRId = addResp.details.dailyreportId;
            window.location.href = "/construction/dailyreport/update?cntrctNo=" + cntrctNo + "&rId=" + currentRId +`&pjtNo=${pjtInfo.pjtNo}`;
        } else {
            gaiaCommon.customAlert("해당 날짜의 보고서는 이미 등록되어 있습니다.");
            gaiaCommon.LoadingOverlay('body', false);
            return;
        }

        // 초기화
        dailyReportId = '';
	}
	async function getDailyReportDetail(rId) {
	    var param = {
            cntrctNo: cntrctNo
            , dailyReportId: rId
        };

        const response = await $.ajax({
            url: BASEPATH + 'dailyreport/dailyreport-detail',
            method: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset-utf-8',
            data: JSON.stringify(param),
            async: false,
            success: function (response, status, xhr) {

            },
            error: function (xhr, status, error) {
                console.error(status, error);
                gaiaCommon.customAlert("{{ message('msg.060') }}");

            }
        });
        return response;

	}

    // 기상청 조회
    async function getKma() {
        let kma;
		var formData = {
			pjtNo: pjtInfo.pjtNo
			, tm: $('#copyDate').val().replaceAll("-", "")
		}

		const response = $.ajax({
			url: '/api/util/kma-weather',
			method: 'POST',
			contentType: 'application/json',
			data: JSON.stringify(formData),
			success: function (response) {
			},
			error: function (response) {
				gaiaCommon.customAlert("{{ message('msg.construction.002') }}");
				return false;
			},
			complete: function(){
				gaiaCommon.LoadingOverlay('body', false);
			}
		});

        return response;
	}


    async function addDailyReport(addParam) {
        const response = $.ajax({
            url: BASEPATH + 'dailyreport/add-copy-dailyreport',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(addParam),
            success(result) {
                if (result.ok) {
                    gaiaCommon.customAlert("{{ message('msg.034') }}", function () {
                    });
                }
            }
        });

        return response;
    }


    // 날짜 alert 닫기
    function closeDateModal() {
        $('#dateModal').hide();
    }

    // 날짜 alert 현재 날짜 세팅
    function setTodayDate() {
        const today = new Date();

        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');

        const formatted = `${yyyy}-${mm}-${dd}`;
        $('#copyDate').val(formatted);
    }

    // 작업일지 게시물 존재 여부 확인 API 송수신
    function checkDailyReportExists() {
        let reportExists = true;        // true: 존재, false: 미존재

        // yyyy-MM-dd 형태로 날짜 추출
        let dailyReportDate = $('#copyDate').val();

        var param = {
            cntrctNo: cntrctNo,
            dailyReportDate: dailyReportDate
        };

        $.ajax({
            url: BASEPATH + 'dailyreport/report-exists',
            method: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset-utf-8',
            data: JSON.stringify(param),
            async: false,
            success: function (response, status, xhr) {
                reportExists = response.details.dailyReportExists;
            },
            error: function (xhr, status, error) {
                console.error(status, error);
                gaiaCommon.customAlert("{{ message('msg.060') }}");
            }
        });

        return reportExists;

    }

    // PDF 미리보기
    // document.getElementById('dailyreportDataGrid').addEventListener('click', function (e) {
    //     if (e.target.closest('.preview-btn')) {
    //         const wrapper = e.target.closest('.preview-btn-wrapper');
    //         const pdfRId = wrapper.dataset.dailyReportId;
    //         console.log('*** cntrctNo=',cntrctNo,' pdfRId=',pdfRId,' url = ', url, ' imgDir=',imgDir);
    //         gaiaCommon.openReportViewer('daily-report/daily_report.jrf',{cntrctNo: cntrctNo, dailyReportId: pdfRId, url: url, imgDir: imgDir})
	//
    //     }
    // });

	$(document).ready(()=>{
		gaia.create({
			$init: function ($params) {
				if (gaiaCommon.me.isAdmin() || isGAIA()) {
					$("#conts_tit").show();
					$("#cntrct_no_select").show();
				}

				gaiaPortal.navMenuInit('M0401', '{{ message("item.construction.901") }}');

				cntrctNo = sessionStorage.getItem('cntrctNo');
				init();
				gaia.loaded = true;
				setTodayDate();
            }
        });
	})

</script>
<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>
{% endblock footer_script %}