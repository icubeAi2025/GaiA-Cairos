{% extends header ? 'layout/base_content' : 'layout/base_popup' %}
{% block content %}
<section class="contents_wrap g-row">
	<article class="conts g-row">
		<div class="group" id="formBox">
			<div class="conts_form">
				<div class="btn_area s_default _outline">
					<button type="button" class="btn save-btn" id="addButton" onclick="page.saveQuality()">{{
						message('btn.006') }}</button> <!-- 저장 -->
					<button type="button" class="btn" id="deleteButton" onclick="page.closePage()">{{
						message('btn.007')}}</button> <!-- 닫기 -->
				</div>
				<div class="s_conts">
					<span class="tree_route">{{ message('item.quality.020')}}</span> <!-- 검측 요청 정보 -->
					<div class="form_box" id="quality-form">
						<div class="container" style="display: flex; align-items: center;">
							<span class="caption">
								<span><b class="c_red">*</b> {{ message('item.com.023') }}</span>
							</span>
						</div>
						<!-- row -->
						<div class="row cols7">
							<div class="col merge4">
								<div class="form_label required">{{ message('item.quality.007')}}</div> <!-- 문서 번호 -->
								<div class="form_data">
									<input type="text" name="ispDocNo" class="maxlength" maxlength="100" required>
								</div>
							</div>
							<div class="col merge3">
								<div class="form_label required">{{ message('item.quality.010')}}</div>
								<!-- 검측 요청 일자 -->
								<div class="form_data">
									<input type="date" name="ispReqDt" id="ispReqDt" class="date">
								</div>
							</div>
						</div>
						<!-- row -->
						<div class="row cols7">
							<div class="col merge4">
								<div class="form_label">{{ message('item.quality.008')}}</div> <!-- 위치 -->
								<div class="form_data">
									<input type="text" name="ispLct" class="maxlength" maxlength="255">
								</div>
							</div>
							<div class="col merge3">
								<div class="form_label">{{ message("item.progressstatus.010") }}</div> <!-- 공종 -->
								<div class="form_data">
									<div class="select-row"> <!-- 이 줄 추가 -->
										<span class="selectbox" id="selectBox">
											<select name="workTypeSelect" id="workTypeSelect">
												<option value="A">
													{{ message("item.quality.001") }} <!-- 건축 -->
												</option>
												<option value="C">
													{{ message("item.quality.002") }} <!-- 토목 -->
												</option>
												<option value="F">
													{{ message("item.quality.003") }} <!-- 조경 -->
												</option>
												<option value="T">
													{{ message("item.quality.004") }} <!-- 통신 -->
												</option>
												<option value="M">
													{{ message("item.quality.005") }} <!-- 설비 -->
												</option>
												<option value="E">
													{{ message("item.quality.006") }} <!-- 전기 -->
												</option>
												<option value="O">
													{{ message("item.dash.043") }} <!-- 기타 -->
												</option>
											</select>
										</span>
										<span class="selectbox">
											<select name="work" id="constructTypeSelect"></select>
										</span>
										<span class="selectbox">
											<select name="work" id="resourceTypeSelect"></select>
										</span>
									</div>
								</div>
							</div>

						</div>
						<!-- row -->
						<div class="row cols">
							<div class="col">
								<div class="form_label">{{ message("item.quality.021") }}</div> <!-- 검측 부위 -->
								<div class="form_data">
									<input type="text" class="form-control maxlength" name="ispPart" maxlength="255">
								</div>
							</div>
						</div>
						<!-- row -->
						<div class="row cols">
							<div class="col">
								<div class="form_label">{{ message("item.construction.052") }}</div>
								<!-- Activity 명 -->
								<div class="form_data">
									<span class="item_wrap">
										<textarea name="activity_nm" id="activity_nm" class="form-control"
											style="pointer-events: auto;" readonly required></textarea>
										<button type="button" class="btn icon_btn _fill" onclick="page.getActivity()">
											<i class="ic ic-search"></i>
											<span class="blind">{{ message('btn.015') }}</span> <!-- 조회 -->
										</button>
										<input type="hidden" name="wbs_cd" id="wbs_cd">
										<input type="hidden" name="activity_id" id="activity_id">
									</span>
								</div>
							</div>
						</div>
						<!-- row -->
						<div class="row cols">
							<div class="col">
								<div class="col merge">
									<div class="form_label">{{ message("item.quality.009") }}</div> <!-- 검측 사항 -->
									<div class="form_data">
										<textarea id="ispIssue" name="ispIssue" class="maxlength"
											maxlength="255"></textarea>
									</div>
								</div>
							</div>
						</div>
						<!-- row -->
						<div class="row">
							<div class="col">
								<div class="form_label">{{ message('btn.021') }}</div> <!-- 파일첨부 -->
								<div class="form_data">

									<div class="attach_wrap">
										<div class="attach_toolbar">
											<div class="btn_area s_small">
												<div class="attach_btn">
													<input type="file" id="fileInput" name="files" multiple>
													<button type="button" class="btn _fill" id="addFileButton">{{
														message('btn.021') }}</button> <!-- 파일첨부 -->
												</div>
												<button type="button" class="btn _outline" id="removeAllButton">{{
													message('btn.020') }}</button> <!-- 모두삭제 -->
											</div>
											<div class="attach_info">
												<span class="attach_result">
												</span>
												<span class="attach_capacity">
													<span class="item" id="uploadedFileSize">0 KB</span>
													<span class="item">25 MB</span>
												</span>
											</div>
										</div>

										<div class="attach_area">
											<!-- 첨부파일 미등록 시 -->
											<p class="data_info">
												{{ message('msg.pinstall.003') }}
											</p>

											<!-- 첨부파일 등록 시 활성화 'hide'제거-->
											<div class="attach_list hide">
												<ul class="file_header">
													<li class="header_item" style="display:flex;">
														<span class="f_name" style="padding-left: 38px;">{{
															message('item.com.020') }}</span>
														<!-- 파일명 -->
														<span class="f_capacity">{{ message('item.com.021') }}</span>
														<!-- 크기 -->
													</li>
												</ul>
												<ul class="file_list" id="fileList"></ul>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="group">
			<div class="s_conts">
				<span class="tree_route">{{ message("item.quality.023") }}</span> <!-- 체크리스트 -->
				<div class="conts_grid">
					<div class="toolbar">
						<div class="btn_area s_default">
							<button type="button" class="btn _outline" id="checkListButton" onclick="page.checkList()">
								체크리스트 가져오기
							</button>
						</div>
					</div>

					<table class="table ta_c" id="checkListTable">
						<colgroup>
							<col width="100px">
							<col>
							<col>
							<col>
							<col>
						</colgroup>
						<thead id="checkListHead">
						</thead>
						<tbody id="checkListBody">
						</tbody>
					</table>
				</div>
			</div>
		</div>
		<div class="group">
			<div class="s_conts">
				<span class="tree_route">{{ message("item.quality.024") }}</span>


				<!-- S: Slick Slider -->
				<div class="process_photo">
					<div class="quality_photo_list" id="qualityPhotoList">
					</div>

					<div class="slick_nav">
						<div class="btn_area">
							<div class="btn_group _outline">
								<button type="button" class="btn icon_btn" onclick="page.addPhoto()">
									<i class="ic ic-picture-one"></i>
									<span class="blind">추가</span>
								</button>
								<button type="button" class="btn icon_btn" onclick="photo.delPhoto()">
									<i class="ic ic-delete"></i>
									<span class="blind">삭제</span>
								</button>
							</div>

							<div class="btn_group _outline slick_indigator">
								<button type="button" class="btn icon_btn prev">
									<span class="blind">이전</span>
								</button>
								<button type="button" class="btn icon_btn next">
									<span class="blind">다음</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="popup" class="popup_overlay modal_base" style="display: none;">
			<!-- 팝업 내용 -->
		</div>
	</article>
</section>
{% endblock content %}
{% block footer_script %}
<style>
	#formBox {
		margin-top: 1em;
	}

	.file_header .header_item,
	.file_list .list_item {
		display: flex;
		align-items: center;
	}

	.f_name {
		flex: 1;
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
	}

	.f_capacity {
		margin-left: auto;
		min-width: 110px;
		text-align: right;
	}

	.chklst-dscrpt {
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
	}

	.p_photo_info .desc::before {
		content: "내용 :";
	}

	.p_photo_info .date::before {
		content: "일자 :";
	}

	.p_photo_info .desc {
		max-height: 100px;
		overflow: auto;
		word-break: break-word;
	}

	.focus-outline-white {
		outline: 2px solid white;
		outline-offset: 2px;
		border-radius: 4px;
	}

	.focus-style {
		outline: 2px solid black;
		outline-offset: 2px;
		border-radius: 4px;
	}

	.select-row {
		display: flex;
		gap: 12px;
		width: 100%;
		flex-wrap: nowrap;
	}

	.selectbox {
		flex: 1 1 0;
		min-width: 100px;
		display: block;
	}

	.selectbox select {
		width: 100%;
		box-sizing: border-box;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
</style>
<script>
	var pjtNo;
	var urlParams = new URLSearchParams(location.search);
	var cntrctNo = urlParams.get('cntrctNo')
	var qltyIspId = urlParams.get('qltyIspId');
	const mode = urlParams.get('mode');
	const type = urlParams.get('type');
	var workType = urlParams.get('workType')

	$(function () {
		gaia.create({
			$init: function ($params) {
				page.init();
			}
		});
	});

	var page = {
		init: function () {
			pjtNo = pjtInfo.pjtNo;
			$(function () {
				var title;

				if (mode === "create") {
					title = '{{ message("item.quality.018") }}' // 품질 검측 추가
					$('#checkListTable').hide();

					// 검측 요청 일자 = 오늘 날짜 -default
					setTimeout(() => {
						const dateInput = document.getElementById("ispReqDt");
						if (dateInput) {
							const today = new Date().toISOString().split('T')[0];
							dateInput.value = today;
						}
					}, 100);

					setTimeout(() => {
						const workTypeSelect = document.getElementById("workTypeSelect");
						if (workTypeSelect && workType) {
							for (let i = 0; i < workTypeSelect.options.length; i++) {
								if (workTypeSelect.options[i].value === workType) {
									workTypeSelect.selectedIndex = i;
									$("#workTypeSelect").trigger("change");
									break;
								}
							}
						}
					}, 300);
				}
				if (mode === "update") {
					title = '{{ message("item.quality.019") }}' // 품질 검측 수정
					$('#checkListTable').show();
					page.getQuality();
				}
				gaiaPortal.navMenuInit('M0404', title);
				$("#menuDepth").append(`<li class=\"breadcrumb_item\" id=\"depth_txt\">${title}</li>`);
			});

			// Slick slide
			$('.quality_photo_list').not('.slick-initialized').slick({
				arrows: true,
				prevArrow: $('.process_photo .prev'),
				nextArrow: $('.process_photo .next'),
				dots: true,
				infinite: false,
				slidesToShow: 4,
				slidesToScroll: 4,
				autoplay: false,
				speed: 1000,
				draggable: true
			});

			file.init();
		},
		getQuality: function () {
			gaiaCommon.get("/api/construction/qualityinspection/get/quality/" + cntrctNo + "/" + qltyIspId, {}, function (result) {
				let activityData = result.details.activitys;
				let checkListData = result.details.checkList;
				let qualityData = result.details.quality;
				let attachments = result.details.attachments;
				let photoList = result.details.photoList;
				let photoAttachments = result.details.photoAttachments;

				setTimeout(() => {
					makeCnsSelectBox(qualityData.cnsttyCd, "constructTypeSelect", qualityData.cnsttyCdL1)
						.then(() => {
							return makeCnsSelectBox(qualityData.cnsttyCdL1, "resourceTypeSelect", qualityData.cnsttyCdL2);
						})
				}, 100); // 하부공종2

				$('input[name="ispDocNo"]').val(gaiaCommon.decodeSafeText(qualityData.ispDocNo));  // 문서번호
				if (qualityData.ispReqDt) {
					const date = qualityData.ispReqDt.split(' ')[0];
					$('input[name="ispReqDt"]').val(date);
				}
				$('input[name="ispLct"]').val(gaiaCommon.decodeSafeText(qualityData.ispLct));
				$('#workTypeSelect').val(qualityData.cnsttyCd);
				$('input[name="ispPart"]').val(gaiaCommon.decodeSafeText(qualityData.ispPart));

				let activityNames = activityData.map(item => item.activityNm).join("\n");
				let wbsCds = activityData.map(item => item.wbsCd).join(", ");
				let activityIds = activityData.map(item => item.activityId).join(", ");
				$('textarea[name="activity_nm"]').val(activityNames);
				$('input[name="wbs_cd"]').val(wbsCds);
				$('input[name="activity_id"]').val(activityIds);

				$('textarea[name="ispIssue"]').val(gaiaCommon.decodeSafeText(qualityData.ispIssue));

				// 체크리스트 설정
				checkList.checkListData = checkListData.map(item => ({
					chklstId: item.chklstId,
					rowNum: item.chklstSno,
					chklstDscrpt: item.chklstDscrpt,
					chklstBssCd: item.chklstBssCd,
					cnstrtnYn: item.cnstrtnYn,
					cnsttyCd1: item.cnsttyCd1,
					cnsttyCd2: item.cnsttyCd2
				}));
				checkList.addUpdateCheckList();

				// 파일 처리
				if (attachments && attachments.length > 0) {
					file.processFetchedFiles(attachments);
				} else {
					file.serverFiles = [];
					file.existingFiles = [];
					file.renderFileList();
				}

				// 사진 데이터 처리
				if (photoList && photoList.length > 0) {
					photoList.forEach(function (photoData) {
						let attachedFile = photoAttachments.find(function (file) {
							return file.fileNo === photoData.atchFileNo && file.sno === photoData.phtSno;
						});

						if (attachedFile) {
							photoData.fileDiskPath = attachedFile.fileDiskPath;
							photoData.fileDiskNm = attachedFile.fileDiskNm;
							photoData.sno = attachedFile.sno;
						}
					});
					photo.init(photoList);
				}
			});
		},
		getActivity: function () { // Activity 리스트 가져오기
			const width = 1200;
			const height = 500;
			let left = Math.ceil((window.screen.width - width) / 2);
			left += window.screenLeft;
			const top = Math.ceil((window.screen.height - height) / 2);
			window.open(`/construction/qualityinspection/selectActivity?cntrctNo=${cntrctNo}` + `&pjtNo=${pjtInfo.pjtNo}`, '_blank', `scrollbars=yes,width=${width},height=${height},left=${left},top=${top}`);
		},
		checkList: function () { // 체크 리스트 가져오기(새창)
			const width = 1200;
			const height = 500;
			let left = Math.ceil((window.screen.width - width) / 2);
			left += window.screenLeft;
			const top = Math.ceil((window.screen.height - height) / 2);

			const workType = document.getElementById('workTypeSelect');
			const constructType = document.getElementById('constructTypeSelect');
			const resourceType = document.getElementById('resourceTypeSelect');

			const workTypeValue = workType.value;
			const constructTypeValue = constructType.value;
			const resourceTypeValue = resourceType.value;

			if (!workTypeValue || !constructTypeValue || !resourceTypeValue) {
				gaiaCommon.customAlert('{{ message("msg.quality.002") }}');	// 공종을 선택해주세요.
				return;
			}

			const workTypeText = workType.selectedIndex > -1 ? workType.options[workType.selectedIndex].text : "";
			const constructTypeText = constructType.selectedIndex > -1 ? constructType.options[constructType.selectedIndex].text : "";
			const resourceTypeText = resourceType.selectedIndex > -1 ? resourceType.options[resourceType.selectedIndex].text : "";

			const url = `/construction/qualityinspection/selectChecklist?cntrctNo=${cntrctNo}` +
				`&workTypeText=${workTypeText}` +
				`&workTypeValue=${workTypeValue}` +
				`&constructTypeText=${constructTypeText}` +
				`&constructTypeValue=${constructTypeValue}` +
				`&resourceTypeText=${resourceTypeText}` +
				`&resourceTypeValue=${resourceTypeValue}`;

			window.open(url, '_blank', `scrollbars=yes,width=${width},height=${height},left=${left},top=${top}`);

		},
		closePage: function () {
			if (type === 'p') {
				window.close();
			} else {
				window.location.href = `/construction/qualityinspection?cntrctNo=${cntrctNo}&pjtNo=${pjtNo}&_condition=init`;
			}
		},
		saveQuality: function () {
			const ispDocNo = $('input[name="ispDocNo"]').val();
			const activity = $('input[name="activity_id"]').val();
			const rsltDocNo = $('input[name="rsltDocNo"]').val()


			const wbsCdValues = $('input[name="wbs_cd"]').val().split(',');
			const activityIdValues = $('input[name="activity_id"]').val().split(',');

			// activity 객체 리스트를 생성
			const activities = wbsCdValues.map((wbsCd, index) => ({
				wbsCd: wbsCd.trim(),
				activityId: activityIdValues[index] ? activityIdValues[index].trim() : null
			}));

			const checklistData = checkList.getCheckListData();

			if (!ispDocNo) {
				gaiaCommon.customAlert('{{ message("msg.quality.007") }}');	// 문서 번호를 입력해주세요.
				$('input[name="ispDocNo"]').focus();
				return;
			}

			// 파일 총 용량 확인
			let totalSize = 0;

			// 서버에서 불러온 파일
			file.serverFiles.forEach((f, idx) => {
				const size = Number(f.size || f.fileSize || 0);
				console.log(`[서버파일 ${idx}]`, f.name, ":", size, "bytes");
				totalSize += size;
			});

			// 새로 추가한 파일
			file.existingFiles.forEach((f, idx) => {
				const size = Number(f.size || 0);
				console.log(`[신규파일 ${idx}]`, f.name, ":", size, "bytes");
				totalSize += size;
			});

			console.log("총 파일 용량:", totalSize, "bytes");
			console.log("총 파일 용량(MB):", (totalSize / (1024 * 1024)).toFixed(2), "MB");

			// 25MB 초과 체크
			const maxSize = 25 * 1024 * 1024; // 25MB
			if (totalSize > maxSize) {
				gaiaCommon.customAlert("첨부파일 총 용량이 25MB를 초과했습니다. 일부 파일을 삭제한 뒤 다시 시도해주세요.");
				return;
			}

			if (!checklistData || checklistData.length === 0) {
				gaiaCommon.customAlert('{{ message("msg.quality.009") }}'); // 체크리스트를 추가해주세요

				const $checkListTable = $('#checkListButton');
				$checkListTable.addClass('focus-style');

				setTimeout(() => {
					$checkListTable.removeClass('focus-style');
				}, 1500);

				return;
			}

			let param;
			let url;
			let message;

			if (mode === 'create') {
				param = {
					cntrctNo: cntrctNo,
					ispDocNo: ispDocNo,
					ispReqDt: $('input[name="ispReqDt"]').val(),
					ispLct: $('input[name="ispLct"]').val(),
					cnsttyCd: $('#workTypeSelect').val(),
					cnsttyCdL1: $('#constructTypeSelect').val(),
					cnsttyCdL2: $('#resourceTypeSelect').val(),
					ispPart: $('input[name="ispPart"]').val(),
					activity: activities,
					ispIssue: $('textarea[name="ispIssue"]').val(),
					checklist: checklistData,
					photos: photo.photoArr.map(photo => {
						let shotDate = '';
						if (Array.isArray(photo.shotDate)) {
							const [year, month, day] = photo.shotDate;
							shotDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
						} else if (typeof photo.shotDate === 'string') {
							shotDate = photo.shotDate.split('T')[0];
						} else {
							shotDate = '';
						}

						return {
							titlNm: photo.titlNm,
							dscrpt: photo.dscrpt,
							shotDate: shotDate,
							phtSno: photo.phtSno
						};
					})
				}
				url = '/api/construction/qualityinspection/create/quality'
				message = '{{ message("msg.044") }}'	// 저장되었습니다
			}
			if (mode === 'update') {
				param = {
					cntrctNo: cntrctNo,
					ispDocNo: ispDocNo,
					qltyIspId: qltyIspId,
					ispReqDt: $('input[name="ispReqDt"]').val(),
					ispLct: $('input[name="ispLct"]').val(),
					cnsttyCd: $('#workTypeSelect').val(),
					cnsttyCdL1: $('#constructTypeSelect').val(),
					cnsttyCdL2: $('#resourceTypeSelect').val(),
					ispPart: $('input[name="ispPart"]').val(),
					activity: activities,
					ispIssue: $('textarea[name="ispIssue"]').val(),
					checklist: checklistData,
					photos: photo.photoArr.map(photo => {
						let shotDate = '';
						if (Array.isArray(photo.shotDate)) {
							const [year, month, day] = photo.shotDate;
							shotDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
						} else if (typeof photo.shotDate === 'string') {
							shotDate = photo.shotDate.split('T')[0];
						} else {
							shotDate = '';
						}

						return {
							titlNm: photo.titlNm,
							dscrpt: photo.dscrpt,
							shotDate: shotDate,
							phtSno: photo.phtSno
						};
					}),
					deleteSno: photo.deleteSno,
					deletePhtSno: photo.deletePhtSno
				}
				url = '/api/construction/qualityinspection/update/quality'
				message = '{{ message("msg.007") }}'	// 수정되었습니다
			}

			const formData = new FormData();
			formData.append('quality', new Blob([JSON.stringify(param)], { type: 'application/json' }));

			// 사진 파일 추가
			photo.photoArr.forEach(photo => {
				const file = photo.file;
				if (file) {
					formData.append('photos', file);
				}
			});


			// 첨부 파일 관리
			if (file.removedFiles && file.removedFiles.length > 0) {
				file.removedFiles.forEach(f => {
					formData.append('removedFiles[]', f.fileNo);
					formData.append('removedSnos[]', f.sno);
				});
			}

			for (let [key, value] of formData.entries()) {
				console.log("FormData:", key, value);
			}

			formData.delete('files');
			file.existingFiles.forEach(file => {
				formData.append('files', file);
			});


			gaiaCommon.LoadingOverlay('body', true);
			$.ajax({
				url: url,
				method: 'POST',
				processData: false,
				contentType: false,
				data: formData,
				success: function (response) {
					if (response.ok) {
						gaiaCommon.customAlert(message, function () {
							gaiaCommon.LoadingOverlay('body', false);
							if (type === 'p') {
								if (window.opener && !window.opener.closed) {
									window.opener.location.replace(`/construction/qualityinspection?cntrctNo=${cntrctNo}` + `&pjtNo=${pjtInfo.pjtNo}`);
								}
								window.close();
							} else {
								window.location.replace(`/construction/qualityinspection?cntrctNo=${cntrctNo}` + `&pjtNo=${pjtInfo.pjtNo}`);
							}
						});
					}
				},
				error: function (xhr, status, error) {
					gaiaCommon.LoadingOverlay('body', false);
					gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
				},
			});
		},
		addPhoto: function () {
			gaiaCommon.checkAuth("QUA_C_01", () => {
				$("#popup").load("/construction/qualityinspection/photo", function () {
					const ispReqDt = $("#ispReqDt").val();

					if (ispReqDt) {
						$("#shotDate").val(ispReqDt);
					}

					// 날짜 세팅 후 팝업 표시
					$("#popup").css({ "display": "flex" });
				});
			});
		}
	}
	// 체크리스트
	window.checkList = {
		checkListData: [], // 데이터 저장
		addUpdateCheckList: function () {
			const thead = document.getElementById('checkListHead');
			const tbody = document.getElementById('checkListBody');

			thead.innerHTML = `
		<tr>
			<th style="width: 7%;"></th>
			<th style="width: 5%;">{{ message("item.app.035") }}</th>
			<th style="width: 65%;">{{ message("item.quality.030") }}</th>
			<th style="width: 13%;">{{ message("item.quality.031") }}</th>
			<th style="width: 10%;">
				{{ message("item.quality.032") }}<br><br>
				<input class="check_mark" type="checkbox" id="checkAllCnstrtnYn">
			</th>
		</tr>
	`;
			tbody.innerHTML = '';

			if (this.checkListData.length === 0) {
				$('#checkListTable').hide();
			} else {
				$('#checkListTable').show();
			}

			this.checkListData.forEach((item, index) => {
				item.rowNum = index + 1;

				const row = document.createElement('tr');

				// 삭제/이동 버튼
				const deleteCell = document.createElement('td');
				deleteCell.innerHTML = `
						<div class="item_group">
							<button type="button" class="icon_btn" onclick="checkList.deleteRow('${item.chklstId}')">
								<i class="ic ic-delete"></i>
							</button>
							<button type="button" class="icon_btn" onclick="checkList.moveRowUp('${item.chklstId}')">
								<i class="ic ic-arrow2"></i>
							</button>
							<button type="button" class="icon_btn" onclick="checkList.moveRowDown('${item.chklstId}')">
								<i class="ic ic-arrow2 down"></i>
							</button>
						</div>
					`;
				row.appendChild(deleteCell);

				// 번호
				const numCell = document.createElement('td');
				numCell.textContent = item.rowNum;
				row.appendChild(numCell);

				// 검사항목
				const itemCell = document.createElement('td');
				itemCell.classList.add('chklst-dscrpt');
				itemCell.textContent = gaiaCommon.decodeSafeText(item.chklstDscrpt);
				itemCell.style.textAlign = 'left';
				itemCell.style.wordWrap = 'break-word';
				itemCell.style.whiteSpace = 'normal';
				row.appendChild(itemCell);

				// 검사 기준
				const bssCell = document.createElement('td');
				bssCell.innerHTML = `
					<select id="CHSTypeSelect-${item.chklstId}">
						<option disabled value="">=선택=</option>
						<option value="01" ${item.chklstBssCd === '01' ? 'selected' : ''}>{{ message("item.quality.033") }}</option>
						<option value="02" ${item.chklstBssCd === '02' ? 'selected' : ''}>{{ message("item.quality.034") }}</option>
						<option value="03" ${item.chklstBssCd === '03' ? 'selected' : ''}>{{ message("item.quality.035") }}</option>
						<option value="04" ${item.chklstBssCd === '04' ? 'selected' : ''}>{{ message("item.quality.036") }}</option>
						<option value="05" ${item.chklstBssCd === '05' ? 'selected' : ''}>{{ message("item.quality.037") }}</option>
					</select>
				`;
				row.appendChild(bssCell);

				const selectElement = bssCell.querySelector('select');
				selectElement.addEventListener('change', (event) => {
					this.updateBssCode(item.chklstId, event.target.value);
				});

				// 시공확인 체크박스
				const checkCell = document.createElement('td');
				checkCell.innerHTML = `
			<div class="item_group">
				<label class="form_check">
					<input class="check_mark" type="checkbox" name="checkboxgroup" id="cnstrtnYnCheckbox-${item.chklstId}" ${item.cnstrtnYn === 'Y' ? 'checked' : ''} onchange="checkList.updateCheckStatus('${item.chklstId}', this)">
					<span class="check_label blind">선택</span>
				</label>
			</div>
		`;
				row.appendChild(checkCell);

				tbody.appendChild(row);
			});
		},
		updateCheckStatus: function (chklstId, checkbox) {
			const isChecked = checkbox.checked ? 'Y' : 'N';
			// 체크박스 상태를 데이터에 반영
			const item = this.checkListData.find(item => item.chklstId === chklstId);
			if (item) {
				item.cnstrtnYn = isChecked;
			}
		},
		deleteRow: function (chklstId) {
			gaiaCommon.customConfirm('{{ message("item.quality.062") }}', '{{ message("item.quality.062") }}', "{{ message('msg.009') }}", () => {
				const index = this.checkListData.findIndex(item => item.chklstId === chklstId);
				if (index !== -1) {
					this.checkListData.splice(index, 1); // 데이터에서 항목 삭제
					this.addUpdateCheckList(); // 테이블 재렌더링
				}
			});
		},
		moveRowUp: function (chklstId) {
			const index = this.checkListData.findIndex(item => item.chklstId === chklstId);
			if (index <= 0) return; // 첫 번째 항목은 위로 못 올라감
			const [movedItem] = this.checkListData.splice(index, 1);
			this.checkListData.splice(index - 1, 0, movedItem);
			this.addUpdateCheckList();
		},
		moveRowDown: function (chklstId) {
			const index = this.checkListData.findIndex(item => item.chklstId === chklstId);
			if (index < 0 || index >= this.checkListData.length - 1) return; // 마지막 항목은 아래로 못 내려감
			const [movedItem] = this.checkListData.splice(index, 1);
			this.checkListData.splice(index + 1, 0, movedItem);
			this.addUpdateCheckList();
		},
		// 검사 기준 변경 이벤트
		updateBssCode: function (chklstId, newBssCode) {
			const item = this.checkListData.find(item => item.chklstId === chklstId);
			if (item) {
				item.chklstBssCd = newBssCode;
			}
		},
		// 화면의 체크리스트 데이터 가져오기
		getCheckListData: function () {
			return this.checkListData.map((item, index) => {
				let chklstBssCd = '';
				let checkbox = '';

				chklstBssCd = document.getElementById(`CHSTypeSelect-${item.chklstId}`).value;
				checkbox = document.getElementById(`cnstrtnYnCheckbox-${item.chklstId}`);

				const cnstrtnYn = checkbox && checkbox.checked ? 'Y' : 'N';

				return {
					chklstId: item.chklstId,
					chklstSno: index + 1,
					chklstBssCd: chklstBssCd, // 선택된 값
					cnstrtnYn: cnstrtnYn,
				};
			});
		},
		// 데이터 가져오기
		getCheckListGridData: function (cnsttyCd, upCnsttyCd) {
			const _this = this;
			const param = {
				cntrctNo: cntrctNo,
				cnsttyCd: cnsttyCd,
				upCnsttyCd: upCnsttyCd
			};

			$.ajax({
				url: '/api/construction/qualityinspection/get/checklist',
				method: 'POST',
				dataType: 'json',
				contentType: 'application/json; charset=utf-8',
				data: JSON.stringify(param),
				success: function (response) {
					// 서버로부터 받은 데이터 처리
					const data = response.details.checkList;
					const formattedData = data.map((item, index) => ({
						rowNum: item.row_num,
						chklstId: item.chklst_id,
						chklstDscrpt: item.chklst_dscrpt,
						chklstBssCd: item.chklst_bss_cd,
						cnstrtnYn: item.cnstrtnYn
					}));

					_this.checkListData = formattedData;
					_this.addUpdateCheckList();  // 테이블을 새 데이터로 렌더링
				}
			});
		}
	};

	let file = {
		serverFiles: [],     // 서버에서 불러온 파일들
		existingFiles: [],   // 새로 추가한 파일들
		removedFiles: [],    // 삭제할 서버 파일들

		init() {
			this.cacheElements();
			this.addEventListeners();
		},

		cacheElements() {
			this.fileInput = document.getElementById('fileInput');
			this.addFileButton = document.getElementById('addFileButton');
			this.removeAllButton = document.getElementById('removeAllButton');
			this.fileList = document.getElementById('fileList');
		},

		addEventListeners() {
			this.addFileButton.addEventListener('click', () => this.fileInput.click());
			this.fileInput.addEventListener('change', () => this.handleNewFiles(this.fileInput.files));
			this.removeAllButton.addEventListener('click', () => this.removeAllFiles());

			// 드래그앤드롭
			const attachArea = document.querySelector('.attach_area');
			attachArea.addEventListener('dragover', (e) => { e.preventDefault(); attachArea.classList.add('dragging'); });
			attachArea.addEventListener('dragleave', () => attachArea.classList.remove('dragging'));
			attachArea.addEventListener('drop', (e) => {
				e.preventDefault();
				attachArea.classList.remove('dragging');
				this.handleNewFiles(e.dataTransfer.files);
			});
		},

		/** 신규 파일 추가 */
		handleNewFiles(files) {
			for (let f of files) {
				this.existingFiles.push(f);
			}
			this.fileInput.value = ""; // 초기화
			this.renderFileList();
		},

		/** 서버에서 받은 파일 세팅 */
		processFetchedFiles(attachments) {
			this.serverFiles = (attachments || []).map(file => ({
				name: file.fileNm,
				size: Number(file.fileSize ?? file.size ?? 0),
				fileNo: file.fileNo,
				sno: file.sno
			}));
			this.renderFileList();
		},

		/** 파일 삭제 */
		removeFile(index, fromServer = false) {
			if (fromServer) {
				const target = this.serverFiles[index];
				this.removedFiles.push({ fileNo: target.fileNo, sno: target.sno });
				this.serverFiles.splice(index, 1);
			} else {
				this.existingFiles.splice(index, 1);
			}
			this.renderFileList();
		},

		/** 전체 삭제 */
		removeAllFiles() {
			this.serverFiles.forEach(f => this.removedFiles.push({ fileNo: f.fileNo, sno: f.sno }));
			this.serverFiles = [];
			this.existingFiles = [];
			this.renderFileList();
		},

		/** 파일 목록 렌더링 */
		renderFileList() {
			this.fileList.innerHTML = "";

			if (this.serverFiles.length === 0 && this.existingFiles.length === 0) {
				document.querySelector('.data_info').classList.remove('hide');
				document.querySelector('.attach_list').classList.add('hide');
				this.updateSummary();
				return;
			}

			document.querySelector('.data_info').classList.add('hide');
			document.querySelector('.attach_list').classList.remove('hide');

			// 서버 파일
			this.serverFiles.forEach((f, idx) => {
				const li = this.createFileItem(f.name, f.size, true, idx, f.fileNo, f.sno);
				this.fileList.appendChild(li);
			});

			// 새 파일
			this.existingFiles.forEach((f, idx) => {
				const li = this.createFileItem(f.name, f.size, false, idx);
				this.fileList.appendChild(li);
			});

			this.updateSummary();
		},

		/** 개별 행 생성 */
		createFileItem(name, size, fromServer, index, fileNo = "", sno = "") {
			const li = document.createElement("li");
			li.classList.add("list_item");
			li.style.display = "flex";
			li.style.alignItems = "center";

			const removeBtn = document.createElement("button");
			removeBtn.type = "button";
			removeBtn.classList.add("icon_btn");
			removeBtn.innerHTML = '<i class="ic ic-close"></i>';
			removeBtn.addEventListener("click", () => this.removeFile(index, fromServer));

			const fileName = document.createElement("span");
			fileName.classList.add("f_name");
			fileName.textContent = name;

			// 서버 파일이면 다운로드 가능
			if (fromServer && fileNo && sno) {
				fileName.style.cursor = "pointer";
				fileName.addEventListener("click", () => {
					const url = `/api/construction/qualityinspection/${fileNo}/${sno}/file-download`;
					if (typeof window.download === 'function') window.download(url);
					else window.open(url, "_blank");
				});
			}

			const fileSize = document.createElement("span");
			fileSize.classList.add("f_capacity");
			fileSize.style.marginLeft = "auto";
			fileSize.textContent = this.formatFileSize(Number(size) || 0);

			li.appendChild(removeBtn);
			li.appendChild(fileName);
			li.appendChild(fileSize);
			return li;
		},

		/** 총 용량 업데이트 */
		updateSummary() {
			const totalSize = [...this.serverFiles, ...this.existingFiles]
				.reduce((sum, f) => sum + (Number(f.size) || 0), 0);

			const sizeEl = document.getElementById("uploadedFileSize");
			if (sizeEl) sizeEl.textContent = this.formatFileSize(totalSize);
		},

		/** 파일 크기 포맷 */
		formatFileSize(size) {
			return size < 1024
				? `${size} bytes`
				: size < 1048576
					? `${(size / 1024).toFixed(2)} KB`
					: `${(size / 1048576).toFixed(2)} MB`;
		}
	};

	// 사진관련
	let photo = {
		photoArr: [],
		deleteSno: [],
		deletePhtSno: [],
		init: function (data) {
			data.forEach((row, seq) => {
				let formattedDate = '';
				if (Array.isArray(row.shotDate)) {
					const [year, month, day] = row.shotDate;
					formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
				} else if (typeof row.shotDate === 'string') {
					formattedDate = row.shotDate.split('T')[0]; // ISO 형식일 경우
				}

				let webPath = row.fileDiskPath;

				// 백슬래시 경로 처리 (윈도우)
				if (webPath.includes('\\')) {
					webPath = webPath.replace(/^.*\\upload/, '/upload').replace(/\\/g, '/');
				} else {
					// 슬래시 경로 처리 (리눅스)
					webPath = webPath.replace(/^.*\/upload/, '/upload');
				}

				const imgSrc = `${webPath}/${row.fileDiskNm}`;

				$(".quality_photo_list").slick('slickAdd',
					`<div>` +
					`<dl class="dl_box p_photo">` +
					`<dt class="item_dt">` +
					`<label class="form_check">` +
					`<input class="check_mark" type="checkbox" name="check" value="` + seq + `">` +
					`<span class="check_label">` + row.titlNm + `</span>` +
					`</label>` +
					`</dt>` +
					`<dd class="item_dd">` +
					`<figure class="p_photo_info">` +
					`<img src="${imgSrc}" alt="${row.fileNm}" style="height:200px;">` +
					`<figcaption>` +
					`<p class="tit">` + row.titlNm + `</p>` +
					`<p class="desc">` + row.dscrpt + `</p>` +
					`<p class="date">` + formattedDate + `</p>` +
					`<input type="hidden" id="phtSno" value="` + row.phtSno + `">` +
					`<input type="hidden" id="sno" value="` + row.sno + `">` +
					`</figcaption>` +
					`</figure>` +
					`</dd>` +
					`</dl>` +
					`</div>`
				);
				this.photoArr.push(row);
			});
		},
		// 사진 추가
		setPhoto: function (data) {
			this.photoArr.push(data);
			const seq = this.photoArr.length - 1;

			let imgSrc = data.base;
			if (imgSrc && !imgSrc.startsWith("data:")) {
				imgSrc = "data:image/jpeg;base64," + imgSrc;
			}

			$(".quality_photo_list").slick('slickAdd',
				`<div>` +
				`<dl class="dl_box p_photo">` +
				`<dt class="item_dt">` +
				`<label class="form_check">` +
				`<input class="check_mark" type="checkbox" name="check" value="` + seq + `">` +
				`<span class="check_label">` + data.titlNm + `</span>` +
				`</label>` +
				`</dt>` +
				`<dd class="item_dd">` +
				`<figure class="p_photo_info">` +
				`<img src="` + imgSrc + `" alt="품질검측사진" style="height:200px;">` +
				`<figcaption>` +
				`<p class="tit">` + data.titlNm + `</p>` +
				`<p class="desc">` + data.dscrpt + `</p>` +
				`<p class="date">` + data.shotDate + `</p>` +
				`</figcaption>` +
				`</figure>` +
				`</dd>` +
				`</dl>` +
				`</div>`
			);
		},
		// 사진 삭제
		delPhoto: function () {
			const checkedItems = $('input[name=check]:checked');
			if (checkedItems.length < 1) {
				gaiaCommon.customAlert('{{ message("msg.055") }}'); // 삭제할 항목을 선택해주세요.
				return;
			}

			let deleteIndices = [];

			checkedItems.each((index, checkbox) => {
				const seq = parseInt($(checkbox).val(), 10);

				if (this.photoArr[seq]) {
					if (this.photoArr[seq].sno) {
						this.deleteSno.push(this.photoArr[seq].sno);
					}
					if (this.photoArr[seq].phtSno) {
						this.deletePhtSno.push(this.photoArr[seq].phtSno);
					}
					deleteIndices.push(seq);
				}
			});
			deleteIndices.sort((a, b) => b - a).forEach((seq) => {
				$(".quality_photo_list").slick('slickRemove', seq);
				this.photoArr.splice(seq, 1);
			});

			this.reIndexSlides();
		},
		reIndexSlides: function () {
			this.photoArr.forEach((item, idx) => {
				$('.quality_photo_list .slick-slide').eq(idx).find('.check_mark').val(idx);
			});
		}
	}

	function makeCnsSelectBox(selectedValue, elementId, defaultSelectedValue) {
		return new Promise((resolve, reject) => {
			let param = {
				cntrctNo: cntrctNo,
				upCnsttyCd: selectedValue, // 첫 번째 select의 선택된 값
			};

			gaiaCommon.LoadingOverlay('body', true);
			$.ajax({
				url: "/api/construction/qualityinspection/selectbox",
				method: "POST",

				dataType: "json",
				xhrFields: { withCredentials: true },
				contentType: "application/json; charset=UTF-8",
				traditional: true,
				data: JSON.stringify(param),
				success: function (response) {
					gaiaCommon.LoadingOverlay('body', false);
					let list = response.details.selectBox;
					let selectBoxElement = document.getElementById(elementId);

					selectBoxElement.innerHTML = `<option selected="" disabled="" value="">=선택=</option>`;

					list.forEach(item => {
						let option = document.createElement("option");
						option.value = item.cnstty_cd; // val 값 설정
						option.textContent = item.cnstty_nm; // text 값 설정

						// 기본 선택된 값을 설정
						if (item.cnstty_cd === defaultSelectedValue) {
							option.selected = true;
						}

						selectBoxElement.appendChild(option);
					});
					resolve();
				},
			});
		});
	}
	// 셀렉트 박스 선택
	$(document).on("change", "#workTypeSelect", function () {
		let selectedValue = $(this).val();
		$("#constructTypeSelect").empty();
		$("#resourceTypeSelect").empty();
		makeCnsSelectBox(selectedValue, "constructTypeSelect");
		checkList.getCheckListGridData(selectedValue, "");
	});

	// 두번째 공종(constructTypeSelect) 선택 시: 공종 선택 여부 및 옵션 존재 여부 확인
	$(document).on("mousedown", "#constructTypeSelect", function (e) {
		const selectedWorkType = $("#workTypeSelect").val();
		const $constructType = $(this);
		const options = $constructType.find("option");

		if (!selectedWorkType || selectedWorkType === "all") {
			gaiaCommon.customAlert("공종을 먼저 선택해주세요.");
			e.preventDefault(); // 드롭다운 열리지 않게 막음
			return;
		}

		if (options.length === 0 || (options.length === 1 && options.eq(0).text().trim() === "=선택=")) {
			gaiaCommon.customAlert("선택할 수 있는 공종이 없습니다. 체크리스트 관리 화면에서 공종을 추가해주세요.");
			e.preventDefault(); // 선택 못하게 막기
		}
	});

	// 두번째 공종이 실제로 선택되었을 때 → 세번째 셀렉트 박스 생성
	$(document).on("change", "#constructTypeSelect", function () {
		let selectedValue = $(this).val();
		$("#resourceTypeSelect").empty();
		if (selectedValue && selectedValue !== "=선택=") {
			makeCnsSelectBox(selectedValue, "resourceTypeSelect");
			checkList.getCheckListGridData(selectedValue, $("#workTypeSelect").val());
		}
	});

	// 세번째 공종(resourceTypeSelect) 선택 시: 공종 선택 여부 및 옵션 존재 여부 확인
	$(document).on("mousedown", "#resourceTypeSelect", function (e) {
		const selectedConstructType = $("#constructTypeSelect").val();
		const $resourceType = $(this);
		const options = $resourceType.find("option");

		if (!selectedConstructType || selectedConstructType === "=선택=") {
			gaiaCommon.customAlert("상위 공종을 먼저 선택해주세요.");
			e.preventDefault();
			return;
		}

		if (options.length === 0 || (options.length === 1 && options.eq(0).text().trim() === "=선택=")) {
			gaiaCommon.customAlert("선택할 수 있는 공종이 없습니다. 체크리스트 관리 화면에서 공종을 추가해주세요.");
			e.preventDefault(); // 선택 못하게 막기
		}
	});

	// 세번째 공종 실제 선택 시
	$(document).on("change", "#resourceTypeSelect", function () {
		let selectedValue = $(this).val();
		let parentsValue = $("#constructTypeSelect").val();
		checkList.getCheckListGridData(selectedValue, parentsValue);
	});

	// 셀렉트박스 툴팁
	$(document).on('change', 'select', function () {
		const selectedText = $(this).find("option:selected").text();
		$(this).attr('title', selectedText);
	});

	// 체크리스트 체크박스 전체선택
	$(document).on("change", "#checkAllCnstrtnYn", function () {
		const isChecked = this.checked;

		checkList.checkListData.forEach(item => {
			item.cnstrtnYn = isChecked ? 'Y' : 'N';
			const checkbox = document.getElementById(`cnstrtnYnCheckbox-${item.chklstId}`);
			if (checkbox) {
				checkbox.checked = isChecked;
			}
		});
	});
</script>
{% endblock footer_script %}