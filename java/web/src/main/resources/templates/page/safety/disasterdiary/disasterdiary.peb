{% extends 'layout/base_content' %}
{% block head %}
{% endblock %}
{% block content %}
<!--*디자인 적용 new 시작*-->
<section class="contents_wrap g-row">
	<article class="conts_area">
		<div class="conts">
			<div class="conts_grid" style="margin-top: 10px;">
				<!-- S: search wrap ---------------------------------------------- -->
				<div class="search_wrap">
					<span class="selectbox">
						<select id="searchType">
							<option value="" selected>구분</option>
							<option value="disas_cause">재해원인</option>
							<option value="disas_action">재해조치</option>
						</select>
					</span>
					<!-- searchbox -->
					<div class="searchbox_wrap" style="width: 300px;">
						<input type="text" id="searchInput" placeholder="재해원인, 재해조치">
						<button type="submit" class="icon_btn search">
							<i class="ic ic-search"></i>
							<span class="blind">검색</span>
						</button>
					</div>
				</div>

				<div class="toolbar" style="">
					<!-- <select name="items-per-page" id="items-per-page" onchange="page.changePerPage()"> -->

				</div>
				<!-- 버튼 영역 -->
				<div class="toolbar">
					<div class="btn_area s_default _outline">
                        {{ btnHtml | raw }}
                        <!--<button type="button" class="btn" onclick="goLink('del', 0)">삭제</button>-->
                        <!--<button type="button" class="btn" onclick="goLink('edit', 0)">수정 </button>-->
                        <!--<button type="button" class="btn _fill" onclick="goLink('add', 0)">추가</button>-->
					</div>
                    <span class="selectbox" style="margin-left: inherit; width: inherit;">
                        <select name="items-per-page" id="items-per-page">
                            <option disabled value="">{{ message('item.com.004') }}</option>
                            <option selected value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </span>
				</div>
				<div class="grid" id="disasterDiaryGrid"></div>
			</div>
		</div>
	</article>
</section>

{% endblock content %}

{% block footer_script %}
<style>
	.search_group {
		border: solid 1px #EAEAEA;
		border-radius: 10px;
		padding: 15px;
	}
	.search_row {
		display: flex;
		gap: 16px; /* 항목 간 간격 */
		align-items: center;
		justify-content: space-between; /* 아이템 사이 동일 간격 */
		padding-bottom: 10px;
	}

	.search_col {
		flex: 1;                /* 모든 항목 동일 너비로 */
		display: flex;
		align-items: center;
		gap: 8px;
		min-width: 0;           /* 줄어들 수 있게 설정 */
	}

	.search_label {
		white-space: nowrap;
		font-weight: 500;
		width: 80px;
	}

	.search_data {
		flex: 1;                /* 나머지 공간 차지 */
		display: flex;
		align-items: center;
		gap: 4px;
	}
	.search_btn_wrap {
		display: flex;
		gap: 8px;
		justify-content: center; /* 우측 정렬 */
		margin-top: 12px;
	}
</style>
<script>
	/************************************************************
	 * 페이지 글로벌 변수
	 ***********************************************************/

	const urlParams = new URLSearchParams(window.location.search);
	const bodyHeight = window.innerHeight - 460;

	const BASEPATH = '/api/safety/disaster-diary';
	var requestData = {};

	var pjtNo = urlParams.get('pjtNo');
	var cntrctNo = urlParams.get('cntrctNo');
	var isDelAuth = "{{ isDelAuth }}" === 'Y'; 	// 삭제 권한 여부
	{#var isAddAuth = "{{ isAddAuth }}";#}

	let user;

	/************************************************************
	 * 페이지 사용 함수
	 ***********************************************************/

	var page = {
		// 1. 페이지 로드 -> 초기화
		init() {

			// 1-1. 초기화 -> 계약변경 설정
			gaiaCommon.makeCntrctSelectBox(
					".contents_wrap .conts",
					() => {
						$(".btn_area").hide();
						page.changeCntrctList(cntrctNo);
					},
					(cntrctNo) => {
						page.changeCntrctList(cntrctNo);
					},
					(cntrctNo) => {
						page.changeCntrctList(cntrctNo);
					}
			);

			// 'items-per-page' 셀렉트박스 변경 이벤트 리스너 추가
			$('#items-per-page').on('change', (event) => {
				const newPerPage = parseInt(event.target.value, 10);
				if (grid.disasterDiaryGrid) {
                    grid.disasterDiaryGrid.setPerPage(newPerPage); // 그리드의 perPage 설정 업데이트
				}
			});

		},

		// 계약 별 재해일지 조회 (Admin / gaia)
		changeCntrctList(selectCntrctNo){
			let params = {
				pjtNo: pjtNo,
				cntrctNo: selectCntrctNo,
				searchText: ''
			}
			selectedCntrctNo = selectCntrctNo;
			cntrctNo = selectCntrctNo;

			const searchData = gaia.getSearchData();
			if (searchData && Object.keys(searchData).length !== 0) {
                searchData.searchText = searchData.searchInput;
				grid.init(searchData);

				Object.entries(searchData).forEach(([key, value]) => {
					$(`#${key}`).val(value);
				});
			}else{
				grid.init(params);
			}
		},

		// 검색 조건 유지, session 저장
		updateRequestData: function () {
			requestData.searchType = $('select[id="searchType"]').val();
			requestData.searchInput = $("#searchInput").val();
			gaia.setSearchData(requestData);
		},

		//알림창 기능
		customAlert: function (msg) {
			$('.pop_box.toast').show();
			$('.toast_msg').text(msg);
			$('.pop_box.toast').addClass('on');

			// 일정 시간 후에 'on' 클래스 제거
			setTimeout(function() {
				$('.pop_box.toast').removeClass('on');
				$('.pop_box.toast').hide();
			}, 1500); // 1500ms = 1.5초
		},

	};

    var grid = {
        disasterDiaryGrid : null,
        gridTrashRenederer:{
            type:window.IconRenderer,
            options:[
                {
                    // auth가 없으면 무조건 렌더링
                    // auth:true,
                    //type만 넘길시(특히 체크박스) 렌더링만 수행
                    type:'checkBox'
                },
                {
                    auth: isDelAuth,  //렌더링 권한
                    type:'trash',   //종류(아래 예시들 참고)
                    url: '/api/safety/disaster-diary/delete', //통신이 필요한 경우 url
                    idFields:'disas_id,cntrct_no',   //통신에 넘겨줄 데이터 컬럼
                    keyName: 'disasterDiaryDeleteParam',  //백엔드에서 받을 파라미터 명
                    msgList: {
                        confirmTit: "재해일지 삭제",
                        confirmSubTit: "재해일지 삭제",
                        confirmMsg:"삭제하시겠습니까?",
                        completeMsg: "삭제가 완료되었습니다."
                    },
                    //사전 조건 검사 함수
                    condition:function(rowData){
                        //아래는 예시 코드입니다
                        console.log("ROWDATA :", rowData);
                        return true;
                    },
                    //통신 성공시 수행할 함수
                    success:function(rowData) {
                        //사후처리를 위한 rowData 반환 후 콜백
                        console.log("재해일지 삭제 완료.\nROWDATA :",rowData)

                        if(grid.disasterDiaryGrid.getData().length > 0){
                            grid.disasterDiaryGrid.reloadData();
                        }
                        else{
                            window.location.reload();
                        }

                    },
                    //통신 실패시 수행할 함수
                    fail:function(rowData){
                        //사후처리를 위한 rowData 반환 후 콜백
                        console.error("재해일지 삭제 실패.\nROWDATA :",rowData)
                    },
                    //통신 완료시 수행할 함수
                    complete:function(rowData){
                        //사후처리를 위한 rowData 반환 후 콜백
                        console.log("여기는 ajax 통신 완료.\nROWDATA :",rowData)
                    }
                },
            ]
        },

		gridColumns: [
			{
				header: '재해 일자',
                name: 'disas_dt',
                align: 'center',
                resizable: true,
                width: 130,
                renderer: {
                    type: window.IconRenderer,
                    options: [
						{
							//새창, 상세 조회 시 필요한 값 설정
							type:'newWindow',
							isHover:true,
							align:"right",
							absolute:true,
							open:{
								url:`/safety/disaster-diary/detail?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&disasId={id}`, //상세조회 url,
							},
							idField: 'disas_id', //조회에 필요한 id
                    	}
					]
                }
			},
			{ header: '재해 원인', name: 'disas_cause', resizable: true, align: 'left', minWidth: 120 },
			{ header: '재해 조치', name: 'disas_action', resizable: true, align: 'left', minWidth: 120, },
			{ header: '재해 인원 수', name: 'personnel_cnt', resizable: true, align: 'center', width: 120, },
			// { header: '수정자', name: 'chg_nm', resizable: true, align: 'center', width: 120, },
			{ header: '수정일시', name: 'chg_dt', resizable: true, align: 'center', width: 150, },
			{ name: 'disas_id', hidden: true },
			{ name: 'cntrct_no', hidden: true },

		],
        init: function (params) {
            let _this = this;

            let bodyHeight;
            if (gaiaCommon.me.isAdmin() || isGAIA()) {
                bodyHeight = window.innerHeight - 500;
            } else if (isCAIROS()) {
                bodyHeight = window.innerHeight - 420;
            }

            if (this.disasterDiaryGrid) {
                this.disasterDiaryGrid.destroy(); // 기존 인스턴스 제거
                this.disasterDiaryGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: BASEPATH+'/list',
                    method: "POST",
                    initParams: params
                }
            });

            if (!this.disasterDiaryGrid) {
                this.disasterDiaryGrid = new tui.Grid({
                    el: document.getElementById('disasterDiaryGrid'),
                    data: dataSource,
                    bodyHeight: bodyHeight,
                    scrollX: false,
                    scrollY: true,
                    pageOptions: {
                        perPage: parseInt($('select[id="items-per-page"]').val(), 10)
                    },
                    contextMenu: null,
                    rowHeaders: [
                        {
                            type: "checkbox",
                            header: `<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />`,
                            width: 70,
                            renderer: grid.gridTrashRenederer
                        },
                    ],
                    columns: this.gridColumns
                });
            }
            this.disasterDiaryGrid.on('click', function (e) {
                const rowKey = e.rowKey;
                if (e.columnName == "_checked") {   // 체크박스 클릭 시 체크 상태 확인
                    if(e.nativeEvent.target.className == "checkGroup"){
                        let temp = grid.disasterDiaryGrid.getRow(rowKey);
                        console.log(temp);
                        temp._attributes.checked = grid.disasterDiaryGrid.getRow(rowKey)._attributes.checked ? false : true;
                        grid.disasterDiaryGrid.setRow(rowKey, temp);
                    }
                }
            })
            this.disasterDiaryGrid.on("errorResponse", function (ev) {
                const statusCode = ev.xhr.status;

                if (statusCode === 403) {
                    gaiaCommon.customAlert(SESSION_EXPIRED_MSG, () => { location.reload(); });
                } else {
                    console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                }
            });

            refreshGrid(this.disasterDiaryGrid);
        },
	}

    var disasterDiary = {
        // 재해일지 삭제
        delete : function (){
            const url = BASEPATH + "/delete/list";
            let disasIdList = [];

            grid.disasterDiaryGrid.getData().forEach(function(v){
                if(v._attributes.checked){
                    disasIdList.push(v.disas_id);
                }
            });

            if(disasIdList.length > 0){
                console.log("삭제할 ids : ",disasIdList);
                let cntrctNoVal = $("#cntrctNo option:selected").val() || cntrctNo;

                const reqParams = {
                    deletedDisasIdList : disasIdList,
                    cntrctNo : cntrctNoVal
                }
                gaiaCommon.customConfirm("재해일지 삭제", "재해일지 삭제", "삭제하시겠습니까?", function(){
                    gaiaCommon.post(
                        url,
                        reqParams,
                        function (result) {
                            gaiaCommon.customAlert("{{ message('msg.006') }}"); // 삭제되었습니다.
                            if(grid.disasterDiaryGrid.getData().length > 0){
                                grid.disasterDiaryGrid.reloadData();
                            }
                            else{
                                window.location.reload();
                            }
                        },
                        function(error){
                            gaiaCommon.customAlert("삭제에 실패하였습니다."); // 삭제에 실패하였습니다.
                            console.error(error);
                        }
                    );
                });
            }
            else{
                gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', "{{ message('btn.002') }}"));
                return false;
            }

        }
    }



	/************************************************************
	 * 페이지 이벤트 바인딩
	 ***********************************************************/

	// 검색
	$('.icon_btn.search').on('click', function () {
		const searchValue = $('#searchInput').val();
        const searchType = $('select[id="searchType"]').val();
		let searchParams = {
			pjtNo: pjtNo,
			cntrctNo: cntrctNo,
			searchText: searchValue,
            searchType: searchType
		}
		grid.init(searchParams)
		page.updateRequestData();
	});

	// 엔터키 검색
	$(document).ready(function () {
		$('#searchInput').on('keypress', function (event) {
			if (event.which === 13) {
				const searchValue = $('#searchInput').val();
                const searchType = $('select[id="searchType"]').val();
				let searchParams = {
					pjtNo: pjtNo,
					cntrctNo: cntrctNo,
					searchText: searchValue,
                    searchType: searchType
				}
				grid.init(searchParams)
				page.updateRequestData();
			}
		});
	});

    // 페이지 이동
	function goLink(type, disasId) {
		let cntrctNoVal = $("#cntrctNo option:selected").val() || cntrctNo;

		if (type == "del") {
			disasterDiary.delete();
		}

		if (type == "edit") {

            if ($('input:checkbox[name=item-check]:checked').length < 1) {
                gaiaCommon.customAlert("{{ message('msg.035') }}".replace('{0}', "{{ message('btn.003') }}"));
                return false;
            }
            if ($('input:checkbox[name=item-check]:checked').length > 1) {
                gaiaCommon.customAlert("{{ message('msg.036') }}".replace('{0}', "{{ message('btn.003') }}"));
                return false;
            }

            const rowKey = $('input:checkbox[name=item-check]:checked').data("rowkey");
            const disasId = grid.disasterDiaryGrid.getRow(rowKey).disas_id;

            window.location.href = `/safety/disaster-diary/update?cntrctNo=${cntrctNoVal}&pjtNo=${pjtInfo.pjtNo}&disasId=${disasId}`;
		}
		if (type == "add") {
			window.location.href = `/safety/disaster-diary/create?cntrctNo=${cntrctNoVal}&pjtNo=${pjtInfo.pjtNo}`;
		}
	}

	/************************************************************
	 * 페이지 로드
	 ***********************************************************/
	$(document).ready(function() {
		gaia.create({
			$init: function ($params) {
				gaiaPortal.navMenuInit('M10_DSD', '재해일지');
				page.init();
			}
		});


		$('.pop_box.toast').hide();
		// 창닫기 버튼 클릭 시 알림창 숨김 처리
		$('.pop_close').click(function() {
			$('.pop_box.toast').removeClass('on');
			$('.pop_box.toast').hide();
		});
	});


</script>

{% endblock footer_script %}