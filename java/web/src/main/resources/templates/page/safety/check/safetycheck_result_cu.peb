{% extends 'layout/base_content' %}
{% block content %}
<section class="contents_wrap g-row">
	<article class="conts g-row">
		<div class="group">
			<div class="conts_form">
				<div class="btn_area s_default _outline">
					<button type="button" class="btn save-btn" id="addButton" onclick="page.saveResult()">{{
						message('btn.006') }}</button> <!-- 저장 -->
					<button type="button" class="btn" id="deleteButton" onclick="page.closePage()">{{
						message('btn.007')}}</button> <!-- 닫기 -->
				</div>
				<div class="s_conts" id="formBox">
					<span class="tree_route">{{ message('item.construction.012') }}</span>
					<div class="form_box" id="quality-form">
						<!-- row -->
						<div class="row cols">
							<div class="col">
								<div class="form_label">{{ message('item.safety.009') }}</div>
								<div class="form_data">
									<input type="text" name="ispDocNo" class="maxlength" maxlength="100">
								</div>
							</div>
							<div class="col">
								<div class="form_label">{{ message('item.safety.002') }}</div>
								<div class="form_data">
									<span id="ispDt"></span>
								</div>
							</div>
						</div>

						<!-- row -->
						<div class="row cols">
							<div class="col">
								<div class="form_label">{{ message('item.doc.003') }}</div>
								<div class="form_data">
									<input type="text" name="title" class="maxlength" maxlength="200">
								</div>
							</div>
							<div class="col">
								<div class="form_label">공종</div>
								<div class="form_data" style="justify-content: space-between;">
									<span id="cnsttyNm">
									</span>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="group">
			<div class="s_conts">
				<span class="tree_route">{{ message('item.safety.011') }}</span>
				<table class="table ta_c" id="inspectionListTable">
					<colgroup>
						<col width="100px">
						<col>
						<col>
						<col>
						<col>
						<col>
					</colgroup>
					<thead id="inspectionListHead">
					</thead>
					<tbody id="inspectionListBody">
					</tbody>
				</table>
			</div>
		</div>
		<div class="group">
			<div class="s_conts">
				<span class="tree_route">{{ message("item.quality.024") }}</span>


				<!-- S: Slick Slider -->
				<div class="process_photo">
					<div class="quality_photo_list" id="qualityPhotoList">
					</div>

					<div class="slick_nav">
						<div class="btn_area">
							<div class="btn_group _outline">
								<button type="button" class="btn icon_btn" onclick="page.addPhoto()">
									<i class="ic ic-picture-one"></i>
									<span class="blind">추가</span>
								</button>
								<button type="button" class="btn icon_btn" onclick="photo.delPhoto()">
									<i class="ic ic-delete"></i>
									<span class="blind">삭제</span>
								</button>
							</div>

							<div class="btn_group _outline slick_indigator">
								<button type="button" class="btn icon_btn prev">
									<span class="blind">이전</span>
								</button>
								<button type="button" class="btn icon_btn next">
									<span class="blind">다음</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="popup" class="popup_overlay modal_base" style="display: none;">
			<!-- 팝업 내용 -->
		</div>
	</article>
</section>
{% endblock content %}
{% block footer_script %}
<style>
	#formBox {
		margin-top: 1em;
	}

	textarea {
		width: 100%;
		height: 40px;
		overflow-y: auto;
		padding: 5px;
		box-sizing: border-box;
		min-height: 20px;
	}

	textarea:focus {
		overflow-y: auto;
	}
</style>
<script>
	var pjtNo;
	var urlParams = new URLSearchParams(location.search);
	var cntrctNo = urlParams.get('cntrctNo')
	var inspectionNo = urlParams.get('inspectionNo');
	var mode = 'create'

	var MaxIspLstId = 0;
	// returnType: 전자결재가 아닌 목록화면에서 이동했을 시 다시 목록화면으로
	const returnType = urlParams.get('returnType');

	$(function () {
		gaia.create({
			$init: function ($params) {
				console.log('$params', $params, gaiaCommon.me.info);

				page.init();
			}
		});
	});

	var page = {
		init: function () {
			pjtNo = pjtInfo.pjtNo;

			$(function () {
				page.getSafety();
			});

			// Slick slide
			$('.quality_photo_list').not('.slick-initialized').slick({
				arrows: true,
				prevArrow: $('.process_photo .prev'),
				nextArrow: $('.process_photo .next'),
				dots: true,
				infinite: false,
				slidesToShow: 4,
				slidesToScroll: 4,
				autoplay: false,
				speed: 1000,
				draggable: true
			});

			$("#formBox").addClass("readonly");

		},
		getSafety: function () {
			gaiaCommon.get("/api/safetymgmt/check/get/safety/" + cntrctNo + "/" + inspectionNo, {}, function (result) {
				console.log(result);

				let safetyData = result.details.safety;
				let safetyListData = result.details.safetyList;
				MaxIspLstId = result.details.maxIspLstId;
				let photoList = result.details.photoList;
				let photoAttachments = result.details.photoAttachments;

				$('input[name="ispDocNo"]').val(gaiaCommon.decodeSafeText(safetyData.ispDocNo));  // 점검번호
				if (safetyData.ispDt) {	// 점검일
					const dt = safetyData.ispDt.split(' ')[0];
					$('#ispDt').text(dt);
				} else {
					$('#ispDt').text('');
				}
				$('input[name="title"]').val(gaiaCommon.decodeSafeText(safetyData.title));  // 제목

				$('#cnsttyNm').text(gaiaCommon.decodeSafeText(safetyData.cnsttyNm + " / " + safetyData.cnsttyNm1 + " / " + safetyData.upCnsttyNm2 + " / " + safetyData.cnsttyNm2));	// 공종

				setTimeout(() => {
					safetyListData.forEach(item => {
						$(`textarea[name="imprvReq_${item.ispLstId}"]`).val(gaiaCommon.decodeSafeText(item.imprvReq));
					});
				}, 100);

				mode = safetyData.rsltYn === 'Y' ? 'update' : 'create';

				let title = mode === 'update' ? '{{ message("item.safety.018") }}' : '{{ message("item.safety.019") }}';
				gaiaPortal.navMenuInit('M1001', title);
				$("#menuDepth").append(`<li class=\"breadcrumb_item\" id=\"depth_txt\">${title}</li>`);

				// 안전점검 항목
				inspectionList.inspectionListData = safetyListData.map(item => ({
					ispLstId: item.ispLstId,
					ispLstNo: item.ispLstNo,
					cnsttyNm: item.cnsttyNm,
					ispLstDscrpt: gaiaCommon.decodeSafeText(item.ispDscrpt),
					gdFltyYn: item.gdFltyYn,
					imprvReq: item.imprvReq,
				}));

				// 사진 데이터 처리
				if (photoList && photoList.length > 0) {
					photoList.forEach(function (photoData) {
						let attachedFile = photoAttachments.find(function (file) {
							return file.fileNo === photoData.atchFileNo && file.sno === photoData.phtSno;
						});

						if (attachedFile) {
							photoData.fileDiskPath = attachedFile.fileDiskPath;
							photoData.fileDiskNm = attachedFile.fileDiskNm;
							photoData.sno = attachedFile.sno;
						}
					});
					photo.init(photoList);
				}

				// inspectionListData를 화면에 렌더링
				inspectionList.addInspectionList();
			})
		},
		closePage: function () {
			window.location.href = `/safetymgmt/check?cntrctNo=${pjtInfo.cntrctNo}&pjtNo=${pjtInfo.pjtNo}&returnCntrctNo=${cntrctNo}&_condition=init`;
		},
		saveResult: function () {
			let param;
			let url;
			let message;

			param = {
				cntrctNo: cntrctNo,
				inspectionNo: inspectionNo,

				safetyLists: inspectionList.inspectionListData.map((item, index) => {
					const selectedRadio = document.querySelector(`input[name="gdFltyYn_${index}"]:checked`);
					const gdFltyYnValue = selectedRadio ? selectedRadio.value : null;

					const improveTextarea = document.querySelectorAll('.chklst-dscrpt textarea')[index];
					const imprvReqValue = improveTextarea ? improveTextarea.value.trim() : "";

					return {
						ispLstId: item.ispLstId,
						gdFltyYn: gdFltyYnValue,
						imprvReq: imprvReqValue,
					};
				}),

				photos: photo.photoArr.map(photo => {
					let shotDate = '';
					if (Array.isArray(photo.shotDate)) {
						const [year, month, day] = photo.shotDate;
						shotDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
					} else if (typeof photo.shotDate === 'string') {
						shotDate = photo.shotDate.split('T')[0];
					}

					return {
						titlNm: photo.titlNm,
						dscrpt: photo.dscrpt,
						shotDate: shotDate,
						phtSno: photo.phtSno
					};
				}),
				deleteSno: photo.deleteSno,
				deletePhtSno: photo.deletePhtSno
			}
			const invalidEntry = param.safetyLists.some(item => item.gdFltyYn === null);

			if (invalidEntry) {
				gaiaCommon.customAlert('{{ message("msg.safety.010") }}');
				return;
			}

			const formData = new FormData();
			formData.append('result', new Blob([JSON.stringify(param)], { type: 'application/json' }));

			photo.photoArr.forEach(photo => {
				const file = photo.file;
				if (file) {
					formData.append('photos', file);
				}
			});

			if (mode === 'create') {
				url = '/api/safetymgmt/check/create/result'
				message = '{{ message("msg.044") }}'	// 저장되었습니다
			}
			if (mode === 'update') {
				url = '/api/safetymgmt/check/update/result'
				message = '{{ message("msg.007") }}'	// 수정되었습니다
			}

			gaiaCommon.LoadingOverlay('body', true);
			$.ajax({
				url: url,
				method: "POST",
				processData: false,
				contentType: false,
				data: formData,
				success: function (response) {
					if (response.ok) {
						gaiaCommon.customAlert(message, function () {
							gaiaCommon.LoadingOverlay('body', false);
							window.location.replace(`/safetymgmt/check?pjtNo=${pjtInfo.pjtNo}&cntrctNo=${cntrctNo}`);
						});
					}
				},
				error: function (xhr, status, error) {
					gaiaCommon.LoadingOverlay('body', false);
					gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
				},
			});
		},
		addPhoto: function () {
			gaiaCommon.checkAuth("SAF_RES_C_01", () => {
				$("#popup").load("/safetymgmt/photo/modal", function () {
					$("#popup").css({ "display": "flex" });
				});
			});
		}
	}

	let inspectionList = {
		inspectionListData: [],
		addInspectionList: function () {
			const thead = document.getElementById('inspectionListHead');
			const tbody = document.getElementById('inspectionListBody');

			thead.innerHTML = `
				<tr>
					<th style="width: 5%;">{{ message('item.app.035') }}</th>
					<th style="width: 15%;">{{ message('item.progressstatus.010') }}</th>
					<th style="width: 45%;">{{ message('item.safety.017') }}</th>
					<th style="width: 10%;">{{ message('item.safety.012') }}</th>
					<th style="width: 25%;">{{ message('item.safety.013') }}</th>
				</tr>
			`;
			tbody.innerHTML = '';

			if (this.inspectionListData.length === 0) {
				$('#inspectionListBody').hide();
			} else {
				$('#inspectionListBody').show();
			}

			this.inspectionListData.sort((a, b) => a.ispLstNo - b.ispLstNo).forEach((item, index) => {
				const row = document.createElement('tr');

				// 번호
				const numCell = document.createElement('td');
				numCell.textContent = index + 1;
				row.appendChild(numCell);

				// 공종
				const cnsttyCell = document.createElement('td');
				cnsttyCell.classList.add('cnstty-nm');
				cnsttyCell.textContent = item.cnsttyNm;
				cnsttyCell.style.textAlign = 'center';
				row.appendChild(cnsttyCell);

				// 점검내용
				const itemCell = document.createElement('td');
				itemCell.classList.add('lst-dscrpt');
				itemCell.textContent = item.ispLstDscrpt;
				itemCell.style.textAlign = 'left';
				itemCell.style.whiteSpace = 'pre-line'; // 줄바꿈 반영
				row.appendChild(itemCell);

				// 양호/불량
				const checkCell = document.createElement('td');
				checkCell.classList.add('chklst-dscrpt');
				checkCell.style.textAlign = 'center';

				const radioGroup = document.createElement('div');
				radioGroup.classList.add('item_group');
				radioGroup.setAttribute("role", "group");
				radioGroup.setAttribute("aria-label", "Basic radio group");

				const labelGood = document.createElement('label');
				labelGood.classList.add('form_check');
				labelGood.innerHTML = `
					<input type="radio" name="gdFltyYn_${index}" class="check_mark" value="0" ${item.gdFltyYn === 0 ? "checked" : ""} />
					<span class="check_label">양호</span>
				`;

				const labelBad = document.createElement('label');
				labelBad.classList.add('form_check');
				labelBad.innerHTML = `
					<input type="radio" name="gdFltyYn_${index}" class="check_mark" value="1" ${item.gdFltyYn === 1 ? "checked" : ""} />
					<span class="check_label">불량</span>
				`;

				radioGroup.appendChild(labelGood);
				radioGroup.appendChild(labelBad);
				checkCell.appendChild(radioGroup);
				row.appendChild(checkCell);

				// 개선요망사항
				const improveCell = document.createElement('td');
				improveCell.classList.add('chklst-dscrpt');
				const improveTextarea = document.createElement('textarea');
				improveTextarea.classList.add('form-control', 'maxlength');
				improveTextarea.setAttribute('name', `imprvReq_${item.ispLstId}`);
				improveTextarea.setAttribute('maxlength', '1000');
				improveTextarea.value = item.improveDscrpt || "";  // 기존 값이 있으면 표시
				improveCell.appendChild(improveTextarea);
				row.appendChild(improveCell);

				tbody.appendChild(row);
			});
			function loadScript(url, callback) {
				let script = document.createElement("script");
				script.type = "text/javascript";
				script.src = url;

				document.head.appendChild(script);
			}
			loadScript("/assets/js/validation.js", function () { });
		},
	}
	// 사진관련
	let photo = {
		photoArr: [],
		deleteSno: [],
		deletePhtSno: [],
		init: function (data) {
			console.log("data: ", data)
			data.sort((a, b) => a.phtSno - b.phtSno);	// 사진순번으로 정렬

			data.forEach((row) => {
				let formattedDate = '';
				if (Array.isArray(row.shotDate)) {
					const [year, month, day] = row.shotDate;
					formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
				} else if (typeof row.shotDate === 'string') {
					formattedDate = row.shotDate.split('T')[0]; // ISO 형식일 경우
				}

				let webPath = row.fileDiskPath;

				// 백슬래시 경로 처리 (윈도우)
				if (webPath.includes('\\')) {
					webPath = webPath.replace(/^.*\\upload/, '/upload').replace(/\\/g, '/');
				} else {
					// 슬래시 경로 처리 (리눅스)
					webPath = webPath.replace(/^.*\/upload/, '/upload');
				}

				const imgSrc = `${webPath}/${row.fileDiskNm}`;

				$(".quality_photo_list").slick('slickAdd',
					`<div>` +
					`<dl class="dl_box p_photo">` +
					`<dt class="item_dt">` +
					`<label class="form_check">` +
					`<input class="check_mark" type="checkbox" name="check" value="${row.phtSno}">` +
					`<span class="check_label">${row.titlNm}</span>` +
					`</label>` +
					`</dt>` +
					`<dd class="item_dd">` +
					`<figure class="p_photo_info">` +
					`<img src="${imgSrc}" alt="${row.fileNm}" style="height:200px;">` +
					`<figcaption>` +
					`<p class="tit">${row.titlNm}</p>` +
					`<p class="desc">${row.dscrpt}</p>` +
					`<p class="date">${formattedDate}</p>` +
					`<input type="hidden" id="phtSno" value="${row.phtSno}">` +
					`<input type="hidden" id="sno" value="${row.sno}">` +
					`</figcaption>` +
					`</figure>` +
					`</dd>` +
					`</dl>` +
					`</div>`
				);

				this.photoArr.push(row);
			});
		},
		// 사진 추가
		setPhoto: function (data) {
			this.photoArr.push(data);
			const seq = this.photoArr.length - 1;

			let imgSrc = data.base;
			if (imgSrc && !imgSrc.startsWith("data:")) {
				imgSrc = "data:image/jpeg;base64," + imgSrc;
			}

			$(".quality_photo_list").slick('slickAdd',
				`<div>` +
				`<dl class="dl_box p_photo">` +
				`<dt class="item_dt">` +
				`<label class="form_check">` +
				`<input class="check_mark" type="checkbox" name="check" value="` + seq + `">` +
				`<span class="check_label">` + data.titlNm + `</span>` +
				`</label>` +
				`</dt>` +
				`<dd class="item_dd">` +
				`<figure class="p_photo_info">` +
				`<img src="` + imgSrc + `" alt="품질검측사진" style="height:200px;">` +
				`<figcaption>` +
				`<p class="tit">` + data.titlNm + `</p>` +
				`<p class="desc">` + data.dscrpt + `</p>` +
				`<p class="date">` + data.shotDate + `</p>` +
				`</figcaption>` +
				`</figure>` +
				`</dd>` +
				`</dl>` +
				`</div>`
			);
		},
		// 사진 삭제
		delPhoto: function () {
			const checkedItems = $('input[name=check]:checked');
			if (checkedItems.length < 1) {
				gaiaCommon.customAlert('{{ message("msg.055") }}'); // 삭제할 항목을 선택해주세요.
				return;
			}

			let deleteIndices = [];

			checkedItems.each((index, checkbox) => {
				const $slide = $(checkbox).closest('.slick-slide');
				const slideIndex = $slide.data('slick-index'); // Slick이 관리하는 index
				deleteIndices.push(slideIndex);

				const photoData = this.photoArr[slideIndex];
				if (photoData?.sno) this.deleteSno.push(photoData.sno);
				if (photoData?.phtSno) this.deletePhtSno.push(photoData.phtSno);

				this.photoArr[slideIndex] = null; // 나중에 filter로 제거
			});

			// 인덱스가 꼬이지 않도록 역순으로 제거
			deleteIndices.sort((a, b) => b - a).forEach(idx => {
				$(".quality_photo_list").slick('slickRemove', idx);
			});

			// 배열 정리
			this.photoArr = this.photoArr.filter(item => item !== null);

			this.reIndexSlides();
		},
		reIndexSlides: function () {
			this.photoArr.forEach((item, idx) => {
				$('.quality_photo_list .slick-slide').eq(idx).find('.check_mark').val(idx);
			});
		}
	}
</script>
{% endblock footer_script %}