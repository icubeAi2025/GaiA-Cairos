{% extends 'layout/base_content' %}
{% block content %}


<section class="contents_wrap">

	<article class="conts">
		<div class="group">
			<div class="conts_form">
				<h3 class="conts_tit" id="sNoTxt"></h3>
				<div class="search_wrap">
					<!-- searchbox -->
					<div class="searchbox_wrap">
						<input type="text" id="searchForm" placeholder="{{ message('msg.projectcost.006') }}">
						<button type="button" class="icon_btn search">
							<i class="ic ic-search"></i>
							<span class="blind"></span>
						</button>
					</div>
				</div>
				<div class="btn_area s_default">
					<button type="button" class="btn _outline" id="save">{{ message("btn.006") }}</button>
					<button type="button" class="btn _outline" id="history">{{ message('item.projectcost.061') }}</button>
					<button type="button" class="btn _outline" id="cancel">{{ message("btn.007") }}</button>
				</div>
			</div>
			<div class="conts_grid">
				<div class="toolbar">
				</div>
				<div class="grid" id="historyRecountDataGrid">
				</div>
			</div>
		</div>
	</article>
</section>

<input type="text" id="cntrct_chg_no_first" hidden/>
<input type="text" id="chg_no" hidden/>
<input type="text" id="cnsttySn_arr" hidden/>
{% endblock content %}
{% block footer_script %}
<script src="/assets/js/projectcost/payment.js"></script>
<script src="/assets/js/grid.js"></script>
<script src="/assets/js/fetch_options_data.js"></script>
<script>
	//새창 아이콘 렌더러
	const newModalRenderer = window.NewModalRenderer;
	let SearchArr = new Array();
	let urlParams = new URLSearchParams(location.search);
	let cntrctNo = urlParams.get('cntrctNo');
	let sno = urlParams.get('sNo');
	let id = urlParams.get('id');
	let dt = urlParams.get('dt');
	let tmnum = urlParams.get('tmnum');
	let chgData = [];
	let nowData = [];
	let editing = false;
	let chkNew = false;
	
	var init = function(){
		sessionStorage.setItem('pCntrctNo', cntrctNo);
	
		$("#cancel").click(function(){
			window.history.back();
		});
		$("#save").click(function(){
			history.save();
		});

		$("#history").click(function(){
			history.getHistory();
		});
		
		history.init();
		
	};


	let history = {
		init: function (type) {
			gaiaCommon.LoadingOverlay('body', true);
			let _this = this;


			if(!this.historyRecountDataGrid){
				this.historyRecountDataGrid = new tui.Grid({
					el: document.getElementById('historyRecountDataGrid'),
					//selectionUnit: 'row',
					scrollX: false,
					scrollY: true,
					contextMenu: null,
					//bodyHeight: 'auto',
					//bodyHeight: 'fitToParent',
					bodyHeight: 550,
					header: {
						height: 80,
						complexColumns: [
							{
								header: '{{ message("item.projectcost.065") }}',
								name: 'thtm',
								childNames: ['thtm_tot_qty', 'cntrct_uprc', 'thtm_tot_cost'],
							},
						],
					},
					columns : [
						{header: '{{ message("item.projectcost.001") }}', name: 'rsce_cd', resizable: true, width: 120, align: 'center'},
						{header: '{{ message("item.projectcost.002") }}', name: 'dtl_cnstty_nm', resizable: true, minWidth: 150},
						{header: '{{ message("item.projectcost.003") }}', name: 'spec_nm', resizable: true, width: 100},
						{header: '{{ message("item.projectcost.004") }}', name: 'unit', width: 50, align:'center'},
						{header: '{{ message("item.projectcost.062") }}', name: 'cntrct_qty', width: 100, align:'center', formatter: numberFormat},
						{header: '{{ message("item.projectcost.063") }}', name: 'prev_qty', width: 100, align:'center'},
						{header: '{{ message("item.projectcost.064") }}', name: 'thtm_acom_qty', width: 100, align:'center', formatter: numberFormat,
				            editor: {
				            	type: CustomQtyTextEditor
				            }
						},						
						{header: '{{ message("item.projectcost.005") }}', name: 'thtm_tot_qty', width: 100, align:'center', formatter: numberFormat},
						{header: '{{ message("item.projectcost.006") }}', name: 'cntrct_uprc', width: 100, align:'right',
							formatter: (row, column, value) => {
							    return numberFormat(row, 'cvt');
							}
						},
						{header: '{{ message("item.projectcost.007") }}', name: 'thtm_tot_cost', width: 100, align:'right',
							formatter: (row, column, value) => {
							    return numberFormat(row, 'cvt');
							}
						},
						{name: 'cntrct_no', hidden: true},
						{name: 'payprce_sno', hidden: true},
						{name: 'dtl_cnstty_sn', hidden: true},
					]
				});
			}


			$(document).on('mousedown', function(event) {
				if(editing){
					editing = false;
					//history.historyRecountDataGrid.finishEditing();
				}
			});
			
			let list = this.read();
			
			if (list) {
				this.historyRecountDataGrid.resetData(list);
			}
			
			
			/* 검색창 관련 함수 */
			const searchEl = $(".search");
			const searchInputEl = searchEl.find("input");

			searchEl.click(function () {
				let arr = new Array();
				arr = $("#cnsttySn_arr").val().split(",");
				history.init(arr);
			});

			//엔터 검색
			$("#searchForm").on("keyup",function(key){
				if(key.keyCode==13) {
					let arr = new Array();
					arr = $("#cnsttySn_arr").val().split(",");
					history.init(arr);
				}
			});

		},
		read: function() {
			let _this = this;
		    let data;
			let root;

			var param = {
				cntrctNo: cntrctNo
				, payprceSno: sno
				, cntrctChgId: id
				, searchText: $("#searchForm").val()
			};
			//let newArr = new array();
			var newArr = {};
			
			$.ajax({
				url: BASEPATH+'payment/payment-history-recount-list',
				method: 'POST',
				dataType: 'json',
				contentType: 'application/json; charset-utf-8',
				data: JSON.stringify(param),
				async: false,
				success: function(response){
					data = response.details.paymentHistoryRecountList;
					
					//_this.historyRecountDataGrid.resetData(data);
				},
				error: function(response) {
					// console.log(response);
				}
			});
			gaiaCommon.LoadingOverlay('body', false);
			
		  	return data;
		},
		getHistory: function() {
			gaiaCommon.LoadingOverlay('body', true);
			let _this = this;
		    let data;
			let root;
			
			let dtTxt = dt + "01";
			dtTxt = dateFormat(dtTxt, "g");
			
			let dtDate = new Date(dtTxt);
			dtDate.setMonth(dtDate.getMonth() - 1);

			let year = dtDate.getFullYear();
			let month = (dtDate.getMonth() + 1).toString().padStart(2, '0');
			
			var param = {
				cntrctNo: cntrctNo
				, payprceSno: sno
				, cntrctChgId: id
				, dailyReportDate: dateFormat(dt, "g")
				, payprceYm: year + month
			};
			//let newArr = new array();
			var newArr = {};
			
			$.ajax({
				url: BASEPATH+'payment/payment-history-new-list',
				method: 'POST',
				dataType: 'json',
				contentType: 'application/json; charset-utf-8',
				data: JSON.stringify(param),
				async: false,
				success: function(response){
					data = response.details.paymentHistoryNewList;
					history.historyRecountDataGrid.resetData(data);
					chkNew = true;
				},
				error: function(response) {
					// console.log(response);
				}
			});
			gaiaCommon.LoadingOverlay('body', false);
			
		},
		save: function(){
			let saveData = this.historyRecountDataGrid.getModifiedRows().updatedRows;
			
			if(chkNew){ 
				saveData = this.historyRecountDataGrid.getData();
			}

			const reg = /<[^>]*>?/g;
			
			const formData = saveData.map(item => {
				let thtm_acom_qty = typeof(item.thtm_acom_qty) == "string" ? item.thtm_acom_qty.replace(reg, "") : item.thtm_acom_qty;
				return(
					{...item, thtmAcomQty: thtm_acom_qty
						    , cntrctNo: item.cntrct_no
							, payprceSno: item.payprce_sno
							, dtlCnsttySn: item.dtl_cnstty_sn
							, rsceTpCd: item.rsce_tp_cd
							, rsceCd: item.rsce_cd
							, dtlCnsttyNm: item.dtl_cnstty_nm
							, thtmAcomAmt: item.thtm_acom_amt
							, prevAcmtlQty: item.prev_acmtl_qty
							, prevAcmtlAmt: item.prev_acmtl_amt
							, dltYn: 'N'}
				);
			})


			gaiaPortal.customConfirm("{{ message('item.com.005') }}", "{{ message('msg.037') }}".replace('{0}', "{{ message('btn.006') }}"), "", function(){
				const data = {};
				data['paymentRecountList'] = formData;
				$.ajax({
					url: BASEPATH + 'payment/update-recount-payment',
				    method: 'POST',
				    contentType: 'application/json',
				    data: JSON.stringify(data),
				    success(result) {
						gaiaCommon.customAlert("{{ message('msg.034') }}", function(){
						    location.reload();
						});
				    }
				});
			});
		}
		
	}
	class CustomQtyTextEditor {
		constructor(props) {
			const el = document.createElement('input');
			el.type = 'text';
			el.value = String(props.value);
			this.el = el;
			
			const oriVal = String(props.value);
			this.el.oriVal = oriVal;
			//nowData.push(props);
			editing = true;
	    }

	    getElement() {
			return this.el;
	    }

	    getValue() {
			var regex = /^[^0-9]|[^\d.]/g;
			var result = this.el.value.replace(regex, "");
			
			
			if(!Number.isInteger(Number(result))){
				result = Number(result).toFixed(2);
			}
			
			if(this.el.oriVal == Number(result)){
				//nowData.pop();
				return Number(result);
			}else{
				//chgData.push();
				return '<b>' + Number(result) + '</b>';
			}
	    }

	    mounted() {
	      	this.el.select();
		}
		
	}
	
	$(function(){
		gaia.create({
			$init: function ($params) {
				gaiaPortal.navMenuInit('M0302', '{{ message("item.projectcost.051") }}');
				$("#menuDepth").append('<li class=\"breadcrumb_item\" id=\"depth_txt\">{{ message("item.projectcost.050") }}</li>');
				$("#menuDepth").append('<li class=\"breadcrumb_item\" id=\"depth_txt\">{{ message("item.projectcost.051") }}</li>');
			
				$("#sNoTxt").text("* {{ message('item.projectcost.059') }} : " + "{{ message('item.projectcost.060') }}".replace('{0}', tmnum) + " (" + dateFormat(dt, "g") + ")");
				init();
                
                gaia.loaded = true;
            }
        });
    })



</script>
<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>
{% endblock footer_script %}