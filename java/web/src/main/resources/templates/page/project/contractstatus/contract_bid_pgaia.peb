{% extends 'layout/base_popup' %}
{% block content %}
<section class="contents_wrap g-row">

	<article class="conts g-row" >
		<div class="group">
			<div class="conts_form">
				<div class="btn_area s_default _outline">
					<button type="button" class="btn" id="exportButton" style="display:none;">{{ message('btn.023')
						}}</button>
					<button type="button" class="btn" id="close">{{ message('btn.007') }}</button>
				</div>
			</div>
            <div class="conts_tab" id="container">
            </div>
			<!-- S: TAB ----------------------------------------------------------------------- -->
			<!-- TAB NAV -->
			<div class="conts_tab">
				<nav class="tab_nav">
					<ul class="tab_list tab_default">
						<li class="tab_item" data-id="tabs01">{{ message('item.projectcost.016') }}</li> <!--계약내역서-->
						<li class="tab_item" data-id="tabs02">{{ message('item.projectcost.017') }}</li> <!--원가계산서-->
					</ul>
				</nav>

				<!-- TAB Conts -->
				<div class="tab_conts_wrap">
					<div id="tabs01" class="tab_conts">
						<article class="conts g-row">
							<div class="conts_grid">
								<div class="toolbar">
									<div class="search_wrap">
										<div class="searchbox_wrap">
											<input type="text" id="searchInput"
												placeholder="{{ message('msg.contract.023') }}">
											<button type="button" class="icon_btn search">
												<i class="ic ic-search"></i>
												<span class="blind">{{ message("btn.014") }}</span> <!--검색-->
											</button>
										</div>
									</div>
								</div>
								<div class="summary put_txt _unit_won">
									<div class="row">
										<div class="col">
											<div class="summary-label">{{ message('item.projectcost.020') }}</div>
											<!--기준일자-->
											<div class="summary-data" id="contractDt"></div>
										</div>
										<div class="col">
											<div class="summary-label">{{ message('item.projectcost.022') }}</div>
											<!--직접비 합계금액-->
											<div class="summary-data" id="bidTotalCost"></div>
										</div>
									</div>
								</div>

								<div class="grid" id="contractBidGrid">
								</div>
							</div>

						</article>
					</div>

					<div id="tabs02" class="tab_conts">
						<article class="conts g-row">
							<div class="conts_grid">
								<div class="toolbar">
									<!-- <div class="btn_area s_default _outline">
										<button type="button" class="btn" id="reCal">{{ message('item.contract.038')
											}}</button> 원가 계산서 재계산
									</div> -->
								</div>
								<div class="summary put_txt _unit_won">
									<div class="row">
										<div class="col">
											<div class="summary-label">{{ message('item.projectcost.020') }}</div>
											<div class="summary-data" id="calcDt" style="padding: 10px;"></div>
										</div>
										<div class="col">
											<div class="summary-label">{{ message('item.projectcost.022') }}</div>
											<div class="summary-data" id="calcTotalCost"></div>
										</div>
									</div>
								</div>

								<div class="grid" id="calculatorGrid">
								</div>
							</div>
						</article>
					</div>
				</div>

			</div>
			<!-- //E: TAB ----------------------------------------------------------------------- -->
		</div>
	</article>

</section>
{% endblock content %}
{% block footer_script %}
<script src="/assets/js/grid.js"></script>
<script src="/assets/js/fetch_options_data.js"></script>
<script>
	const newModalRenderer = window.NewModalRenderer;
	var urlParams = new URLSearchParams(location.search);
	var initialCntrctNo = urlParams.get('cntrctNo')
	let pjtNo = urlParams.get('pjtNo');
	var list = [];

    $(function () {
        gaia.create({
            $init: function ($params) {
                console.log('$params', $params, gaiaCommon.me.info);
               
                init();
            }
        });
    });
	var init = function () {
		pjtNo = pjtInfo.pjtNo;

		// 페이지 로딩 시
		$(function () {
			var title = "{{ message('btn.050') }}"
			gaiaPortal.navMenuInit('M010201', title);
			$("#menuDepth").append(`<li class=\"breadcrumb_item\" id=\"depth_txt\">${title}</li>`);

			if (isGAIA() || gaiaCommon.me.info.admin) {
				loadContractList();
			} else if (isCAIROS()) {
				contractBidGrid.init();
				const cntrctNo = pjtInfo.cntrctNo;
                // 상단 프로젝트 선택 박스에서 가져온 계약으로 기준일자 찾기
                gaiaCommon.get( `/api/project/contractstatus/get/${cntrctNo}`,  { cntrctNo: cntrctNo }, function(data){
                    const cntrctDate = data.details.contract && data.details.contract.cntrctDate;
                    let formattedDate;
                    if (cntrctDate) {
                        formattedDate = `${cntrctDate.substring(0, 4)}-${cntrctDate.substring(4, 6)}-${cntrctDate.substring(6, 8)}`;
                    } else {
                        formattedDate = ''; // 또는 기본값을 설정 (예: 'N/A' 또는 '날짜 없음' 등)
                    }
                    $("#contractDt").text(formattedDate);
                    $("#calcDt").text(formattedDate);
                    contractBidGrid.get();
                })
			}


			var tabItem = $(".tab_item");
			var tabConts = $(".tab_conts");

			$(tabItem).eq(0).addClass('active');
			$(tabConts).eq(0).addClass('active');

			$("#exportButton").off("click").on("click", function () {
				contractBidGrid.exportToExcel();
			});

			$(tabItem).click(function (e) {
				$(tabItem).removeClass('active');
				$(tabConts).removeClass('active');

				if (e.target.dataset.id == "tabs01") {
					contractBidGrid.init();
					$("#searchInput").val("");
					$("#depth_txt").text("{{ message('item.projectcost.016') }}");
					$("#exportButton").off("click").on("click", function () {
						contractBidGrid.exportToExcel();
					});
				} else {
					calculatorGrid.init();
					$("#depth_txt").text("{{ message('item.projectcost.017') }}");
					$("#exportButton").off("click").on("click", function () {
						calculatorGrid.exportToExcel();
					});

				}

				$(this).addClass('active');
				$("#" + $(this).data('id')).addClass('active');
			});
		});

		// 계약코드 변경 시
		$(document).on("change", "#cntrctNo", function () {
			cntrctNo = $(this).val();
			const selectedContract = list.find(contract => contract.cntrct_no === cntrctNo);
			if (selectedContract) {
				const rawDate = selectedContract.cntrct_date;
				let formattedDate;
				if (rawDate) {
					formattedDate = `${rawDate.substring(0, 4)}-${rawDate.substring(4, 6)}-${rawDate.substring(6, 8)}`;
				} else {
					formattedDate = ''; // 또는 기본값을 설정 (예: 'N/A' 또는 '날짜 없음' 등)
				}
				$("#contractDt").text(formattedDate);
				$("#calcDt").text(formattedDate);
			} else {
				$("#contractDt").text("");
				$("#calcDt").text("");
			}
			if (contractBidGrid) {
				contractBidGrid.get();
			}
			if (calculatorGrid) {
				calculatorGrid.get();
			}
		});

		// 계약코드 리스트 가져오기
		function loadContractList() {
			var param = {
				pjtNo: pjtNo
			};
            gaiaCommon.makeCntrctSelectBox(
                    "#container",
                    () => {
                        $("#cntrctNo").append(
                                $("<option>")
                                        .val("")
                                        .text("")
                        );
                        $("#cntrctNo").val("").change();

                        if (typeof contractBidGrid !== 'undefined' && contractBidGrid.contractBidGrid) {
                            contractBidGrid.contractBidGrid.resetData([]);
                        }
                        if (typeof calculatorGrid !== 'undefined' && calculatorGrid.calculatorGrid) {
                            calculatorGrid.calculatorGrid.resetData([]);
                        }
                    },
                    () => {
                        contractBidGrid.init();
                        contractBidGrid.get();
                    },
                    () => {
                        contractBidGrid.init();
                        contractBidGrid.get();
                    }
            );
		}

		// 닫기 버튼
		$("#close").click(function () {
            window.close();
		});
		$("#depth_txt").text("{{ message('item.projectcost.016') }}");
	};

	let contractBidGrid = {
		init: function () {
			let _this = this;

			if (!this.contractBidGrid) {
				this.contractBidGrid = new tui.Grid({
					el: document.getElementById('contractBidGrid'),
					bodyHeight: 600,
					scrollX: false,
					scrollY: true,
					contextMenu: null,
					rowHeight: 10,
					treeColumnOptions: {
						name: "prdnm",
						useIcon: true,
						useCascadingCheckbox: true,
					},
					header: {
						height: 80,
						complexColumns: [
							{
								header: "{{ message('item.projectcost.012') }}", // 재료비
								name: 'mtrlTotal',
								childNames: ['mtrlcst_uprc', 'mtrlcst_amt']
							},
							{
								header: "{{ message('item.projectcost.013') }}", // 노무비
								name: 'lbrTotal',
								childNames: ['lbrcst_uprc', 'lbrcst_amt']
							},
							{
								header: "{{ message('item.projectcost.014') }}", // 경비
								name: 'gnrlexpnsTotal',
								childNames: ['gnrlexpns_uprc', 'gnrlexpns_amt']
							},
							{
								header: "{{ message('item.projectcost.009') }}", // 합계
								name: 'cntrctTotal',
								childNames: ['sum_uprc', 'sum_amt']
							},
						],
					},
					columns: [
						{
							header: "내역 순번", // 내역 순번
							name: 'cbs_sno', align: 'center', width: 70
						},
						{
							header: "세부 공종", // 세부 공종
							name: 'prdnm', resizable: true, minWidth: 330
						},
						{
							header: "{{ message('item.projectcost.003') }}", // 규격
							name: 'spec', resizable: true, width: 250
						},
						{
							header: "{{ message('item.projectcost.004') }}", // 단위
							name: 'unit', width: 50, align: 'center'
						},
						{
							header: "{{ message('item.projectcost.005') }}", // 수량
							name: 'qty', width: 60, align: 'center',
						},
						{
							header: "{{ message('item.projectcost.006') }}", // 재료비 단가
							name: 'mtrlcst_uprc', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.007') }}", // 재료비 금액
							name: 'mtrlcst_amt', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.006') }}", // 노무비 단가
							name: 'lbrcst_uprc', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.007') }}", // 노무비 금액
							name: 'lbrcst_amt', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.006') }}", // 경비 단가
							name: 'gnrlexpns_uprc', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.007') }}", // 경비 금액
							name: 'gnrlexpns_amt', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.006') }}", // 합계 단가
							name: 'sum_uprc', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{
							header: "{{ message('item.projectcost.007') }}", // 합계 금액
							name: 'sum_amt', align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}

						},
						{ header: "{{ message('item.com.022') }}", name: 'rmrk' }	//비고
					]
				})
			}
            this.contractBidGrid.on("errorResponse", function (ev) {
                // ev.xhr: XMLHttpRequest 객체를 참조
                const statusCode = ev.xhr.status;

                if (statusCode === 403) {
                    gaiaCommon.customAlert("로그인이 필요합니다. 로그인 페이지로 이동합니다.", function(){
                        location.reload();
                    });
                } else {
                    console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                }
            });
			// 검색
			$('.icon_btn.search').on('click', function () {
				const searchValue = $('#searchInput').val();
				let list = _this.get(searchValue);
				if (list) {
					_this.contractBidGrid.resetData(list);
				}
			});
			// 엔터키 검색
			$(document).ready(function () {
				$('#searchInput').on('keypress', function (event) {
					if (event.which === 13) {
						const searchValue = $('#searchInput').val();
						let list = _this.get(searchValue);
						if (list) {
							_this.contractBidGrid.resetData(list);
						}
					}
				});
			});

			let list = this.get();
			if (list) {
				this.contractBidGrid.resetData(list);
			}
		},
		get: function (searchValue = '') {
			if (!this.contractBidGrid) {
				return;
			}
			let _this = this;
			let data = [];
			let root = [];
			let cntrctNo = $("#cntrctNo option:selected").val() || initialCntrctNo; // 기본적으로 select 박스에서 설정
			const systemType = document.body.className.trim().toLowerCase();

			if (gaiaCommon.me.info.admin && isCAIROS()) {
				cntrctNo = pjtInfo.cntrctNo || initialCntrctNo;
			}

			var param = {
				cntrctNo: cntrctNo
			};

			let url = searchValue ?
				`/api/project/contractstatus/bid/contractBidSearch` :
				`/api/project/contractstatus/bid/contractBidList/${param.cntrctNo}`;

			if (searchValue) {
				param.searchValue = searchValue;
			}

            gaiaCommon.post(url, param, function (response) {
                if (response && response.details) {
                    if (response.details.bidTotalCost) {
                        const totalSum = response.details.bidTotalCost.sum;
                        $("#bidTotalCost").text(totalSum ? totalSum : "");
                    } else {
                        $("#bidTotalCost").text("");
                    }
                    if (searchValue) {
                        if (response.details.contractBidSearch) {
                            data = response.details.contractBidSearch;
                            _this.contractBidGrid.resetData(data);
                        } else {
                            _this.contractBidGrid.resetData([]);
                        }
                    } else {
                        data = response.details.contractBidList;
                        root = bidArrayToTree(data);
                        _this.contractBidGrid.resetData(root);
                    }
                } else {
                    _this.contractBidGrid.resetData([]);
                    $("#bidTotalCost").text("");
                }

            });
			return searchValue ? data : root;
		},
		exportToExcel: function () {
			const options = {
				includeHiddenColumns: false,
				onlySelected: true,
				fileName: "{{ message('item.projectcost.016') }}",
			};

			this.contractBidGrid.export("xlsx", options);
		},
	}
	function bidArrayToTree(items) {
		const map = {};
		let root = [];
		const visited = new Set(); // 순환 참조 방지를 위한 집합

		// 각 아이템을 map에 저장하고 _children 배열을 추가
		items.forEach(item => {
			map[item.cntrct_dcnstty_sno] = { ...item, _children: [] };
		});

		// 부모-자식 관계를 트리로 설정
		items.forEach(item => {
			const node = map[item.cntrct_dcnstty_sno];

			// 순환 참조 방지를 위해 방문한 노드인지 확인
			if (visited.has(node.cntrct_dcnstty_sno)) {
				return; // 순환 참조가 있으면 무시
			}

			if (item.up_cntrct_dcnstty_sno === "" || !map[item.up_cntrct_dcnstty_sno]) {
				// 상위 항목이 없으면 최상위 노드로 설정
				node._attributes = { expanded: true }; // 트리에서 펼쳐진 상태로 표시
				root.push(node);
			} else {
				// 상위 항목이 있으면 상위 항목의 _children에 추가
				map[item.up_cntrct_dcnstty_sno]._children.push(node);
			}

			// 현재 노드를 방문 처리
			visited.add(node.cntrct_dcnstty_sno);
		});

		
		// 자식이 없는 항목 중 a_menu_level이 1이 아닌 항목은 _children을 삭제
		Object.values(map).forEach(item => {
			if (item._children.length === 0) {
				delete item._children;
			}
		});

		var result = Object.values(map).filter((row) => row.a_menu_level === 1);

		result.sort((a, b) => a.cbs_sno - b.cbs_sno); // cbs_sno 기준으로 정렬

		var arr = new Array();
		for (var key in result) {
			arr.push(result[key]);
		}

		return arr;
	}

	let calculatorGrid = {
		init: function () {
			let _this = this;

			if (!this.calculatorGrid) {
				this.calculatorGrid = new tui.Grid({
					el: document.getElementById('calculatorGrid'),
					scrollX: false,
					scrollY: true,
					contextMenu: null,
					bodyHeight: 500,
					treeColumnOptions: {
						name: "cst_calc_it_nm",
						useIcon: true,
						useCascadingCheckbox: true,
					},
					header: {
						columns: [
							{
								name: 'cost_am',
							},
						]
					},
					columns: [
						{ header: "{{ message('item.projectcost.025') }}", name: 'cst_calc_it_nm', width: 300 },	// 공종명/내역명
						{ header: "{{ message('item.projectcost.026') }}", name: 'cst_calc_mthd_nm', resizable: true, minWidth: 200 },	// 산출식
						{ header: "{{ message('item.projectcost.027') }}", name: 'ovrhdcst_pt', resizable: true, width: 100, align: 'right' },	// 적용요율
						{ header: "{{ message('item.projectcost.028') }}", name: 'drcnstcost_cmpr_pt', width: 110, align: 'right' },	// 직공비대비율
						{
							header: "{{ message('item.projectcost.007') }}",	// 금액
							name: 'cost_am',
							width: 120,
							align: 'right',
							formatter: function (e) {
								return e.value != null ? e.value.toLocaleString() : '0';
							}
						},
					]
				});
			}
			let list = this.get();

			if (list) {
				this.calculatorGrid.resetData(list);
			}
		},
		get: function () {
			if (!this.calculatorGrid) {
				return;
			}
			let _this = this;
			let data;
			let root;
			let url;
			let cntrctNo = $("#cntrctNo option:selected").val() || initialCntrctNo // 기본적으로 select 박스에서 설정
			const systemType = document.body.className.trim().toLowerCase();

			if (gaiaCommon.me.info.admin && isCAIROS()) {
				cntrctNo = pjtInfo.cntrctNo || initialCntrctNo;
			}

			var param = {
				cntrctNo: cntrctNo,
			};
            gaiaCommon.post(`/api/project/contractstatus/bid/calculatorList/${param.cntrctNo}`, param, function(response){
                data = response.details.calculatorList;

                const totalCost = data.reduce((sum, item) => {
                    const itemName = item.cst_calc_it_nm.trim();
                    if (['직접재료비', '직접노무비', '산출경비'].includes(itemName)) {
                        return sum + parseFloat(item.cost_am) || 0;
                    }
                    return sum;
                }, 0);

                if (totalCost) {
                    $("#calcTotalCost").text(totalCost.toLocaleString());
                }

                root = calcArrayToTree(data);
                _this.calculatorGrid.resetData(root);
            }, function(response){
                console.log(response);
            })

			return root;
		},
		exportToExcel: function () {
			const options = {
				includeHiddenColumns: false,
				onlySelected: true,
				fileName: "{{ message('item.projectcost.017') }}",
			};

			this.calculatorGrid.export("xlsx", options);
		},
	}

	function calcArrayToTree(items) {
		const map = {};
		let root = null;

		items.forEach(item => {
			map[item.cst_calc_it_cd] = { ...item, _children: [] };
		});

		items.forEach(item => {
			const node = map[item.cst_calc_it_cd];
			if (item.up_cst_calc_it_cd === "") {
				node._attributes = { expanded: true }
				root = node;
			} else {
				node._attributes = { expanded: true }
				map[item.up_cst_calc_it_cd]._children.push(node);
			}
		});

		Object.values(map).forEach(item => {
			if (item._children.length < 1 && item.a_menu_level != 1) {
				delete item._children;
			}
		});

		var result = Object.values(map).filter((row) => row.a_menu_level === 1);

		var arr = new Array();
		for (var key in result) {
			arr.push(result[key]);
		}

		return arr;
	}
</script>
<script src="/webjars/jstree/jstree.min.js"></script>
<script src="/assets/js/tree.js"></script>
{% endblock footer_script %}