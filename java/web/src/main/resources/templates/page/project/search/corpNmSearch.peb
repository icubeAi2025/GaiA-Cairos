<style>
    .selectbox:not(.readonly)::after {
        z-index: 1 !important;
    }

    #company-grid .tui-grid-cell-current-row {
        background-color: var(--select-list-bg);
    }

    #company-grid  .tui-grid-body-area :not(p, textarea, select) {
        line-height: 1;
        cursor: pointer !important;
    }
</style>
<div class="modal open">
    <div class="pop_box _lg">
        <div class="pop_header">
            <h5 class="pop_tit" id="code_cu_tit">{{ message('item.psearch.001') }}</h5>
            <button type="button" class="icon_btn pop_close" onclick="popup.close()">
                <i class="ic ic-close"></i>
                <span class="blind">{{ message('item.com.038') }}</span>
            </button>
        </div>
        <div class="pop_body">
            <div class="group">
                <div class="conts_grid">
                    <!-- S: search wrap ---------------------------------------------- -->
                    <div class="toolbar">
                        <div class="search_wrap">
                            <span class="selectbox has_clear">
                                <span class="sty_ip" onclick="$('.dropdown').toggleClass('on')" id="companyGroupSelect"
                                      style="min-width: 220px;">{{ message('item.comp.002') }}</span> <!-- 회사그룹 -->
                                <button class="icon_btn _clear" onclick="grid.clear();  " style="display: none;">
                                    <i class="ic ic-close"></i>
                                    <span class="blind">{{ message('item.com.085') }}</span>
                                </button>

                                <div class="dropdown">
                                    <ul class="list_sty dropdown_list" id="companyGroupList">
                                    </ul>
                                </div>
                            </span>
                            <!-- searchbox -->
                            <div class="searchbox_wrap">
                                <input type="text" id="keyword" placeholder="{{ message('item.comp.003') }}"
                                       onkeypress="if( event.keyCode == 13 ){grid.search();}"> <!-- 회사명 -->
                                <button type="submit" class="icon_btn search" onclick="grid.search()">
                                    <i class="ic ic-search"></i>
                                    <span class="blind">{{ message('btn.014') }}</span>
                                </button>
                            </div>
                        </div>

                        <div class="selectbox sort">
                            <select name="items-per-page" id="items-per-page" onchange="grid.changePerPage()">
                                <option value="5">5</option>
                                <option value="10" selected>10</option>
                                <option value="15">15</option>
                            </select>
                        </div>
                    </div>

                    <div class="grid" id="company-grid">
                    </div>
                </div>
            </div>


        </div>
        <input type="hidden" id="codeCheck" value="true">
        <div class="pop_footer">
            <div class="btn_area jc_e">
                <button type="button" class="btn _outline" onclick="popup.close()">{{ message('btn.007') }}</button>
                <!-- 닫기 -->
                <button type="button" class="btn _fill" id="action-button" onclick="grid.save()">
                    {{ message('btn.056') }}
                </button> <!-- 추가 -->
            </div>
        </div>
    </div>
</div>
<script>
    //회사 목록 그리드
    var grid = {
        init: function () {
            let compGrpCdList = [];
            this.makeCompanyGroupList();
            this.makeCompanyGrid(compGrpCdList);
        },

        save: function () {
            const rowKey = this.companyGrid.getFocusedCell()?.rowKey;
            const rowData = this.companyGrid.getRow(rowKey);

            popup.data.corpNm = gaiaCommon.decodeSafeText(rowData?.compNm?.trim());
            popup.data.corpNo = gaiaCommon.decodeSafeText(rowData?.corpNo?.trim());
            popup.data.compAdrs = gaiaCommon.decodeSafeText(rowData?.compAdrs?.trim());
            popup.data.corpCeo = gaiaCommon.decodeSafeText(rowData?.corpCeo?.trim());
            popup.data.bsnsmnNo = gaiaCommon.decodeSafeText(rowData?.bsnsmnNo?.trim());
            popup.data.compTelno = gaiaCommon.decodeSafeText(rowData?.compTelno?.trim());
            popup.data.compFaxno = gaiaCommon.decodeSafeText(rowData?.compFaxno?.trim());

            if (popup.data.corpNm) {
                popup.add();
            } else {
                gaiaCommon.customAlert("{{ message('msg.067') }}"); // 선택된 회사가 없습니다.
            }
        },

        makeCompanyGrid: function (compGrpCdList, keyword) {
            const Grid = tui.Grid;
            let _this = this;

            if (this.companyGrid) {
                this.companyGrid.destroy();
                this.companyGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/project/corpNmSearch",
                    method: "Get",
                    initParams: {
                        compGrpCdList: compGrpCdList,
                        column: "comp_nm",
                        keyword: keyword
                    },
                }
            });

            if (!this.companyGrid) {
                this.companyGrid = new Grid({
                    el: document.getElementById("company-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: true,
                    draggable: false,
                    contextMenu: null,
                    minBodyHeight: 200,
                    bodyHeight: 200,
                    pageOptions: {
                        perPage: 10,
                    },
                    columns: [
                        {
                            header: "{{ message('item.dept.022') }}", // 회사 구분
                            name: "compGrpCdNm",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.comp.001') }}", // 회사 코드
                            name: "corpNo",
                            align: "center",
                        },
                        {
                            header: "{{ message('item.comp.003') }}", // 회사 명
                            name: "compNm",
                            ellipsis: true,
                            resizable: true,
                        },
                        {
                            header: "{{ message('item.com.067') }}", // 설명
                            name: "compDscrpt",
                        },
                        {
                            header: "{{ message('item.com.068') }}", // 주소
                            name: "compAdrs",
                            ellipsis: true,
                            resizable: true,
                        },
                        { header: "", name: "corpCeo", hidden: true },
                        { header: "", name: "bsnsmnNo", hidden: true },
                        { header: "", name: "compTelno", hidden: true },
                        { header: "", name: "compFaxno", hidden: true },
                    ],
                });
                this.companyGrid.on("click", function (e) {
                    const rowKey = e.rowKey;
                    const clickedRowData = _this.companyGrid.getRow(rowKey);

                    if (!clickedRowData || !clickedRowData._attributes) {
                        return;
                    }

                    clickedRowData._attributes.checked = !clickedRowData._attributes.checked;
                    _this.companyGrid.setRow(rowKey, clickedRowData);

                });
            }
        },

        search: function () {
            $('.dropdown').removeClass('on')
            let compGrpCdList = [];
            let keyword = $("#keyword").val();
            $("#companyGroupList").find("input.check_mark:checked").each(function () {
                const compGrpCd = $(this).val();
                const companyGroupName = $(this).siblings(".check_label").text();
                compGrpCdList.push({ compGrpCd: compGrpCd });
            });
            grid.makeCompanyGrid(compGrpCdList, keyword);
        },

        makeCompanyGroupList: function () {
            gaiaCommon.get("/api/project/companyGroupList", '', function (data) {
                var companyGroupLists = data.details.companyGroupList;
                var companyGroupAll = `
                                        <li class="list_item">
                                            <label class="form_check">
                                                <input class="check_mark" id="allCheck" type="checkbox" name="check">
                                                <span class="check_label">{{ message('item.com.059') }}</span>
                                            </label>
                                        </li> `;
                $("#companyGroupList").append(companyGroupAll);

                // 전체 체크박스 클릭 이벤트
                $("#companyGroupList").on('change', '#allCheck', function () {
                    const isChecked = $(this).is(':checked');
                    $(".check_mark").prop('checked', isChecked);
                });

                // 개별 체크박스 상태 변경 시 전체 체크박스 상태 업데이트
                $("#companyGroupList").on('change', 'input.check_mark:not(#allCheck)', function () {
                    const totalCheckboxes = $("#companyGroupList").find("input.check_mark:not(#allCheck)").length;
                    const checkedCheckboxes = $("#companyGroupList").find("input.check_mark:not(#allCheck):checked").length;

                    $("#allCheck").prop('checked', totalCheckboxes === checkedCheckboxes);
                });

                companyGroupLists.forEach((companyGroupList, index) => {
                    let companyGroup = companyGroupList.cmnCdNm;
                    let companyGroupCd = companyGroupList.cmnCd;
                    var companyGroupList = `
                                     <li class="list_item">
                                        <label class="form_check">
                                            <input class="check_mark" type="checkbox" name="check" value="${companyGroupCd}">
                                            <span class="check_label">${companyGroup}</span>
                                        </label>
                                    </li> `;
                    $("#companyGroupList").append(companyGroupList);
                });

                // 체크박스 상태 변경 시 텍스트 업데이트
                $("#companyGroupList").on('change', 'input.check_mark', function () {
                    grid.updateSelectBoxText();
                });

                $(document).on('click', function (event) {
                    if (!$(event.target).closest('.selectbox.has_clear').length) {
                        $('.dropdown').removeClass('on');
                    }
                });
            }, function (xhr) {
                console.error(
                    "Error deleting data:",
                    xhr.responseText
                );
            });
        },

        updateSelectBoxText: function () {
            let selectedGroups = [];

            let allChecked = $("#allCheck").is(':checked');

            if (allChecked) {
                $("#companyGroupSelect").text("{{ message('item.com.059') }}");
                $('.icon_btn._clear').css('display', 'block');
                return;
            }

            $("#companyGroupList").find("input.check_mark:checked").each(function () {
                const companyGroupName = $(this).siblings(".check_label").text();
                selectedGroups.push(companyGroupName);
            });

            let displayText;
            const selectedCount = selectedGroups.length;

            if (selectedCount > 0) {
                $('.icon_btn._clear').css('display', 'block');
            } else {
                $('.icon_btn._clear').css('display', 'none');
            }

            if (selectedCount === 1) {
                displayText = `${selectedGroups[0]}`;
            } else if (selectedCount >= 2) {
                displayText = `${selectedGroups[0]} 외 ${selectedCount - 1}건`;
            } else {
                displayText = "{{ message('item.comp.002') }}"; // 회사그룹
            }
            $("#companyGroupSelect").text(displayText);


        },

        clear: function () {
            $('.check_mark').prop('checked', false);
            grid.updateSelectBoxText();
        },

        changePerPage: function () {
            var size = $('select[id="items-per-page"]').val();
            this.companyGrid.setPerPage(size);

            const pagination = this.companyGrid.paginationManager.getPagination();
            pagination.setItemsPerPage(size);
            pagination.reset();
        },


    };

    $(function(){
                grid.init();
                gaia.loaded = true;
    })

</script>