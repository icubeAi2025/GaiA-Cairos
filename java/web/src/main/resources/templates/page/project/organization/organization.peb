{% extends 'layout/base_content' %} {% block head %}
{% endblock %} {% block content %}
<article class="conts g-row" id="container">
    <form id="addForm" name="addForm">
        <div class="group">
            <h3 class="conts_tit">{{ message("item.org.001") }}</h3>
            <div class="box img_box" id="img_box">
                <!-- 기본, 조직도 미등록 상태 -->
                <p class="data_info" id="data_info">
                    {{ message("msg.028") }}
                </p>
                <!-- 조직도 등록 -  p에 '.hide' / img의 '.hide' 삭제 -->
                <img src="" class="hide" id="imagePreview" ondragstart="return false;" />

                <div class="btn_area">
                    {{ btnHtml2 | raw }}
                    <input type="file" accept="image/*" id="fileNm" name="fileNm" style="display: none" />
                </div>
            </div>
        </div>
    </form>

    <div class="group">
        <h3 class="conts_tit">{{ message("item.org.002") }}</h3>
        <div class="conts_grid">
            <div class="toolbar">
                <div class="btn_area s_default">
                    {{ btnHtml | raw }}
                </div>
            </div>

            <div class="grid" id="organization-grid"></div>
        </div>
    </div>
</article>

{% endblock content %} {% block footer_script %}
<script>
    const params = new URLSearchParams(window.location.search);
    let pjtNo;
    let cntrctNo;

    //사용자유무 렌더러
    var page = {
        isDelAuth: "{{ isDelAuth }}" === "true",
        init() {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;
            const self = this;

            gaiaCommon.makeCntrctSelectBox(
                    "#container",
                    () => {
                        $(".btn_area").hide();
                        orgGrid.init(null);
                    },
                    (cntrctNo) => {
                        orgGrid.init(cntrctNo);
                        page.getImage(cntrctNo);
                    },
                    (cntrctNo) => {
                        orgGrid.init(cntrctNo);
                        page.getImage(cntrctNo);
                    }
            );
        },

        // 조직도 이미지 불러오기
        getImage(cntrctNo) {
            console.log("cntrctNo",cntrctNo)
            // cntrctNo가 유효하지 않을 경우
            if (!cntrctNo) {
                document.getElementById("imagePreview").style.display = "none";
                document.getElementById("data_info").style.display = "block";
                return;
            }

            const url = "/api/project/organization/getImg/" + cntrctNo;

            gaiaCommon.get(url, '', function (result){
                const imagePreview = document.getElementById("imagePreview");
                const dataInfo = document.getElementById("data_info");

                if (result.details.organization) {
                    let fileData = result.details.organization;
                    if (fileData) {
                        const rawPath = fileData.fileDiskPath || '';
                        const normalizedPath = rawPath.replace(/\\/g, '/');
                        const trimmedPath = normalizedPath.replace(/^.*\/upload/, '/upload');
                        const fileUrl = trimmedPath + "/" + fileData.fileDiskNm;

                        imagePreview.src = fileUrl;
                        imagePreview.style.display = "block";
                        imagePreview.style.maxHeight = "500px";
                        imagePreview.style.objectFit = "contain";
                        dataInfo.style.display = "none";
                    } else {
                        imagePreview.style.display = "none";
                        dataInfo.style.display = "block";
                    }
                } else {
                    imagePreview.style.display = "none";
                    dataInfo.style.display = "block";
                }
            }, function (error){
                console.error("이미지 업데이트 중 오류 발생:", error);
            })
        },
        org: {
            data: {
                project: {},
                list: [],
                selected: {},
            },

            //조직도 이미지 수정,삭제
            imgUpdate(files) {
                const cntrctNo = document.getElementById("cntrctNo").value;
                const formData = new FormData();
                if (files != null && files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        formData.append("files", files[i]);
                    }
                }

                gaiaCommon.post( "/api/project/organization/img/create/" + cntrctNo, formData, function (data){
                    gaiaCommon.customAlert("{{ message('msg.007') }}");
                }, function (error){
                    console.error("Error saving img:", error);
                })
            },

            //조직도 이미지 수정,삭제
            imgDelete(files) {
                const cntrctNo = document.getElementById("cntrctNo").value;
                const formData = new FormData();
                if (files != null && files.length > 0) {
                    for (let i = 0; i < files.length; i++) {
                        formData.append("files", files[i]);
                    }
                }
                gaiaCommon.post("/api/project/organization/img/delete/" + cntrctNo, formData, function (data){
                    gaiaCommon.customAlert("삭제되었습니다.");
                }, function (error){
                    console.error("Error saving project:", error);
                })
            },

            // 조직 추가
            create() {
                const cntrctNo = document.getElementById("cntrctNo").value;
                window.location.href = `/project/organization/create?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`;
            },

            // 조직 수정
            update() {
                let checkedNos = []; // 체크된 행
                const checkedRows = orgGrid.contractOrgGrid.getCheckedRows();
                checkedRows.forEach(row => {
                    const cntrctNo = row.cntrctNo;
                    const cntrctOrgId = row.cntrctOrgId;
                    checkedNos.push({ cntrctNo, cntrctOrgId });
                });

                if (checkedNos.length == 1) {
                    const selectedRow = checkedNos[0];
                    const { cntrctNo, cntrctOrgId } = selectedRow;
                    window.location.href = `/project/organization/update?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&cntrctOrgId=${cntrctOrgId}`;

                } else {
                    gaiaCommon.customAlert("{{ message('msg.020') }}");
                }
            },

            // 조직 삭제
            delete() {
                const url = "/api/project/organization/delete";
                const listName = "organizationList";

                let checked = []; // 체크된 행
                const checkedRows = orgGrid.contractOrgGrid.getCheckedRows();

                checkedRows.forEach(row => {
                    const cntrctNo = row.cntrctNo;
                    const cntrctOrgId = row.cntrctOrgId;
                    checked.push({ cntrctNo, cntrctOrgId });
                });

                if (checked.length > 0) {
                    gaiaCommon.customConfirm("{{ message('item.com.005') }}", "{{ message('item.org.017') }}", "{{ message('msg.009') }}", function () {
                        let data = { [listName]: checked };
                        gaiaCommon.post(url, data, function (data){
                            gaiaCommon.customAlert("{{ message('msg.006') }}");
                            orgGrid.contractOrgGrid.reloadData();
                        }, function (xhr,error){
                            console.error("Error deleting data:", xhr.responseText);
                        })
                    });
                } else {
                    gaiaCommon.customAlert("{{ message('msg.021') }}");
                }
            },
        }

    }

    // 조직 목록
    var orgGrid = {
        init: function (cntrctNo) {
            const Grid = tui.Grid;
            let _this = this;
            if (this.contractOrgGrid) {
                this.contractOrgGrid.destroy(); // 기존 인스턴스 제거
                this.contractOrgGrid = null;
            }

            const dataSource = createDataSource({
                readData: {
                    url: "/api/project/organization/list",
                    method: "GET",
                    initParams: {
                        pjtNo: pjtNo,
                        cntrctNo: cntrctNo,
                    },
                }
            });

            if (!this.contractOrgGrid) {
                this.contractOrgGrid = new Grid({
                    el: document.getElementById("organization-grid"),
                    data: dataSource,
                    scrollX: false,
                    scrollY: true,
                    draggable: false,
                    contextMenu: null,
                    minBodyHeight: 320,
                    bodyHeight: 320,
                    rowHeaders: [
                        {
                            type: "checkbox",
                            header: `
    					<input type="checkbox" id="checkAll" class="hidden-input" name="_checked" />

    			`,
                            width: 100,
                            renderer: {
                                type: window.IconRenderer,
                                options: [
                                    {
                                        type:"checkbox"
                                    },
                                    {
                                        type:"trash",
                                        url: "/api/project/organization/delete",
                                        idFields: "cntrctNo,cntrctOrgId",
                                        keyName: "organizationList",
                                        auth: page.isDelAuth,
                                        msgList: {
                                            confirmTit: "{{ message('item.org.017') }}",
                                            confirmMsg: "{{ message('msg.009') }}",
                                            completeMsg: "{{ message('msg.006') }}"
                                        },
                                    }
                                ],
                            },
                        },
                    ],
                    columns: [
                        { header: "{{ message('item.org.004') }}", name: "cnsttyCdNmKrn", align: "center", resizable: true, ellipsis: true, },
                        {
                            header: "{{ message('item.org.006') }}", name: "ofclTypeNmKrn",
                            align: "center",
                            resizable: true,
                            ellipsis: true,
                        },
                        {
                            header: "{{ message('item.org.005') }}",
                            name: "ofclNm",
                            className: "ofclNm2",
                            align: "center",
                            renderer: {
                                type: window.IconRenderer,
                                options: [{
                                    type:'newwindow',
                                    idFields: "cntrctNo,cntrctOrgId",
                                    gridId: "organization-grid",
                                    align: "right",
                                    absolute:true,
                                    isHover:true,
                                    open:{
                                        url: `/project/organization/read?pjtNo=${pjtNo}&cntrctNo={id1}&cntrctOrgId={id2}`,
                                    }

                                }],
                            },
                            resizable: true, ellipsis: true,
                            width: 120,
                        },
                        {
                            header: "{{ message('item.org.010') }}", name: "bsnsmnNo",
                            align: "center", resizable: true, ellipsis: true,
                        },
                        { header: "{{ message('item.org.011') }}", name: "corpNm", resizable: true, ellipsis: true,},
                        { header: "{{ message('item.org.007') }}", name: "pstn", align: "center", resizable: true, ellipsis: true, },
                        { header: "{{ message('item.org.008') }}", name: "telNo", align: "center", resizable: true, ellipsis: true,},
                        {
                            header: "{{ message('item.org.009') }}", name: "email",
                            resizable: true, ellipsis: true,
                        },
                        {
                            header: "{{ message('item.com.003') }}",
                            name: "useYn",
                            formatter:function(e) {
                                const value = e.value;
                                return value === "Y"
                                    ? "사용"
                                    : value === "N"
                                        ? "미사용"
                                        : value;
                            },
                            align: "center", resizable: true, ellipsis: true,
                        },
                    ],
                });
                this.contractOrgGrid.on("errorResponse", function (ev) {
                    // ev.xhr: XMLHttpRequest 객체를 참조
                    const statusCode = ev.xhr.status;

                    if (statusCode === 403) {
                        gaiaCommon.customAlert(SESSION_EXPIRED_MSG, () => { location.reload(); });
                    } else {
                        console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                    }
                });
                this.contractOrgGrid.on("errorResponse", function (ev) {
                    // ev.xhr: XMLHttpRequest 객체를 참조
                    const statusCode = ev.xhr.status;

                    if (statusCode === 403) {
                        gaiaCommon.customAlert(SESSION_EXPIRED_MSG, () => { location.reload(); });
                    } else {
                        console.error("데이터 요청 중 오류 발생:", ev.xhr.status, ev.xhr.statusText);
                    }
                });

            }
            refreshGrid(orgGrid.contractOrgGrid);
        },
    }

    $(function () {
        gaia.create({
            $init: function ($params) {
                gaiaPortal.navMenuInit("M010102", "{{ message('item.org.001') }}");
                page.init();

                gaia.loaded = true
            }
        });
    })











    const dropArea = document.getElementById("img_box");
    const addBtn = document.getElementById("addFileButton");
    const removeBtn = document.getElementById("removeAllButton");
    const fileInput = document.getElementById("fileNm");
    const imagePreview = document.getElementById("imagePreview");
    const dataInfo = document.getElementById("data_info");

    // 클릭 이벤트 처리
    if (addBtn) {
        addBtn.addEventListener("click", () => {
            fileInput.click();
        });
    }

    // 드래그 앤 드롭 이벤트 처리
    dropArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        e.stopPropagation();
        dropArea.style.backgroundColor = "#eee";
    });

    dropArea.addEventListener("dragleave", (e) => {
        e.preventDefault();
        e.stopPropagation();
        dropArea.style.backgroundColor = "#fff";
    });

    dropArea.addEventListener("drop", (e) => {
        e.preventDefault();
        e.stopPropagation();
        dropArea.style.backgroundColor = "#fff";
        const files = e.dataTransfer.files;

        if (validateFiles(files)) {
            fileInput.files = files;
            const cntrctNo = document.getElementById("cntrctNo").value;
            if (cntrctNo == "none") {
                // gaiaCommon.customAlert("계약을 선택해주세요");
                return false;
            } else {
                handleFiles(files);
                page.org.imgUpdate(files);
            }
        }
    });

    // 파일 입력 필드 변경 이벤트 처리
    fileInput.addEventListener("change", () => {
        const cntrctNo = document.getElementById("cntrctNo").value;
        if (cntrctNo == "none") {
            // gaiaCommon.customAlert("계약을 선택해주세요");
            return false;
        } else {
            const files = fileInput.files;
            if (files.length > 0) {
                handleFiles(files);
                page.org.imgUpdate(files);
            }
        }
    });

    // 삭제 버튼 클릭 이벤트 처리
    if (removeBtn) {
        removeBtn.addEventListener("click", () => {
            var isConfirmed = gaiaCommon.customConfirm("{{ message('item.com.005') }}", "{{ message('item.org.016') }}", "{{ message('msg.009') }}",
                function () {
                    const cntrctNo = document.getElementById("cntrctNo").value;
                    imagePreview.src = "";
                    imagePreview.style.display = "none";
                    dataInfo.style.display = "block";
                    fileInput.value = "";
                    page.org.imgDelete();
                });
        });
    }

    // 이미지 및 파일 표시 함수
    function handleFiles(files) {
        const imagePreview = document.getElementById("imagePreview");
        const dataInfo = document.getElementById("data_info");

        if (files.length > 0) {
            dataInfo.style.display = "none"; // 기본 메시지 숨기기
            imagePreview.style.display = "block"; // 이미지 미리보기 표시
            imagePreview.style.maxHeight = "500px";
            imagePreview.style.objectFit = "contain";
            imagePreview.classList.remove("hide"); // 이미지 표시

            const file = files[0]; // 단일 파일 처리
            const reader = new FileReader();
            reader.onload = (event) => { imagePreview.src = event.target.result; };
            reader.readAsDataURL(file);
        }
    }

    function validateFiles(files) {
        const allowedExtensions = ["image/"];

        const file = files[0];
        const fileType = file.type;
        const isValid = allowedExtensions.some((ext) =>
            fileType.startsWith(ext)
        );
        if (!isValid) {
            gaiaCommon.customAlert(
                "{{ message('msg.026') }} :  " + file.name
            );
            return false;
        }
        return true;
    }
</script>
{% endblock footer_script %}