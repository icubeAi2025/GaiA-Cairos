<head>
    {% include "sub/head" %}
    {% block head %}{% endblock %}
</head>

<body>
    {% include "sub/head_content" %}
    <div class="page_header" id="pageNav"></div>
    <section class="contents_wrap g-col2 ty1">
        <article class="conts g-row" style="overflow:auto; height: 100%;">
            <ul class="list_sty pj_list ty_list" id="projectList">
                <!-- 현장 개설 목록 -->
            </ul>
        </article>

        <article class="conts g-row">
            <div class="conts_form">
                <div class="btn_area s_default _outline">
                    <button type="button" class="btn _point" id="new_request">{{ message('btn.029') }}</button>
                    <!-- 신규신청 -->
                    <button type="button" class="btn" id="save_request">{{ message('btn.047') }}</button>
                    <!-- 신규신청 시: 개설요청 / 프로젝트 수정 시: 저장 -->
                </div>

                <div class="form_box">
                    <form id="newRequestForm">
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label required">{{ message('item.com.007') }}</div> <!-- 공사명 -->
                                <div class="form_data">
                                    <input type="text" id="plcNm" name="plcNm" class="maxlength" maxlength="100"
                                        required>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.com.008') }}</div> <!-- 현장위치 -->
                                <div class="form_data">
                                    <span class="item_group">
                                        <input type="text" id="plcLctAdrsCntnts" name="plcLctAdrsCntnts"
                                            class="maxlength" maxlength="100">
                                    </span>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.info.007') }}</div> <!-- 공사기간 -->
                                <div class="form_data">
                                    <span class="item_group">
                                        <input type="date" id="pjtBgnDate" name="pjtBgnDate" class="date w-md">
                                        ~
                                        <input type="date" id="pjtEndDate" name="pjtEndDate" class="date w-md">
                                        <span class="item_wrap w-sm put_txt _day">
                                            <input type="text" id="cnstwkDaynum" name="cnstwkDaynum" class="maxlength"
                                                maxlength="5">
                                        </span>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row cols2">
                            <div class="col">
                                <div class="form_label">{{ message('item.info.002') }}</div> <!-- 공사구분 -->
                                <div class="form_data">
                                    <span class="selectbox" id="selectBox1">
                                    </span>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form_label">{{ message('item.info.012') }}</div> <!-- 계약구분 -->
                                <div class="form_data">
                                    <span class="selectbox" id="selectBox2">
                                    </span>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form_label">{{ message('item.info.009') }}</div> <!-- 공사승인일자 -->
                                <div class="form_data">
                                    <input type="date" id="aprvlDate" name="aprvlDate" class="date w-md">
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row cols3">
                            <div class="col merge2">
                                <div class="form_label">{{ message('item.info.023') }}</div> <!-- 주요시설 -->
                                <div class="form_data">
                                    <input type="text" id="mainFcltyCntnts" name="mainFcltyCntnts" class="maxlength"
                                        maxlength="200" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form_label">{{ message('item.info.024') }}</div> <!-- 수요기관 -->
                                <div class="form_data">
                                    <input type="text" id="dminsttNm" name="dminsttNm" class="maxlength"
                                        maxlength="100" />
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row cols2">
                            <div class="col">
                                <div class="form_label">{{ message('item.pinstall.006') }}</div> <!-- 담당자 -->
                                <div class="form_data">
                                    <input type="text" id="ofclNm" name="ofclNm" class="maxlength" maxlength="20">
                                </div>
                            </div>
                            <div class="col">
                                <div class="form_label">E-mail</div>
                                <div class="form_data">
                                    <input type="email" id="email" name="email" class="form-control email maxlength"
                                        maxlength="100">
                                </div>
                            </div>
                            <div class="col">
                                <div class="form_label">{{ message('item.contract.036') }}</div> <!-- 전화번호 -->
                                <div class="form_data">
                                    <input type="tel" id="telNo" name="telNo" class="form-control telNo maxlength"
                                        maxlength="20">
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.com.022') }}</div> <!-- 비고 -->
                                <div class="form_data">
                                    <textarea id="rmk" name="rmk" class="maxlength" maxlength="2000"></textarea>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.pinstall.002') }}</div> <!-- 자료첨부 -->
                                <div class="form_data">

                                    <div class="attach_wrap">
                                        <div class="attach_toolbar">
                                            <div class="btn_area s_small">
                                                <button type="button" class="btn _outline" id="removeAllButton">{{
                                                    message('btn.020') }}</button> <!-- 모두삭제 -->
                                                <div class="attach_btn">
                                                    <input type="file" id="fileInput" name="files" multiple>
                                                    <button type="button" class="btn _fill" id="addFileButton">{{
                                                        message('btn.021') }}</button> <!-- 파일첨부 -->
                                                </div>
                                            </div>
                                            <div class="attach_info">
                                                <span class="attach_result">
                                                    <span class="sucess">
                                                        <i class="ic ic-check"></i>
                                                        <b class="num" id="uploadedFileCount">0</b>
                                                    </span>
                                                    <span class="fail">
                                                        <i class="ic ic-close"></i>
                                                        <b class="num" id="failedFileCount">0</b>
                                                    </span>
                                                </span>
                                                <span class="attach_capacity">
                                                    <span class="item" id="uploadedFileSize">0 KB</span>
                                                    <span class="item">25 MB</span>
                                                </span>
                                            </div>
                                        </div>

                                        <div class="attach_area">
                                            <!-- 첨부파일 미등록 시 -->
                                            <p class="data_info">
                                                공사 계약서 , 공사 개요 정보, 조감도 등의 파일을 첨부해 주시기 바랍니다.
                                            </p>

                                            <!-- 첨부파일 등록 시 활성화 'hide'제거-->
                                            <div class="attach_list hide">
                                                <ul class="file_header">
                                                    <li class="header_item">
                                                        <button type="button" class="icon_btn">
                                                            <i class="ic ic-close"></i>
                                                            <span class="blind">{{ message('item.com.020') }}</span>
                                                            <!-- 파일명 -->
                                                        </button>
                                                        <span class="f_name">{{ message('item.com.020') }}</span>
                                                        <!-- 파일명 -->
                                                        <span class="f_progress">{{ message('item.info.036')
                                                            }}</span> <!-- 진행상태 -->
                                                        <span class="f_capacity">{{ message('item.com.021') }}</span>
                                                        <!-- 크기 -->
                                                    </li>
                                                </ul>
                                                <ul class="file_list" id="fileList"></ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </article>
    </section>
    {% include "sub/pop_box" %}
</body>


</html>
<style>
    .label._default {
        background-color: #BAB9C5;
    }
</style>
<script src="/assets/js/validation.js"></script>
<script src="/assets/js/main_common.js"></script>
<script>
    $(function () {
        gaia.create({
            $init: function ($params) {
                page.loadSelectBoxes();
                page.init();
            }
        });
    });

    var page = {
        uploadedFileCount: null,
        failedFileCount: null,
        uploadedFileSize: null,
        maxTotalFileSize: 25 * 1024 * 1024, // 25 MB
        currentProjectNo: null,
        currentProject: null,
        totalFileSize: 0,
        failedFileCounts: 0,
        successfulFileCount: 0,
        existingFiles: [],
        allRemovedFiles: [],
        removedFiles: {}, // 프로젝트별로 삭제된 파일을 관리

        init: function () {
            $(function () {
                var title = "{{ message('item.pinstall.001') }}"
                gaiaPortal.navMenuInit("MAIN", title);
                $("#menuDepth").append(`<li class=\"breadcrumb_item\" id=\"depth_txt\">${title}</li>`);
                page.fetchProjects();
                page.cacheElements();
                page.addEventListeners();
            })
        },
        cacheElements() {
            this.newRequestButton = document.getElementById('new_request');
            this.saveRequestButton = document.getElementById('save_request');
            this.newRequestForm = document.getElementById('newRequestForm');
            this.projectList = document.getElementById('projectList');
            this.addFileButton = document.getElementById('addFileButton');
            this.removeAllButton = document.getElementById('removeAllButton');
            this.fileInput = document.getElementById('fileInput');
            this.fileList = document.getElementById('fileList');
            this.uploadedFileCount = document.getElementById('uploadedFileCount'); // 성공한 파일 개수
            this.failedFileCount = document.getElementById('failedFileCount'); // 실패한 파일 개수
            this.uploadedFileSize = document.getElementById('uploadedFileSize'); // 업로드된 파일 용량
        },

        addEventListeners() {
            document.getElementById('pjtBgnDate').addEventListener('input', this.calculateDays.bind(this));
            document.getElementById('pjtEndDate').addEventListener('input', this.calculateDays.bind(this));

            // 신규신청 후 저장은 개설요청, 좌측에서 프로젝트 셀렉트 후에는 저장
            this.newRequestButton.addEventListener('click', () => {
                if (this.saveRequestButton) {
                    this.saveRequestButton.textContent = "{{ message('btn.047') }}";
                }
            });

            // 파일 목록 단일 삭제(x) 버튼
            document.querySelectorAll('.file-item .remove-button').forEach(button => {
                button.addEventListener('click', (event) => this.removeFile(event));
            });

            // 파일첨부 창
            this.addFileButton.addEventListener('click', () => this.fileInput.click());

            // 드래그 앤 드롭
            this.attachArea = document.querySelector('.attach_area');
            this.attachArea.addEventListener('dragover', (event) => this.dragOver(event));
            this.attachArea.addEventListener('dragleave', () => this.dragLeave());
            this.attachArea.addEventListener('drop', (event) => this.handleDrop(event));

            this.saveRequestButton.addEventListener('click', (event) => this.saveRequest(event));   // 저장

            this.fileInput.addEventListener('change', () => this.updateFileListFromInput());    // 파일목록 업데이트

            this.newRequestButton.addEventListener('click', () => this.resetNewRequest());  // 신규요청

            this.removeAllButton.addEventListener('click', () => this.removeAllFiles());    // 모두삭제
        },

        // 파일 삭제(단일)
        removeFile(event) {
            const fileItem = event.target.parentElement;
            const fileNo = fileItem.getAttribute('data-file-no');
            const sno = fileItem.getAttribute('data-sno');

            this.allRemovedFiles.push({ fileNo, sno });
            fileItem.remove();
        },

        // 파일 드래그 앤 드롭
        dragOver(event) {
            event.preventDefault();
            this.attachArea.classList.add('dragging');
        },
        dragLeave() {
            this.attachArea.classList.remove('dragging');
        },
        handleDrop(event) {
            event.preventDefault();
            this.attachArea.classList.remove('dragging');

            const newFiles = event.dataTransfer.files;
            if (newFiles.length > 0) {
                this.existingFiles = this.existingFiles.concat(newFiles); // 기존 파일 목록에 새 파일 추가
                this.updateFileList(newFiles);
            }
        },

        // 저장
        saveRequest(event) {
            event.preventDefault();

            // 업로드 용량이 25MB를 초과했을 경우 경고 메시지 표시
            if (this.totalFileSize > this.maxTotalFileSize) {
                gaiaCommon.customAlert("{{ message('msg.app.012') }}".replace('{0}', 25));  // 업로드 용량 25MB을(를) 초과하였습니다.
                return;
            }

            // 신규신청 -> 개설요청일때만 메일 발송(최초로 현장개설 시에만)
            if (this.saveRequestButton.textContent === "{{ message('btn.047') }}") {
                this.saveProjectData()
                // this.sendMail(); // 저장 성공 후 메일 전송
            } else {
                this.saveProjectData()
            }
        },

        sendMail() {    // 메일 전송
            fetch('/resource/mail/send/pjtInstall ', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include' // 쿠키를 함께 전송
            }).then((response) => {
                if (!response.ok) {
                    if (response.status === 403) {
                        alert(SESSION_EXPIRED_MSG);
                        location.reload('/');
                    }
                }
                response.json()
            });
        },

        updateFileListFromInput() { // '파일첨부'로 첨부된 파일 추가
            const newFiles = this.fileInput.files;
            this.existingFiles = this.existingFiles.concat(newFiles);
            if (newFiles.length > 0) {
                this.updateFileList(newFiles);
            }
        },

        resetNewRequest() { // '신규신청'
            this.newRequestForm.reset();
            document.getElementById('cnstwkDaynum').value = '';
            this.clearFileList();
            this.uploadedFileSize.textContent = '0 KB';
            this.uploadedFileCount.textContent = '0';
            this.currentProjectNo = null;
            this.newRequestForm.classList.remove('readonly');
            this.saveRequestButton.style.display = 'block';
        },

        removeAllFiles() { // '모두삭제'
            const fileItems = document.querySelectorAll('.file_list .list_item');
            fileItems.forEach(fileItem => {
                const fileNo = fileItem.dataset.fileNo;
                const sno = fileItem.dataset.sno;
                this.allRemovedFiles.push({ fileNo, sno });

                if (!this.removedFiles[this.currentProjectNo]) {
                    this.removedFiles[this.currentProjectNo] = [];
                }
                this.removedFiles[this.currentProjectNo].push({ fileNo, sno });
            });
            this.updateFileSizeSummary();
            this.clearFileList();
            this.fileInput.value = '';
        },

        // 프로젝트 클릭 시 파일 목록 처리
        onProjectClick(project) {
            if (project.attachments) {
                this.processFetchedFiles(project.attachments);
            } else {
                this.clearFileList();
            }
            this.setCurrentProject(project.plcReqNo);
        },

        setCurrentProject(plcReqNo) { // 목록에서 프로젝트 클릭
            this.currentProjectNo = plcReqNo;
            if (!this.removedFiles[this.currentProjectNo]) {
                this.removedFiles[this.currentProjectNo] = [];
            }
            console.log(this.removedFiles)
        },

        processFetchedFiles(attachments) {   // 서버에서 받은 파일 정보 처리
            const files = attachments.map(file => ({
                name: file.fileNm,
                size: file.fileSize,
                fileNo: file.fileNo,
                sno: file.sno
            }));

            this.updateFileList(files);
        },

        clearFileList() {  // 파일 목록 초기화
            this.fileList.innerHTML = '';
            this.totalFileSize = 0;
            this.successfulFileCount = 0;
            this.failedFileCounts = 0;
            this.existingFiles = [];
            this.updateFileSizeSummary();
            this.updateFileCount();
            this.updateFailedFileCount();

            // 파일 목록이 비었을 때 메시지 표시
            const dataInfo = document.querySelector('.data_info');
            const attachList = document.querySelector('.attach_list');

            if (this.fileList.querySelectorAll('.list_item').length === 0) {
                dataInfo.classList.remove('hide');
                attachList.classList.add('hide');
            }
        },

        removeFileFromProject(fileNo, sno) {   // 파일 삭제 처리 함수
            if (!this.removedFiles[this.currentProjectNo]) {
                this.removedFiles[this.currentProjectNo] = [];
            }
            this.removedFiles[this.currentProjectNo].push({ fileNo, sno });
            console.log("removeFileFromProject", this.removedFiles)
        },

        updateFileSizeSummary() {  // 파일 크기 업데이트
            const totalSizeText = this.formatFileSize(this.totalFileSize);
            document.getElementById('uploadedFileSize').textContent = `${totalSizeText}`;
        },

        formatFileSize(size) { // 파일 크기 포맷팅
            if (size >= 1024 * 1024) {
                return (size / (1024 * 1024)).toFixed(2) + ' MB';
            } else if (size >= 1024) {
                return (size / 1024).toFixed(2) + ' KB';
            } else {
                return size + ' bytes';
            }
        },

        updateFileList(files) { // 파일 목록 업데이트
            const existingFileNames = this.existingFiles.map(file => file.name);
            const fileListElement = document.getElementById('fileList');
            const dataInfo = document.querySelector('.data_info');
            const attachList = document.querySelector('.attach_list');
            this.totalFileSize = this.existingFiles.reduce((sum, file) => sum + (file.size || 0), 0);

            if (files.length === 0 && this.existingFiles.length === 0) {
                dataInfo.classList.remove('hide');
                attachList.classList.add('hide');
            } else {
                dataInfo.classList.add('hide');
                attachList.classList.remove('hide');

                const allFiles = [...this.existingFiles, ...files];

                allFiles.forEach(file => {
                    if (!existingFileNames.includes(file.name)) {
                        const fileItem = this.createFileItem(file, fileListElement);
                        this.handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList);
                    }
                });

                this.updateFileCount();
                this.updateFailedFileCount();
            }
        },

        createFileItem(file, fileListElement) {
            const fileItem = document.createElement('li');
            fileItem.classList.add('list_item');
            fileItem.dataset.filename = file.name;
            fileItem.dataset.fileNo = file.fileNo || '';
            fileItem.dataset.sno = file.sno || '';

            const fileName = document.createElement('span');
            fileName.classList.add('f_name');
            fileName.textContent = file.name;

            const fileSizeText = this.formatFileSize(file.size);
            const fileSize = document.createElement('span');
            fileSize.classList.add('f_capacity');
            fileSize.textContent = fileSizeText;

            const progressContainer = document.createElement('span');
            progressContainer.classList.add('f_progress');

            const progress = document.createElement('span');
            progress.classList.add('progress');

            const successIndicator = document.createElement('span');
            successIndicator.classList.add(file.size > this.maxTotalFileSize ? 'fail' : 'sucess');
            successIndicator.innerHTML = file.size > this.maxTotalFileSize ? '<i class="ic ic-close"></i>' : '<i class="ic ic-check"></i>';

            if (file.size > this.maxTotalFileSize) {
                progress.innerHTML = `<span class="bar" style="width: 100%;"></span>`;
                progress.classList.add('fail');
                this.failedFileCounts++;
            } else {
                progress.innerHTML = `<span class="bar" style="width: 0%;"></span>`;
                progress.classList.add('ing');
            }

            progressContainer.appendChild(progress);
            progressContainer.appendChild(successIndicator);

            fileItem.appendChild(this.createRemoveButton(file, fileListElement));
            fileItem.appendChild(fileName);
            fileItem.appendChild(progressContainer);
            fileItem.appendChild(fileSize);

            fileListElement.appendChild(fileItem);
            this.totalFileSize += file.size;
            this.updateFileSizeSummary();

            if (file.size <= this.maxTotalFileSize) {
                this.successfulFileCount++;
                this.existingFiles.push(file);
                this.uploadFile(file, fileItem);
            }

            return fileItem;
        },

        createRemoveButton(file, fileListElement) {
            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.classList.add('icon_btn');
            removeButton.innerHTML = '<i class="ic ic-close"></i><span class="blind">삭제</span>';

            if (this.currentProject && this.currentProject.openPstats !== '0701') {
                removeButton.style.visibility = 'hidden';
            }

            return removeButton;
        },

        handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList) {
            const removeButton = fileItem.querySelector('.icon_btn');
            removeButton.addEventListener('click', () => {
                this.removeFileFromProject(file.fileNo, file.sno);
                fileItem.remove();
                this.totalFileSize -= file.size;
                this.updateFileSizeSummary();

                if (file.size <= this.maxTotalFileSize) {
                    this.successfulFileCount--;
                    this.updateFileCount();
                } else {
                    this.failedFileCounts--;
                    this.updateFailedFileCount();
                }

                this.existingFiles = this.existingFiles.filter(f => f.fileNo !== file.fileNo || f.sno !== file.sno);

                if (fileListElement.querySelectorAll('.list_item').length === 0) {
                    dataInfo.classList.remove('hide');
                    attachList.classList.add('hide');
                }
                document.querySelector('#fileInput').value = '';
            });
        },

        updateFileCount() { // 파일 개수 업데이트
            const uploadedFileCountElement = document.getElementById('uploadedFileCount');
            uploadedFileCountElement.textContent = this.successfulFileCount > 0 ? this.successfulFileCount : '0';
        },

        updateFailedFileCount(failedCount) { // 실패한 파일 개수 업데이트
            const failedFileCountElement = document.getElementById('failedFileCount');
            failedFileCountElement.textContent = this.failedFileCounts > 0 ? this.failedFileCounts : '0';
        },

        uploadFile(file, fileItem) { // 파일 업로드 상태 확인
            const formData = new FormData();
            formData.append('file', file);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload', true);

            xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                    const percentComplete = Math.round((event.loaded / event.total) * 100);
                    this.updateProgress(file.name, percentComplete, fileItem);
                }
            };
            xhr.onload = () => {
                this.updateProgress(file.name, xhr.status === 200 ? 100 : 0, fileItem, xhr.status === 200);
            };
            xhr.onerror = () => {
                this.updateProgress(file.name, 0, fileItem, false);
            };
            xhr.send(formData);
        },

        updateProgress(fileName, percent, fileItem, success = true) { // 파일 업로드 상태바
            const progressBar = fileItem.querySelector('.progress .bar');
            const progressContainer = fileItem.querySelector('.progress');
            const successIndicator = fileItem.querySelector('.sucess');
            progressBar.style.width = percent + '%';

            if (percent === 100) {
                progressBar.style.display = 'none';
                progressContainer.classList.remove('ing');
                successIndicator.classList.remove('hide');
                successIndicator.classList.add(success ? 'sucess' : 'fail');
                successIndicator.innerHTML = success ? '<i class="ic ic-check"></i>' : '<i class="ic ic-close"></i>';
            } else {
                progressBar.style.display = 'block';
                successIndicator.classList.add('hide');
                progressBar.classList.add('ing');
            }
        },

        formatFileSize(size) { // 파일 크기 포맷
            return size < 1024 ? `${size} bytes` : size < 1048576 ? `${(size / 1024).toFixed(2)} KB` : `${(size / 1048576).toFixed(2)} MB`;
        },

        // 날짜 형식 변경
        formatDateString(dateString) {
            if (!dateString) return '';
            const year = dateString.substring(0, 4);
            const month = dateString.substring(4, 6);
            const day = dateString.substring(6, 8);
            return `${year}-${month}-${day}`;
        },
        convertToCompactDate(dateString) {
            if (!dateString) return '';

            const regex = /^\d{4}-\d{2}-\d{2}$/;
            if (!regex.test(dateString)) {
                throw new Error('Invalid date format. Expected format: YYYY-MM-DD');
            }
            const year = dateString.substring(0, 4);
            const month = dateString.substring(5, 7);
            const day = dateString.substring(8, 10);

            return `${year}${month}${day}`;
        },

        calculateDays() {  // 날짜 계산
            const pjtBgnDate = document.getElementById('pjtBgnDate').value;
            const pjtEndDate = document.getElementById('pjtEndDate').value;

            if (pjtBgnDate && pjtEndDate) {
                const start = new Date(pjtBgnDate);
                const end = new Date(pjtEndDate);
                if (start > end) {
                    gaiaCommon.customAlert("{{ message('msg.pinstall.001') }}"); // 시작 날짜가 종료 날짜보다 늦습니다.
                    document.getElementById('pjtBgnDate').value = '';
                    document.getElementById('pjtEndDate').value = '';
                    document.getElementById('cnstwkDaynum').value = '';
                    return;
                }
                const timeDiff = end - start;
                const dayDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;
                document.getElementById('cnstwkDaynum').value = dayDiff;
            }
        },
        // 현장 개설 목록
        fetchProjects() {
            gaiaCommon.get('/api/project/get/pjt-list', '', function(data){
                const projects = data.details.projectList;
                const projectList = document.getElementById('projectList');
                console.log(projects);

                if (Array.isArray(projects)) {
                    projectList.innerHTML = '';

                    projects.forEach(function (project) {
                        const listItem = document.createElement('li');
                        listItem.className = 'list_item';

                        const statusSpan = document.createElement('span');
                        statusSpan.className = 'label ' + page.getStatusClass(project.openPstats);
                        statusSpan.textContent = project.openPstatsNm;

                        const titleStrong = document.createElement('strong');
                        titleStrong.className = 'prj_tit';
                        titleStrong.textContent = gaiaCommon.decodeSafeText(project.plcNm);

                        const buttonDiv = document.createElement('div');
                        buttonDiv.style.display = 'flex';
                        buttonDiv.style.alignItems = 'center';

                        const cancelButton = document.createElement('button');
                        cancelButton.type = 'button';
                        cancelButton.className = 'btn _outline s_small';
                        cancelButton.textContent = "{{ message('btn.005') }}"; // '취소'
                        cancelButton.addEventListener('click', function (event) {
                            event.stopPropagation();
                            page.deleteProject(project.plcReqNo);
                        }.bind(this));

                        if (project.openPstats !== '0701') {
                            cancelButton.style.visibility = 'hidden';
                        }

                        buttonDiv.appendChild(cancelButton);

                        const link = document.createElement('a');
                        link.href = '#';
                        link.appendChild(statusSpan);
                        link.appendChild(titleStrong);
                        link.appendChild(buttonDiv);

                        listItem.appendChild(link);

                        listItem.addEventListener('click', function () {
                            const allItems = projectList.querySelectorAll('.list_item');
                            allItems.forEach(item => item.classList.remove('active'));
                            listItem.classList.add('active');

                            page.loadProjectData(project.plcReqNo);
                            this.currentProject = project;

                            if (page.saveRequestButton) {
                                page.saveRequestButton.textContent = "{{ message('btn.006') }}";
                            }

                            if (project.openPstats !== '0701') {
                                document.getElementById('newRequestForm').classList.add('readonly');
                                page.saveRequestButton.style.display = 'none';
                            } else {
                                document.getElementById('newRequestForm').classList.remove('readonly');
                                page.saveRequestButton.style.display = 'block';
                            }
                        }.bind(this));

                        projectList.appendChild(listItem);
                    }.bind(this));
                }
            }, function(error){
                console.error('프로젝트 목록 조회 실패:', error);
            })
        },


        getStatusClass(statusCode) {
            switch (statusCode) {
                case '0701':
                    return '_request';
                case '0702':
                    return '_success';
                case '0703':
                    return '_ing';
                default:
                    return '_default';  // '0704'
            }
        },


        // 현장 개설 취소
        deleteProject(plcReqNo) {
            gaiaCommon.customConfirm("{{ message('item.pinstall.007') }}", "{{ message('item.pinstall.007') }}", "{{ message('msg.pinstall.002') }}?", () => {
                gaiaCommon.post(`/api/project/delete/${plcReqNo}`, '', function(result){
                    gaiaCommon.customAlert("{{ message('msg.043') }}"); // 취소되었습니다
                    page.fetchProjects();
                    window.location.reload();
                })
            });
        },

        // 현장 개설 조회
        loadProjectData(plcReqNo) {
            gaiaCommon.get(`/api/project/get/${plcReqNo}`, '', function(data){
                page.currentProjectNo = plcReqNo;

                const projectInstall = data.details.projectInstall;
                const attachments = data.details.attachments || [];

                if (projectInstall) {
                    const fields = [
                        'plcNm', 'plcLctAdrsCntnts', 'pjtBgnDate', 'pjtEndDate',
                        'cnstwkDaynum', 'majorCnsttyCd', 'cntrctType', 'aprvlDate',
                        'mainFcltyCntnts', 'dminsttNm', 'ofclNm', 'email', 'telNo', 'rmk'
                    ];

                    fields.forEach(function (fieldId) {
                        const field = document.getElementById(fieldId);
                        if (field) {
                            if (field.type === 'date') {
                                field.value = page.formatDateString(projectInstall[fieldId]);
                            } else {
                                field.value = projectInstall[fieldId] !== null ? gaiaCommon.decodeSafeText(projectInstall[fieldId]) : '';
                            }
                        }
                    }.bind(this)); // 🔁 this 유지

                    // 파일 목록 업데이트
                    const fileList = document.getElementById('fileList');
                    if (fileList) {
                        page.clearFileList(); // 기존 파일 목록 지우기
                        if (attachments.length > 0) {
                            page.processFetchedFiles(attachments); // 새 파일 목록 추가
                        } else {
                            page.updateFileSizeSummary(); // 파일 사이즈 요약 업데이트
                            page.updateFileCount();       // 파일 개수 업데이트
                        }
                    }

                    // 프로젝트 정보 표시
                    const newRequestForm = document.getElementById('newRequestForm');
                    if (newRequestForm) {
                        newRequestForm.style.display = 'block';
                    }

                    this.currentProjectNo = plcReqNo; // 현재 수정 중인 프로젝트 번호 설정
                }
            }, function(error){
                console.error('프로젝트 상세 조회 실패:', error);
            })
        },

        // 셀렉트 박스의 선택된 값을 가져오는 함수
        getSelectedValue(containerId) {
            const selectBox = document.getElementById(containerId);
            return selectBox ? selectBox.value : '';
        },

        // 셀렉트 박스의 선택된 텍스트를 가져오는 함수
        getSelectedText(containerId) {
            const selectBox = document.getElementById(containerId);
            return selectBox ? selectBox.options[selectBox.selectedIndex].text : '';
        },

        // 현장 개설 저장
        saveProjectData() {
            const plcNm = $('input[name="plcNm"]').val();
            if (!plcNm) {
                gaiaCommon.customAlert("{{ message('msg.023') }}");    // 공사명을 작성해주세요.
                return;
            }

            const formData = new FormData(newRequestForm);
            const selectBoxes = ['cntrctType', 'majorCnsttyCd'];
            selectBoxes.forEach(id => {
                formData.append(id, this.getSelectedValue(id));
            });

            // 제거된 파일 정보 추가
            if (this.currentProjectNo && this.removedFiles[this.currentProjectNo]) {
                this.removedFiles[this.currentProjectNo].forEach(file => {
                    formData.append('removedFiles[]', file.fileNo);
                    formData.append('removedSnos[]', file.sno);
                });
            }

            // 파일 첨부 창에서 자동으로 추가된 files 필드 제거
            formData.delete('files');
            // 기존 파일 목록인 existingFiles만 수동으로 formData에 추가
            this.existingFiles.forEach(file => {
                formData.append('files', file);
            });

            const pattern = /^[A-Za-z0-9_\.\-]+@[A-Za-z0-9\-]+\.[A-za-z0-9\-]+/;
            const email = document.getElementById('email').value;

            if (email !== '' && !pattern.test(email)) {
                gaiaCommon.customAlert("{{ message('msg.030') }}");
                return false;
            }

            const jsonObject = {
                plcNm: document.getElementById('plcNm').value,
                plcLctAdrsCntnts: document.getElementById('plcLctAdrsCntnts').value,
                cnstwkDaynum: document.getElementById('cnstwkDaynum').value,
                majorCnsttyCd: this.getSelectedValue('majorCnsttyCd'),
                cntrctType: this.getSelectedValue('cntrctType'),
                pjtBgnDate: this.convertToCompactDate(document.getElementById('pjtBgnDate').value),
                pjtEndDate: this.convertToCompactDate(document.getElementById('pjtEndDate').value),
                aprvlDate: this.convertToCompactDate(document.getElementById('aprvlDate').value),
                mainFcltyCntnts: document.getElementById('mainFcltyCntnts').value,
                dminsttNm: document.getElementById('dminsttNm').value,
                ofclNm: document.getElementById('ofclNm').value,
                email: email,
                telNo: document.getElementById('telNo').value,
                rmk: document.getElementById('rmk').value
            };
            formData.append('projectData', new Blob([JSON.stringify(jsonObject)], { type: 'application/json' }));

            const url = this.currentProjectNo
                ? `/api/project/update/${this.currentProjectNo}` // 수정 요청
                : '/api/project/create/pjt'; // 신규 생성 요청

            gaiaCommon.post(url, formData, function (response){
                if (page.currentProjectNo) {
                    gaiaCommon.customAlert("{{ message('msg.007') }}", function () {   // 수정되었습니다
                        page.fetchProjects();
                        window.location.replace('/project/project_install');
                    });
                } else {
                    gaiaCommon.customAlert("{{ message('msg.044') }}", function () {   // 수정되었습니다
                        page.fetchProjects();
                        window.location.replace('/project/project_install');
                    });
                }
            }, function (error){
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
            })
        },

        // 셀렉트 박스 호출
        loadSelectBoxes() {
            const selectBoxes = [
                { cmnGrpCd: 'ce229e27-98c6-8c89-7be7-cbc27b0b1fc8', elementId: "selectBox1", selectBoxId: 'majorCnsttyCd' },
                { cmnGrpCd: '0575cf90-0d6a-4d96-a298-d252c8179c32', elementId: "selectBox2", selectBoxId: 'cntrctType' }
            ];

            selectBoxes.forEach(box => {
                this.makeSelectBox(box.cmnGrpCd, box.elementId, box.selectBoxId);
            });
        },

        makeSelectBox(cmnGrpCd, elementId, selectBoxId) {
            let requestData = {
                cmnGrpCd: cmnGrpCd,
                selectBoxId: selectBoxId,
                selectBoxNmType: "KOR",
                ckeckedValue: "",
                orderByCol: "",
                orderByType: "",
                initText: "=선택=",
                paramNm: "selectBox",
                funName: "",
                funParam: "",
                funtype: "onchange",
            };

            gaiaCommon.post("/api/util/make-selectBox", [requestData], function(data){
                let returnMap = data.details.returnMap;
                let selectBoxElement = document.getElementById(elementId);
                selectBoxElement.innerHTML = returnMap["selectBox"];
            }, function(error,status){
                console.error("Error making select box:", status, error);
            })
        },
    };
</script>