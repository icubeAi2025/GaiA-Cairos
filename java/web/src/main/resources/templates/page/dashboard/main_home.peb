{% extends 'layout/base_content' %} {% block head %}

<style>
    #sCurveGraph {
        width: 100% !important;
    }
     .eco_card_container {
         display: flex;
         justify-content: space-between;
         align-items: center;
         height: 185px;
         width: 100%;
         padding: 10px;
         box-sizing: border-box;
         background-color: var(--color-white);
     }

    .eco_card {
        flex: 1;
        max-width: calc(100% / 6);
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        margin: 0 5px;
        transition: transform 0.2s ease;
    }

    .eco_card img {
        width: 80px;
        height: 80px;
        object-fit: contain;
        margin: 10px 0;
    }

    .eco_card b {
        font-size: 14px;
        color: #333;
    }
</style>
{% endblock %} {% block content %}
<section class="contents_wrap">
    <article class="dashboard_lay" style="position:relative;    grid-template-columns: 350px auto;">
        <!-- Section L -->
        <!-- Today -->
        <div class="dashboard_sec">
            <article class="today" style="position: relative; width:290px;">
                <div class="h_group">
                    <h3 class="conts_tit">CCTV</h3> <!-- cctv -->
                </div>
                <style>
                    #cctv_overlay {
                        position: absolute;
                        bottom: 0;
                        left: 0;
                        width: 100%;
                        height: 170px;
                        z-index: 10;
                        pointer-events: all;
                        background-color: var(--color-white);
                    }

                    #cctv_loading {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        z-index: 999;
                        width: 50px;
                        height: 80px;
                        background: url('/assets/images/svg/loading_spin_blue.svg') no-repeat center;
                        background-size: contain;
                    }
                </style>
                <div id="cctv_overlay">
                    <div id="cctv_loading" class="spinner"></div>
                </div>
                <iframe id="ifrCctv" width="290" height="164"
                    src="https://www.youtube.com/embed/9TMKxbYBs1o?si=TXdeTCYABxE5be45?&autoplay=1&mute=1&controls=0&loop=1"
                    title="YouTube video player" frameborder="0" allow="accelerometer; autoplay=" 1"; mute="1" ;
                    controllers="0" ; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
            </article>

            <article class="today">
                <div class="h_group">
                    <h3 class="conts_tit">{{ message('item.dash.023') }}</h3> <!-- today -->
                    <span class="today_date" id="today"></span>
                </div>

                <div class="count_wrap">
                    <p class="total_period">{{ message('item.com.071') }}<b id="cnstwkDaynum"> <!-- 총기간 -->
                        </b>{{ message('item.com.072') }}</p> <!-- 일 -->
                    <p class="item _dday">
                        <span class="item_label">D-day</span>
                        <b class="item_count" id="dDay"></b>
                    </p>
                    <p class="item _no-accident">
                        <span class="item_label">{{ message('item.com.074') }}</span> <!-- 무사고 -->
                        <b class="item_count" id="sftyAcdntDaynum"></b>
                    </p>
                </div>

                <div class="period_status">
                    <div class="bar_wrap">
                        <div class="bar" id="datePercentBar"></div>
                        <span class="bar_num" id="datePercent"></span>
                    </div>
                    <div class="period">
                        <span class="start" id="pjtBgnDate"></span>
                        <span class="end" id="pjtEndDate"></span>
                    </div>
                </div>
            </article>

            <!--  공정율 -->
            <article class="p_rate">
                <h3 class="conts_tit">{{ message('item.dash.006') }}</h3> <!-- 공정율 -->
                <table class="table ta_c">
                    <colgroup>
                        <col>
                        <col span="3" width="68px">
                    </colgroup>
                    <thead>
                        <tr>
                            <th></th>
                            <th>{{ message('item.com.055') }}</th> <!-- 계획 -->
                            <th>{{ message('item.com.056') }}</th> <!-- 실적 -->
                            <th>{{ message('item.construction.020') }}</th> <!-- 대비 -->
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>{{ message('item.com.073') }}</th> <!-- 공정 -->
                            <td id="planPer"></td>
                            <td id="actualPer"></td>
                            <td id="process"></td>
                        </tr>
                        <tr>
                            <th>{{ message('item.com.075') }}</th> <!-- 공사비 -->
                            <td id="planCstPer"></td>
                            <td id="actualCstPer"></td>
                            <td id="cstProcess"></td>
                        </tr>
                        <tr>
                            <th>{{ message('item.dash.024') }}</th> <!-- AI예측 공정율 -->
                            <td><b class="status_mark lv1"></b></td>
                            <td><b class="status_mark lv2"></b></td>
                            <td><b class="status_mark lv3"></b></td>
                        </tr>
                    </tbody>
                </table>
            </article>

            <!-- 작업현황 -->
            <article class="">
                <h3 class="conts_tit">{{ message('item.com.076') }}</h3> <!-- 작업현황 -->
                <canvas id="workStatusChart" width="auto" height="250"></canvas>
                <!-- <img src="/assets/images/dashboard/graph_sample_dounet.png" alt="" style="width: auto; height: auto;"> -->
                <p class="delay_status">
                    <span class="delay_item">{{ message('item.dash.025') }} : <b id="delay"></b></span>
                    <!-- 총 지연 Activity-->
                    <span class="delay_item">{{ message('item.dash.026') }} : <b id="startDelay"></b></span>
                    <!-- 착수지연 -->
                    <span class="delay_item">{{ message('item.dash.027') }} : <b id="endDelay"></b></span> <!-- 완료지연 -->
                </p>
            </article>

            <!-- 자원투입현황 -->
            <article class="r_input">
                <h3 class="conts_tit">{{ message('item.dash.028') }}</h3> <!-- 자원 투입현황 -->
                <table class="table ta_c">
                    <colgroup>
                        <col>
                        <col span="3" width="68px">
                    </colgroup>
                    <thead>
                        <tr>
                            <th></th>
                            <th>{{ message('item.construction.046') }}</th> <!-- 장비 -->
                            <th>{{ message('item.com.077') }}</th> <!-- 자재-->
                            <th>{{ message('item.com.078') }}</th> <!-- 노무 -->
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>{{ message('item.com.045') }}</th> <!-- 금일 -->
                            <td id="todayEquipment"></td>
                            <td id="todayMaterial"></td>
                            <td id="todayLabor"></td>
                        </tr>
                        <tr>
                            <th>{{ message('item.construction.043') }}</th> <!-- 누계 -->
                            <td id="equipment"></td>
                            <td id="material"></td>
                            <td id="labor"></td>
                        </tr>
                    </tbody>
                </table>
            </article>

            <!-- 물가변동(ESC) -->
            <article class="esc">
                <h3 class="conts_tit">{{ message('item.dash.029') }}</h3> <!-- 물가변동(ESC) -->
                <div class="esc_wrap">
                    <span id="escDt"></span>
                    <!-- 인상: _raise, 인하 : _lower -->
                    <div class="esc_info">
                        <b class="rate_change" id="rateChange">
                            <span class="put_txt _per" id="escRate"></span>
                        </b>
                        <!-- <span>예측</span> -->
                    </div>
                </div>
            </article>

            <!-- 조감도 -->
            <article class="b_view">
                <h3 class="conts_tit">{{ message('item.com.079') }}</h3> <!-- 조감도 -->
                <!-- S: Slick Slider -->
                <div class="birdseye_view" style="cursor: pointer; ">
                    <img id="projectPhoto" style="max-height: 220px">
                </div>
            </article>
        </div>

        <!-- Section C-->
        <div class="dashboard_sec">
            <article class="">
                <h3 class="conts_tit">{{ message('item.plan.000') }}</h3> <!-- 계획대비실적 -->
                <div class="put_txt _unit_won" id="graph_unit"></div>
                <div class="graph" id="chart-container" style="width: 100%; height: 400px;">
                    <canvas class="sCurveGraph" id="sCurveGraph"></canvas>
                </div>
            </article>

            <article>
                <div class="h_group">
                    <h3 class="conts_tit">{{ message('item.dash.031') }}</h3> <!-- 주요작업 Activity -->
                    <div class="btn_area s_small">
                        <button type="button" class="btn _outline"
                            onclick="window.location.href='/progress/wbs/activity'">{{ message('item.com.080')
                            }}</button> <!-- 상세정보 -->
                    </div>
                </div>
                <div class="conts_grid">
                    <div id="activityGrid" class="grid"> </div>
                </div>
            </article>

            <article>
                <h3 class="conts_tit">{{ message('item.dash.032') }}</h3> <!-- 관급자재 현황 -->
                <div class="conts_grid">
                    <div class="summary">
                        <div class="row">
                            <div class="col">
                                <div class="summary-label">{{ message('item.com.059') }}</div> <!-- 전체 -->
                                <div class="summary-data" id="govsplyMtrlTotalCount"></div>
                            </div>
                            <div class="col">
                                <div class="summary-label">{{ message('item.com.042') }}</div> <!-- 완료 -->
                                <div class="summary-data">00개(0%)</div>
                            </div>
                        </div>
                    </div>
                    <div id="govsplyMtrlGrid" class="grid">

                    </div>
                </div>
            </article>

            <article>
                <h3 class="conts_tit">{{ message('item.dash.033') }}</h3> <!-- 문서 현황 -->
                <table class="table">
                    <colgroup>
                        <col>
                        <col span="2" width="100px">
                    </colgroup>
                    <thead class="blind">
                        <tr>
                            <th>{{ message('item.com.060') }}</th> <!-- 제목 -->
                            <th>{{ message('item.com.064') }}</th> <!-- 작성자 -->
                            <th>{{ message('item.com.063') }}</th> <!-- 작성일 -->
                        </tr>
                    </thead>
                    <tbody id="docList">
                    </tbody>
                </table>
            </article>
            <article>
                <h3 class="conts_tit">친환경</h3>
                <dl class="side_box dashboard_quick" style="margin: 0;">
                    <dt style="display: flex; width: 100%; padding: 0;">
                        <div style="flex: 1; border-right: 1px solid var(--tb-th-bg) ; padding:.75em 1em;">친환경 인증서</div>
                        <div style="flex: 1; padding:.75em 1em;">친환경 자재</div>
                    </dt>
                    <dd>
                        <div class="eco_card_container">
                            <div class="eco_card" id="greenLevelDoc">
                                <b>녹색건축</b>
                                <img src="/assets/images/dashboard/eco-label/green_building.png" alt="greenLevel">
                                <b id="greenLevel"></b>
                            </div>
                            <div class="eco_card" id="energyEffectLevelDoc">
                                <b>건축물에너지 효율등급</b>
                                <img src="/assets/images/dashboard/eco-label/energy_effect.png" alt="에너지효율">
                                <b id="energyEffectLevel"></b>
                            </div>
                            <div class="eco_card" id="zeroEnergyLevelDoc">
                                <b>제로에너지 건축물</b>
                                <img src="/assets/images/dashboard/eco-label/zero_energy.png" alt="제로에너지건축물">
                                <b id="zeroEnergyLevel"></b>
                            </div>
                            <div class="eco_card" onclick="dashboard.openEcoFriendly('E01')" style="cursor : pointer; ">
                                <b>환경성선언 제품</b>
                                <img src="/assets/images/dashboard/eco-label/evironment_mtrl.png" alt="환경성선언자재">
                                <b id="evironmentMtrl"></b>
                            </div>
                            <div class="eco_card" onclick="dashboard.openEcoFriendly('E02')" style="cursor : pointer; ">
                                <b>저탄소자재</b>
                                <img src="/assets/images/dashboard/eco-label/co2_mtrl.png" alt="저탄소자재">
                                <b id="co2Mtrl"></b>
                            </div>
                            <div class="eco_card" onclick="dashboard.openEcoFriendly('E03')" style="cursor : pointer; ">
                                <b>친환경자재</b>
                                <img src="/assets/images/dashboard/eco-label/eco_mtrl.png" alt="친환경자재">
                                <b id="ecoMtrl"></b>
                            </div>
                        </div>
                    </dd>
                </dl>
            </article>

        </div>

        <!-- dashboard section -->
        <div class="dashboard_sec _full">
            <h3 class="conts_tit">{{ message('item.dash.040') }}</h3> <!-- Photo -->
            <!-- S: Slick Slider -->
            <div class="photo_slick_wrap" style="width: calc(100vw - 400px - 3em);">
                <div class="slick_nav">
                    <div class="btn_area slick_indigator">
                        <div class="btn_group _outline">
                            <button type="button" class="btn icon_btn prev" aria-disabled="true">
                                <span class="blind">{{ message('btn.016') }}</span> <!-- 이전 -->
                            </button>
                            <button type="button" class="btn icon_btn next">
                                <span class="blind">{{ message('btn.017') }}</span> <!-- 다음 -->
                            </button>
                        </div>
                    </div>
                </div>
                <div class="photo_list" id="photoList">
                </div>
            </div>
            <!-- //E: Slick Slider -->
        </div>
    </article>
</section>

{% endblock content %} {% block footer_script %}
<style>
    #graph_unit.put_txt._unit_won:after {
        content: '금액 단위: 십만원\A\A누계 단위: 백만원';
        content: '단위: 백만원';
        white-space: pre;
        line-height: 0.8;
    }

    .dashboard_sec._full {
        grid-column: unset;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<script>

    let pjtNo;
    let cntrctNo;
    var graphInstance;

    var dashboard = {
        doc:{},
        // 대시보드 데이터 조회
        init: function () {
            pjtNo = pjtInfo.pjtNo;
            cntrctNo = pjtInfo.cntrctNo;

            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.post(`/api/dashboard/mainDashBoard?`, {
                pjtNo: pjtNo,
                cntrctNo: cntrctNo
            }, function(data){
                //today
                var today = data.details.today
                $("#today").text(today.today);
                if(today.dday == null){
                    $("#dDay").text(0);
                }else{
                    $("#dDay").text(today.dday);
                }
                if (today.datePercent > 100) {
                    today.datePercent = 100
                }else if(today.datePercent < 0 || today.datePercent == null){
                    today.datePercent = 0
                }
                $("#datePercent").text(today.datePercent)
                $("#datePercent").css("left", `${today.datePercent}%`);
                $("#datePercentBar").css("width", `${today.datePercent}%`);
                $("#cnstwkDaynum").text(today.cnstwkDaynum)
                $("#pjtBgnDate").text(today.pjtBgnDate)
                $("#pjtEndDate").text(today.pjtEndDate)
                $("#sftyAcdntDaynum").text(today.sftyAcdntDaynum)

                // 작업 현황
                var work = data.details.work
                var complete = work.complete;
                var progress = work.progress;
                var delay = work.delay;
                $("#delay").text(work.delay)
                $("#startDelay").text(work.startDelay)
                $("#endDelay").text(work.endDelay)
                dashboard.workStatusChartDraw(complete, progress, delay);

                //자원 투입 현황
                var resource = data.details.resource
                $("#labor").text(resource.labor.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))
                $("#todayLabor").text(resource.todayLabor.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))
                $("#material").text(resource.material.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))
                $("#todayMaterial").text(resource.todayMaterial.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
                $("#equipment").text(resource.equipment.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
                $("#todayEquipment").text(resource.todayEquipment.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))

                // 물가변동
                var projectEsc = data.details.projectEsc
                if (projectEsc != null) {
                    $("#escDt").text(projectEsc.escDt);
                    $("#escRate").text(projectEsc.escRate);
                    <!-- 인상: _raise, 인하 : _lower -->
                    if($('#escRate').text() > 0){
                        $('#rateChange').addClass("_raise")
                    }else if($('#escRate').text() < 0){
                        $('#rateChange').addClass("_lower")
                    } else {
                        $('#rateChange').addClass("_same");
                    }
                }

                // 조감도
                var projectPhoto = data.details.projectPhoto
                if (projectPhoto != null) {
                    const rawPath = projectPhoto.fileDiskPath || '';
                    const normalizedPath = rawPath.replace(/\\/g, '/');
                    const trimmedPath = normalizedPath.replace(/^.*\/upload/, '/upload');

                    const fileUrl = trimmedPath + "/" + projectPhoto.fileDiskNm;
                    $("#projectPhoto").attr('src', fileUrl)
                    $("#projectPhoto").attr('onclick', `dashboard.openImagePopup('${fileUrl}')`)
                }

                // sCurveGraph
                dashboard.sCurveGraph()


                //주요작업 activity
                dashboard.activityGrid()


                //관급자재 현황
                var govsplyMtrlList = data.details.govsplyMtrlList
                if (govsplyMtrlList.length != 0) {
                    $("#govsplyMtrlTotalCount").text(govsplyMtrlList[0].totalCount + " {{ message('item.com.070') }}")
                } else {
                    $("#govsplyMtrlTotalCount").text("0 {{ message('item.com.070') }}")
                }
                dashboard.govsplyMtrlGrid()

                // 공정사진
                var photoLists = data.details.photoList;
                if (photoLists.length != 0) {
                    photoLists.forEach((photoList, index) => {
                        const rawPath = photoList.fileDiskPath || '';
                        const normalizedPath = rawPath.replace(/\\/g, '/');
                        const trimmedPath = normalizedPath.replace(/^.*\/upload/, '/upload');

                        const fileUrl = trimmedPath + "/" + photoList.fileDiskNm;
                        var photoListHTML = `
                                <a href="javascript:void(0);" onclick="dashboard.openImagePopup('${fileUrl}')" class="slick-slide slick-active" data-slick-index="0" aria-hidden="false" tabindex="0" style="width: 318px;">
                                    <figure class="p_photo_info" style="height : 200px">
                                        <img src="${fileUrl}" alt="${photoList.fileNm}" />
                                        <figcaption>
                                            <p class="tit">${photoList.titlNm}</p>
                                            <p class="desc">${photoList.dscrpt}</p>
                                        </figcaption>
                                    </figure>
                                </a>`;
                        $("#photoList").append(photoListHTML);
                    });

                    dashboard.makePhotoSlide();
                }

                // 친환경마크
                var ecoScore = data.details.ecoScore.ecoScore
                if (ecoScore) {
                    $("#greenLevel").text(ecoScore.greenLevel + " 등급")
                    $("#energyEffectLevel").text(ecoScore.energyEffectLevel + " 등급")
                    $("#zeroEnergyLevel").text(ecoScore.zeroEnergyLevel + " 등급")
                    $("#evironmentMtrl").text(ecoScore.evironmentMtrl + " 개")
                    $("#co2Mtrl").text(ecoScore.co2Mtrl + " 개")
                    $("#ecoMtrl").text(ecoScore.ecoMtrl + " 개")
                }

                const getWebPath = (diskPath, fileName) => {
                    let normalized = diskPath.replace(/\\/g, '/');
                    let trimmed = normalized.replace(/^.*\/upload/, '/upload');
                    return `${trimmed}/${fileName}`;
                };

                $("#greenLevelDoc").css("cursor", "pointer").on("click", () => {
                    const doc = data.details.ecoScore.greenLevelDoc;
                    if (doc) {
                        gaiaCommon.pdfViewUtil('DOC', doc.docId, 'DA');
                    } else {
                        gaiaCommon.customAlert('등록된 인증서가 없습니다.');
                    }
                });

                $("#energyEffectLevelDoc").css("cursor", "pointer").on("click", () => {
                    const doc = data.details.ecoScore.energyEffectLevelDoc;
                    if (doc) {
                        gaiaCommon.pdfViewUtil('DOC', doc.docId, 'DA');
                    } else {
                        gaiaCommon.customAlert('등록된 인증서가 없습니다.');
                    }
                });

                $("#zeroEnergyLevelDoc").css("cursor", "pointer").on("click", () => {
                    const doc = data.details.ecoScore.zeroEnergyLevelDoc;
                    if (doc) {
                        gaiaCommon.pdfViewUtil('DOC', doc.docId, 'DA');
                    } else {
                        gaiaCommon.customAlert('등록된 인증서가 없습니다.');
                    }
                });

                // 문서현황
                var docLists = data.details.docList
                console.log("문서 현황 데이터: ", docLists);
                if (docLists.length != 0) {
                    docLists.forEach((docList, index) => {
                        let pjtNo = docList.pjt_no|| pjtInfo.pjtNo;
                        let cntrctNo = docList.cntrct_no|| pjtInfo.cntrctNo;

                        var docListHTML = `
                                <tr>
                                    <td style=" max-width: 200px;
                                                overflow: hidden;
                                                text-overflow: ellipsis;
                                                white-space: nowrap;">
                                        <a href="/document?div=01&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&navi_id=${docList.navi_id}&up_doc_id=${docList.up_doc_id}">${docList.doc_nm}</a></td>
                                    <td style="text-align: center;">${docList.usr_nm}</td>
                                    <td style="text-align: center;">${docList.chg_dt}</td>
                                </tr>`;
                        $("#docList").append(docListHTML);
                    });
                }

                // 공정율
                var process = data.details.process
                if (process) {
                    $("#planPer").text(process.planPer)
                    $("#actualPer").text(process.actualPer)
                    $("#process").text(process.process)
                    $("#planCstPer").text(process.planCstPer);
                    $("#actualCstPer").text(process.actualCstPer);
                    $("#cstProcess").text(process.cstProcess)
                } else {
                    $("#planPer").text('0%')
                    $("#actualPer").text('0%')
                    $("#process").text('0%')
                    $("#planCstPer").text('0%')
                    $("#actualCstPer").text('0%')
                    $("#cstProcess").text('0%')
                }
                gaiaCommon.LoadingOverlay('body', false);
            })
        },

        // 퀵메뉴
        approvalMove: function (moveType) {
            gaiaCommon.get("/api/portal/change-pjt/check-authority/" + pjtInfo.pjtNo + "/M060201/" + pjtInfo.cntrctNo, {}, function (result) {
                if (result.details?.checkAuthority === 'Y') { //프로젝트 변경 시 변경 프로젝트의 현재 메뉴에 권한이 있을 경우 현재 페이지 reload
                    window.location.href = `/eapproval/approval/waiting?auditType=${moveType}&pjtNo=${pjtInfo.pjtNo}&cntrctNo=${pjtInfo.cntrctNo}`;
                } else { //프로젝트 변경 시 변경 프로젝트의 현재 메뉴에 권한이 없을 경우
                    gaiaCommon.customAlert('{{ message("msg.064") }}');
                }
            });
        },

        // 작업현황 원형차트
        workStatusChartDraw: function (complete, progress, delay) {
            var ctx = document.getElementById('workStatusChart');

            // Chart.js에서 ChartDataLabels 플러그인 등록
            Chart.register(ChartDataLabels);

            var myChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: [
                        '{{ message("item.com.042") }}', // 완료
                        '{{ message("item.app.020") }}', // 진행
                        '{{ message("item.dash.044") }}'  // 지연
                    ],
                    datasets: [{
                        data: [complete, progress, delay],
                        backgroundColor: [
                            '#1FAE70', // 완료
                            '#FFF000', // 진행
                            '#e54848'  // 지연
                        ],
                        borderWidth: 5,
                        rotation: -10 * Math.PI,
                        cutout: "40%",
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        tooltip: {
                            enabled: false,
                        },
                        // ChartDataLabels 플러그인 설정
                        datalabels: {
                            display: true,
                            color: '#000', // 텍스트 색상
                            font: {
                                size: 13 // 폰트 크기
                            },
                            align: 'center',
                            anchor: 'center',
                            textAlign: 'center',
                            formatter: (value, ctx) => {
                                if (value !== '0') {
                                    let total = ctx.chart.data.datasets[0].data.reduce((acc, data) => acc + Number(data), 0);
                                    let percentage = ((value / total) * 100).toFixed(1);

                                    return `${value}\n${percentage}%`;
                                }
                                return '';
                            }

                        }
                    },
                    responsive: false,
                    maintainAspectRatio: false
                },
                plugins: [ChartDataLabels] // 플러그인 등록
            });
        },

        // 계획대비실적
        sCurveGraph: function () {
            let data = [];
            var param = {
                cntrctNo: cntrctNo,
                viewType: "month"
            }

            gaiaCommon.post('/api/progress/actualtoplan/actualtoplanData', param, function(response){
                data = response.details.data;
                let formattedData = data.map((item, index) => ({
                    dt: item.dt,
                    plan_cst: item.plan_sum,
                    plan_cum: item.plan_max,
                    actual_cst: item.actual_sum,
                    actual_cum: item.actual_max,
                    plan_cst_per: item.plan_cst_per,
                    plan_cum_per: item.plan_cum_per,
                    actual_cst_per: item.actual_cst_per,
                    actual_cum_per: item.actual_cum_per,
                    cntrctno: item.cntrctno
                }));

                const today = new Date();
                const currentYear = today.getFullYear();
                const currentMonth = today.getMonth();

                const targetMonth = currentMonth === 0 ? 12 : currentMonth;  // 1월일 경우 12
                const targetYear = currentMonth === 0 ? currentYear - 1 : currentYear; // 1월이면 작년 12월
                const todayLabel = `${targetYear}-${targetMonth.toString().padStart(2, '0')}`;

                // 그래프의 기준(가로)
                var labels = data.map(item => item.dt);

                // 계획 월별의 데이터
                var data1 = data.map(item => Math.round(item.plan_sum / 100000));

                // 실적 월별의 데이터
                var data2 = data.map(item => Math.round(item.actual_sum / 100000));

                // 계획 누계의 데이터
                var data3 = data.map(item => Math.round(item.plan_max / 1000000));

                // 실적 누계의 데이터
                var data4 = data.map(item => Math.round(item.actual_max / 1000000));

                // 실적 누계에서 지난 달까지만 포함
                var filteredData = data.filter(item => item.dt <= todayLabel);
                var filteredLabels = filteredData.map(item => item.dt);
                var data4 = filteredData.map(item => Math.round(item.actual_max / 1000000));

                // 모든 데이터에서 최대값 찾기
                var maxValue = Math.max(...data1, ...data2, ...data3, ...data4);

                // y축의 최대값 계산 (최대값을 반올림하여 1,000 단위로 설정)
                var yAxisMax = Math.ceil(maxValue / 1000) * 1000;
                var stepSize = Math.pow(10, Math.floor(Math.log10(yAxisMax)));  // y축 범위(yAxisMax의 자릿수)

                var graphElement = document.getElementById('sCurveGraph');
                graphInstance = new Chart(graphElement, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                type: 'bar', // 막대 그래프
                                label: '{{ message("item.plan.011") }}', //계획 월별
                                data: data1,
                                backgroundColor: '#ffd865',
                                maxBarThickness: 50,
                                order: 1, // 막대 그래프 우선 순위
                                barThickness: 15, // 막대 너비 조정
                                categoryPercentage: 1.0, // 막대 간격 조정
                                barPercentage: 1.0 // 막대 너비 조정
                            },
                            {
                                type: 'bar',
                                label: '{{ message("item.plan.012") }}', //실적 월별
                                data: data2,
                                backgroundColor: '#0070bf',
                                maxBarThickness: 50,
                                order: 1,
                                barThickness: 15, // 막대 너비 조정
                                categoryPercentage: 1.0, // 막대 간격 조정
                                barPercentage: 1.0 // 막대 너비 조정
                            },
                            {
                                type: 'line', // 선형 그래프
                                label: '{{ message("item.plan.013") }}', //계획 누계
                                data: data3,
                                borderColor: '#40c37c',
                                fill: false, // 선형 그래프는 채우기 없음
                                order: 0, // 선형 그래프 우선 순위 (가장 앞에)
                                pointRadius: 0
                            },
                            {
                                type: 'line',
                                label: '{{ message("item.plan.014") }}', //실적 누계
                                data: data4,
                                borderColor: '#ff4343',
                                fill: false,
                                order: 0,
                                pointRadius: 0
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 0
                        },
                        plugins: {
                            legend: {
                                align: 'start',
                                display: true,
                                labels: {
                                    usePointStyle: true,
                                    generateLabels: function (chart) {
                                        const datasets = chart.data.datasets;
                                        return datasets.map((dataset, i) => {
                                            const isLineType = dataset.type === 'line';
                                            return {
                                                text: dataset.label,
                                                fillStyle: isLineType ? 'transparent' : dataset.backgroundColor,
                                                strokeStyle: dataset.borderColor || dataset.backgroundColor,
                                                hidden: !chart.isDatasetVisible(i),
                                                lineWidth: 2,
                                                borderDash: isLineType ? [1, 1] : [],
                                                pointStyle: isLineType ? 'line' : 'rect',
                                                datasetIndex: i
                                            };
                                        });
                                    },
                                },
                                onClick: function (e, legendItem, legend) {
                                    const index = legendItem.datasetIndex;
                                    const chart = legend.chart;
                                    // 클릭 시 데이터셋 토글 (보이기/숨기기)
                                    chart.setDatasetVisibility(index, !chart.isDatasetVisible(index));
                                    chart.update();
                                },
                            },
                            datalabels: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                min: 0,
                                max: yAxisMax,
                                ticks: {
                                    stepSize: stepSize,
                                    callback: function (value) {
                                        return value;
                                    }
                                }
                            },
                            x: {
                                ticks: {
                                    maxRotation: 0,
                                    minRotation: 0,
                                },
                                stacked: false,
                            }
                        }
                    }
                });
            }, function(response){
                console.log(response);
            })
        },
        activityGrid: function () {

            const dataSource = createDataSource({
                readData: {
                    url: "/api/dashboard/mainDashBoard/activityList",
                    method: "Get",
                    initParams: {
                        pjtNo: pjtNo,
                        cntrctNo: cntrctNo,
                    },
                }
            });

            const activityGrid = new tui.Grid({
                el: document.getElementById('activityGrid'),
                data: dataSource,
                scrollX: false,
                scrollY: true,
                contextMenu: null,
                minBodyHeight: 200,
                bodyHeight: 200,
                header: {
                    height: 72,
                    complexColumns: [
                        {
                            header: '{{ message("item.dash.050") }}', // 금일계획
                            name: 'mergeColumn1',
                            childNames: ['planStart', 'planFinish', 'period']
                        },
                        {
                            header: '{{ message("item.dash.051") }}', // 금일실행
                            name: 'mergeColumn2',
                            childNames: ['actualStart', 'actualFinish', 'days']
                        }
                    ]
                },
                columns: [
                    {
                        header: '{{ message("item.wbs.001") }}', // WBS
                        name: 'wbsNm',
                        resizable: true,
                        ellipsis: true,
                    },
                    {
                        header: '{{ message("item.activity.009") }}', // Activity
                        name: 'activityNm',
                        width: 200,
                        resizable: true,
                        ellipsis: true,
                    },
                    {
                        header: '{{ message("item.construction.029") }}', // 시작일
                        name: 'planStart',
                        align: "center"
                    },
                    {
                        header: '{{ message("item.construction.030") }}', // 완료일
                        name: 'planFinish',
                        align: "center"
                    },
                    {
                        header: '{{ message("item.construction.031") }}', // 계획소요기간
                        name: 'period',
                        align: "right"
                    },
                    {
                        header: '{{ message("item.construction.029") }}', // 시작일
                        name: 'actualStart',
                        align: "center"
                    },
                    {
                        header: '{{ message("item.construction.032") }}', // 종료일
                        name: 'actualFinish',
                        align: "center"
                    },
                    {
                        header: '{{ message("item.construction.033") }}', // 소요일수
                        name: 'days',
                        align: "right"
                    },
                    {
                        header: '{{ message("item.dash.052") }}', // 금일실행률
                        name: 'activityratio',
                        align: "center"
                    },
                    {
                        header: '{{ message("item.app.018") }}', // 상태
                        name: 'state',
                        align: "center"
                    }
                ],
            });

            refreshGrid(activityGrid);
        },
        govsplyMtrlGrid: function () {
            const dataSource = createDataSource({
                readData: {
                    url: "/api/dashboard/mainDashBoard/govsplyMtrlList",
                    method: "Get",
                    initParams: {
                        pjtNo: pjtNo,
                        cntrctNo: cntrctNo,
                    },
                }
            });

            const govsplyMtrlGrid = new tui.Grid({
                el: document.getElementById('govsplyMtrlGrid'),
                data: dataSource,
                scrollX: false,
                scrollY: true,
                contextMenu: null,
                minBodyHeight: 200,
                bodyHeight: 200,
                columns: [
                    {
                        header: '{{ message("item.dash.053") }}', // 관급자재 품명
                        name: 'dtlCnsttyNm',
                        resizable: true,
                        ellipsis: true,
                    },
                    {
                        header: '{{ message("item.projectcost.003") }}', // 규격
                        name: 'specNm',
                        width: 450,
                        resizable: true,
                        ellipsis: true,
                    },
                    {
                        header: '{{ message("item.info.036") }}', // 진행상태
                        name: 'state'
                    }
                ],
            });
            refreshGrid(govsplyMtrlGrid);
        },
        makePhotoSlide: function () {
            // Slick slide
            var $slideTodayPhoto = $('.photo_list');
            var enableNav = true;
            var speed = 1000;

            $slideTodayPhoto.slick({
                arrows: true,
                prevArrow: $('.photo_slick_wrap .prev'),
                nextArrow: $('.photo_slick_wrap .next'),
                dots: false,
                infinite: false,
                slidesToShow: 5,
                slidesToScroll: 5,
                autoplay: false,
                speed: speed,
                draggable: false
            });

            setDefaultImage();
        },
        openEcoFriendly: function (ecoTpCd) {
            const width = 1400;
            const height = 600;
            let left = Math.ceil((window.screen.width - width) / 2);
            left += window.screenLeft; // 듀얼 모니터일 때
            const top = Math.ceil((window.screen.height - height) / 2);
            window.open(`/dashboard/eco-friendly?ecoTpCd=${ecoTpCd}`, '_blank', `width=${width},height=${height},left=${left},top=${top}`);
        },

        openImagePopup(imageSrc) {
            var img = new Image();
            img.src = imageSrc;
            img.onload = function () {
                var width = img.width;
                var height = img.height;
                window.open(imageSrc, 'popup', `width=${width},height=${height},scrollbars=yes`);
            };
        }
    }

    $(function () {
        gaia.create({
            $init: function ($params) {
                $("#cctv_loading").show();
                setTimeout(function () {
                    $("#cctv_loading").hide(); $('#cctv_overlay').css('backgroundColor', 'transparent');
                }, 4000);

                /**
                 * 2025-02-02
                 * #795 워크샵 피드백 - [GAIA] 진입 시에만 메인보드에 CMIS 링크가 활성화 되어야 한다.
                 */
                if (isGAIA()) {
                    let $cmis_link = $('.link_btn._cmis');
                    $cmis_link.show();
                }

                dashboard.init()
                gaiaPortal.navMenuInit('MAIN', '{{ message("item.dash.054") }}');

                gaia.loaded = true
            }
        });
    });
</script>
{% endblock footer_script %}