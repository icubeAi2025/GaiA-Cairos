<style>
    #detail {
        display: block;
        padding: 10px;
        text-align: center;
    }
    .info {
        display: flex;
        justify-content: center;
    }

    textarea[readonly] {
        overflow: auto !important;   /* ✅ 강제 적용 */
    }
</style>
<div id="input" style=" position: sticky; top: 20px;">
    <div class="group">
        <h4 class="conts_s-tit collapse_head">
            {{ message('item.com.087') }}
            <div class="btn_group iconbtns" style="margin-right: 7px;" id="responseDate">
            </div>
            <button type="button" class="icon_btn collapse_btn">
                <i class="ic ic-arrow"></i>
                <span class="blind">{{ message('item.dfccy.038') }}</span>
            </button>
        </h4>
        <div class="collapse collapse_body">
            <div class="btn_area s_default _outline" style="margin-bottom: .35em;" id="inputBtn">
                {{ btnHtml | raw }}
            </div>
            <div class="form_box" id="inputForm">
                <!-- detail -->
                <div class="group">
                    <div class="row text_center" id="detail" style="display: none;">{{ message('msg.dfccy.004') }}</div>
                </div>
                <form name="form" id="form" style="display: none;">
                    <div class="group">
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label requireCheck">{{ message('item.dfccy.039') }}</div>
                                <div class="form_data">
                                    <span class="selectbox" id="selectBox">
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.dsgn.022') }}</div>
                                <div class="form_data">
                                    <textarea id="rplyCntnts" class="form-control maxlength" maxlength="1024"></textarea>
                                </div>
                            </div>
                        </div>
                        <!-- row -->
                        <div class="row">
                            <div class="col">
                                <div class="form_label">{{ message('item.com.062') }}</div> <!-- 첨부파일 -->
                                <div class="form_data">
                                    <div class="attach-component" id="designResponses-fileAttach"></div>
                                    {% include "sub/file_attach_component" %}
                                </div>
                            </div>
                        </div>
                        <!-- 도면 사진 -->
                        <div class="s_conts">
                            <span class="tree_route">{{ message('item.dsgn.023') }}</span>
                            <!-- S: Slick Slider -->
                            <div class="process_photo">
                                <dl class="dl_box p_photo" id="dwgContainer" style="display: none;">
                                    <dd class="item_dd">
                                        <figure class="p_photo_info">
                                            <img src="" id="dwgImagePreview" />
                                            <figcaption>
                                                <p class="desc" style="height: auto;">
                                                    <textarea name="dwgDscrpt" id="dwgDscrpt"
                                                              class="form-control maxlength" maxlength="1024"></textarea>
                                                </p>
                                            </figcaption>
                                        </figure>
                                    </dd>
                                </dl>
                                <input type="file" accept="image/*" id="dwgFileInput" name="dwgFileInput"
                                       style="display: none" />
                                <div class="slick_nav">
                                    <div class="btn_area">
                                        <div class="btn_group _outline">
                                            <button type="button" class="btn icon_btn" onclick="dwgFile.dwgAdd()">
                                                <i class="ic ic-picture-one"></i>
                                                <span class="blind">{{ message('btn.001') }}</span>
                                            </button>
                                            <button type="button" class="btn icon_btn" onclick="dwgFile.dwgRemove();">
                                                <i class="ic ic-delete"></i>
                                                <span class="blind">{{ message('btn.002') }}</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="/assets/js/validation.js"></script>
<script>
    var fileAttachComponent = null;
    var response = {
        virtualFiles: [],
        orgDwg:null,
        deleteDwgNo: null,

        init: function () {
            console.log("[LOAD]DESIGN_RESPONSES_CU");
            if(dwgFile.meta){
                gaiaCommon.post("/resource/delete",dwgFile.meta,(response)=>{
                    if(response.ok){
                        dwgFile.init()
                    }
                })
            }
            else{
                dwgFile.init();
            }
            if(fileAttachComponent) {
                fileAttachComponent.destroy();
                fileAttachComponent = null;
            }
            let resSeq = page.currentResSeq;
            if (resSeq == "") {
                $("#deleteBtn").hide()
            }
            response.loadData();
            fileAttachComponent = FileAttachComponent.init({
                id:'designResponses-fileAttach',
                maxUploadFileSize:25,
                failCount:false
            })
        },

        save: function () {
            const rplyCd = $("#rplyCd").val();
            const rplyCntnts = $("#rplyCntnts").val();
            const dwgDscrpt = $("#dwgDscrpt").val();

            if (!rplyCd) {
                gaiaCommon.customAlert("{{ message('msg.dfccy.005') }}");
                return false;
            }

            let data = {
                cntrctNo: $("#cntrctNo").val(),
                resSeq: page.currentResSeq,
                dsgnNo: page.currentDsgnNo,
                rplyCd: rplyCd,
                rplyCntnts: rplyCntnts,
                atchFileNo:response.data.atchFileNo,
                dwgDscrpt: dwgDscrpt,
                dwgNo:response.orgDwg?.dwgNo,
                deleteDwgNo:response.deleteDwgNo,
                removedFiles: fileAttachComponent.state.deletedFiles,
            };

            const form = document.getElementById("form");
            const formData = new FormData();

            formData.append(
                "data",
                new Blob([JSON.stringify(data)], {
                    type: "application/json",
                })
            );
            formData.delete('files');
            for(const file of fileAttachComponent.state.uploadedFiles){
                if(file.success){
                    if(file.realFile){
                        formData.append('files', file.realFile);
                    }
                }
            }

            uploadFile(dwgFile.resizedFile,(resp)=>{
                dwgFile.meta = resp.details.metas[0];

                // 도서 이미지
                if (dwgFile.meta) {
                    formData.append('dwgFile',new Blob([JSON.stringify(dwgFile.meta)], {
                        type: "application/json",
                    }));
                }

                gaiaCommon.postForm(`/api/design/responses/save`,formData,function (data) {
                    if (data.details.saveType == "update") {
                        gaiaCommon.customAlert("{{ message('msg.007') }}");
                    } else {
                        gaiaCommon.customAlert("{{ message('msg.005') }}");
                    }

                    page.table(currentPage, page.currentDsgnNo);

                    // page.init();
                },function(error){
                    console.error(`설계 검토 답변 추가/수정 실패, /api/design/responses/save, PARAMS :`,formData,error);
                })
            })
        },

        loadData: function () {
            gaiaCommon.LoadingOverlay('body', true);
            const loadDataParam = {
                cntrctNo: $("#cntrctNo").val(),
                dsgnPhaseNo: dsgnPhaseNo,
                dsgnNo: page.currentDsgnNo,
                resSeq: page.currentResSeq
            };

            console.log("추가/수정 폼 요청 파라미터: ", loadDataParam);

            gaiaCommon.post(`/api/design/responses/detail`,loadDataParam,function (data) {
                const phase = data.details.phase[0];
                const today = new Date().setHours(0, 0, 0, 0);
                const startDate = new Date(phase.response_bgn_date).setHours(0, 0, 0, 0);
                const endDate = new Date(phase.response_end_date).setHours(0, 0, 0, 0);
                const isEnded = endDate < today;
                const statusText = isEnded ? "{{ message('item.dfccy.004') }}" : startDate > today ? "{{ message('item.dfccy.002') }}" : "{{ message('item.dfccy.003') }}";

                $("#responseDate").html(`${phase.response_bgn_date} ~ ${phase.response_end_date} <div style='color: red; padding:.35em;'>[ ${statusText} ]</div>`);
                $("#inputBtn").toggle(!isEnded);

                // 답변 데이터 처리
                const responseData = data.details.response;
                response.data = responseData;
                const responseFiles = data.details.files;
                const hasResponse = responseData && responseData.rplyCd != null;
                $("#form").toggle(!isEnded || hasResponse);
                $("#detail").toggle(isEnded && !hasResponse);
                $(".requireCheck").toggleClass("required", !hasResponse);

                if (hasResponse) {
                    $("#rplyCd").val(responseData.rplyCd);
                    $("#rplyCntnts").val(gaiaCommon.decodeSafeText(responseData.rplyCntnts));


                    fileAttachComponent.setOrgFiles(data.details.files);
                    fileAttachComponent.render();
                }

                // 도면 파일 미리보기
                const responseDwgFiles = data.details.dwgFiles;
                if (responseDwgFiles && responseDwgFiles.length > 0) {
                    response.orgDwg = data.details.dwg;
                    const rawPath = responseDwgFiles[0].fileDiskPath || '';
                    const normalizedPath = rawPath.replace(/\\/g, '/');
                    const trimmedPath = normalizedPath.replace(/^.*\/upload/, '/upload');

                    const fileUrl = trimmedPath + "/" + responseDwgFiles[0].fileDiskNm;

                    $('#dwgImagePreview').attr('src', fileUrl).css({ display: 'block', maxWidth: 'fit-content' });
                    $('#dwgContainer').css({ display: 'block' });
                    $('#dwgDscrpt').val(gaiaCommon.decodeSafeText(data.details.dwg.dwgDscrpt));
                    $('#dwgimgBox').css('min-height', '300px');
                }

                $(".readList").toggle(isEnded);
                $(".modifyList").toggle(!isEnded);
                $("#inputForm").toggleClass("readonly", isEnded);

                gaiaCommon.LoadingOverlay('body', false);
            },function(error){
                console.error(`설계 검토 의견 답변 초기 데이터 로딩 실패, /api/design/responses/detail, PARAMS : ${loadDataParam}`,error);
                gaiaCommon.LoadingOverlay('body', false);
            })
        },

        delete: function () {
            let dsgnNo = page.currentDsgnNo;
            let resSeq = page.currentResSeq;
            let data = {
                ["responsesList"]: [{ resSeq, dsgnNo }]
            };

            gaiaCommon.customConfirm("{{ message('item.dfccy.032') }}", " {{ message('item.dfccy.028') }}", "{{ message('msg.009') }}", function () {
                gaiaCommon.post(`/api/design/responses/delete`,data,function (data) {

                    gaiaCommon.customAlert("{{ message('msg.006') }}");

                    page.table(currentPage, page.currentDsgnNo);
                    gaiaCommon.checkAuth("DM_RESPONSE_D", () => {
                        // 저장 후, 화면 업데이트.
                        $("#popup").load(`/design/responsesForm?pjtNo=${pjtNo}&cntrctNo=${$("#cntrctNo").val()}`);
                    });


                    // page.init();

                },function (xhr) {
                    console.error(`설계 검토 답변 삭제하기 실패, /api/design/responses/delete, PARAMS : ${data}`,error);
                })
            })
        },

        makeSelectBox: function () {
            let selectData =
                {
                    cmnGrpCd: "f1c22c3b-b5b5-43a9-acdb-fa20b7d13234",
                    selectBoxId: "rplyCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "==선택==",
                    paramNm: "rplyCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "",
                }

            gaiaCommon.post("/api/util/make-selectBox",[selectData],function (data) {
                let returnMap = data.details.returnMap;

                let addAppLineContent = document.getElementById(
                    selectData.selectBoxId
                );
                let categorySelect = `${returnMap[selectData.selectBoxId]}`;
                if (addAppLineContent) {
                    addAppLineContent.innerHTML =
                        returnMap[selectData.selectBoxId];
                }
                $(`#selectBox`).append(categorySelect);

            },function (xhr, status, error) {
                console.error(`검토 의견 답변 드롭다운 생성 실패, /api/util/make-selectBox, PARAMS : ${[selectData]}`,error);
            })
        },


    };


    var cTargetBtn = $(".collapse_btn");
    var cTargetArea = $(".collapse_body");
    $(cTargetBtn).click(function () {
        $(this).toggleClass('collapsed');
        $(this).parent().next(cTargetArea).slideToggle();
    });
    $(function () {
        response.makeSelectBox();
        response.init()
        gaia.loaded = true;
    })
    function uploadFile(file,callback){
        const formData = new FormData();
        formData.append('files', file);
        gaiaCommon.postForm("/resource/upload",formData,callback)
    }
</script>