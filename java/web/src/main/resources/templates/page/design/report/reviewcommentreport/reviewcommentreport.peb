{% extends 'layout/base_content' %} {% block head %}
<style>
    #dsgn_detail_list_tb .more_data dt {
        width: 125px;
        margin: 5px;
    }

    #dsgn_detail_list_tb .more_data dd {
        width: calc(100% - 155px - .5em);
        margin: 5px;
    }

    .ty_list h2 {
        margin-bottom: 0;
    }

    .header_line {
        border-top: 2px solid var(--color-default);
    }

    .name_color {
        font-size: medium;
        color: #548554;
        font-weight: 600;
        margin-right: 10px;
    }

    .sub_name_color {
        /* font-size: small; */
        color: #548554;
        font-weight: 500;
        margin-right: 10px;
    }

    .author-date {
        display: flex;
        justify-content: space-between;
        /* dt-dd 묶음 간격 */
        align-items: center;
        margin: 20px;
    }

    .author-date dt {
        font-weight: bold;
        min-width: 100px;
        /* 라벨 최소 너비 */
        text-align: left;
    }

    .author-date dd {
        margin: 0;
        min-width: 150px;
        /* 값 최소 너비 */
        text-align: left;
    }

    .dwg_info {
        display: flex;
        width: 100%;
        gap: 0.4rem;
        /* dt-dd 묶음 간격 */
        align-items: center;
    }

    .dwg_info dt {
        font-weight: bold;
        min-width: 125px;
        /* 라벨 최소 너비 */
        text-align: left;
    }

    .dwg_info dd {
        margin: 0;
        min-width: 150px;
        /* 값 최소 너비 */
        text-align: left;
    }

    /* dt와 dd를 같은 줄에 배치 */
    .dwg_info dt,
    .author-date dd {
        display: inline-block;
    }

    #dsgn_detail_list_tb .attach_area {
        border: 1px solid var(--tb-bd);
        border-radius: 4px;
        display: flex;
        justify-content: center;
        height: max-content;
        min-height: 75px;
    }

    #dsgn_detail_list_tb .file_list {
        height: max-content;
    }


    .toolbar {
        display: flex;
        justify-content: center;
        /* 가운데 정렬 */
        align-items: center;
    }

    #dsgn_detail_btn_area {
        display: flex;
        width: 100%;
        justify-content: space-between;
        /* 양쪽 정렬 */
        align-items: center;
    }

    .tui-pagination {
        flex-grow: 1;
        /* 가운데 정렬을 위한 유동적인 공간 차지 */
        display: flex;
        justify-content: center;
        /* 페이징 요소 중앙 정렬 */
        align-items: center;
    }

    #detail-close-popup {
        margin-left: auto;
        /* 오른쪽 끝으로 이동 */
    }

    #clear {
        background: var(--color-default);
        border-radius: 50%;
        color: white;
        font-size: 10px;
        position: absolute;
        top: calc((100% - 1.7em) / 2);
        right: 4em;
        z-index: 1;
    }
</style>
{% endblock %} {% block content %}
<section class="contents_wrap ty1">
    <article class="conts_area">
        <div class="conts">
            {% include "page/design/tool/common_select" %}
            <div class="conts_grid" id="dsgn_list">
                <div class="search_wrap">
                    <span class="selectbox has_clear" id="dsgnCdContainer">
                        <span class="sty_ip" onclick="$('#dsgnCdContainer .dropdown').toggleClass('on')"
                            id="dsgnCdSelect">{{ message('item.dsgn.007') }}</span> <!-- 검토 분류 -->
                        <button class=" icon_btn _clear" onclick="page.selectClear('dsgnCd','dsgnAllCheck');  "
                            style="display: none;">
                            <i class="ic ic-close"></i>
                            <span class="blind">{{ message('item.com.085') }}</span>
                        </button>
                        <div class="dropdown">
                            <ul class="list_sty dropdown_list" id="dsgnCdList">
                            </ul>
                        </div>
                    </span>
                    <span class="selectbox has_clear" id="designPhaseContainer">
                        <span class="sty_ip" onclick="$('#designPhaseContainer .dropdown').toggleClass('on')"
                            id="designPhaseSelect">{{ message('item.dsgn.027') }}</span> <!-- 설계 단계 -->
                        <button class=" icon_btn _clear"
                            onclick="page.selectClear('designPhase','designPhaseAllCheck');  " style="display: none;">
                            <i class="ic ic-close"></i>
                            <span class="blind">{{ message('item.com.085') }}</span>
                        </button>
                        <div class="dropdown">
                            <ul class="list_sty dropdown_list" id="dsgnPhaseList">
                            </ul>
                        </div>
                    </span>
                    <span class="selectbox has_clear" id="rgstrContainer">
                        <span class="sty_ip" onclick="$('#rgstrContainer .dropdown').toggleClass('on')"
                            id="rgstrSelect">{{ message('item.dsgn.008') }}</span> <!-- 검토자 -->
                        <button class=" icon_btn _clear" onclick="page.selectClear('rgstr','rgstrAllCheck');  "
                            style="display: none;">
                            <i class="ic ic-close"></i>
                            <span class="blind">{{ message('item.com.085') }}</span>
                        </button>
                        <div class="dropdown">
                            <ul class="list_sty dropdown_list" id="rgstrList">
                            </ul>
                        </div>
                    </span>
                    <!-- searchbox -->
                    <div class="searchbox_wrap">
                        <!-- 검색어 입력창 -->
                        <input type="text" id="searchText" placeholder="ID,제목,검토자"
                            onkeypress="if(event.keyCode == 13){page.search();}">
                        <!-- 상세검색 아이콘 -->
                        <button type="button" class="btn icon_btn filter" onclick="page.detailSearchOpen();">
                            <i class="ic ic-setting-config"></i>
                            <span class="blind">{{ message('item.com.044') }}</span>
                        </button>
                        <!-- 일반검색 아이콘 -->
                        <button type="button" class="icon_btn search" onclick="page.search()">
                            <i class="ic ic-search"></i>
                            <span class="blind">{{ message('btn.014') }}</span>
                        </button>
                        <!-- 상세검색 검색창 ("lay_pop on"일때 보여짐) -->
                        <div class="lay_pop" data-name="search_detail">
                            <button type="button" class="lay_pop_close icon_btn" onclick="page.detailSearchClose()">
                                <i class="ic ic-close"></i>
                                <span class="blind">{{ message('item.com.037') }}</span>
                            </button>

                            <div class="form_box ">
                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">{{ message('item.dsgn.007') }}</div>
                                        <div class="form_data">
                                            <span class="selectbox" id="selectBox1">
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- 설계단계 -->
                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">설계 단계</div>
                                        <div class="form_data">
											<span class="selectbox has_clear" id="detailPhaseContainer" style="width: 100%">
												<span class="sty_ip" onclick="$('#detailPhaseContainer .dropdown').toggleClass('on')" id="detailPhaseSelect">설계단계를 선택해주세요</span>
												<button class="icon_btn _clear" type="button" id="clear" onclick="page.selectClear('detailPhase','detailPhaseAllCheck');" style="display: none;">
													<i class="ic ic-close"></i>
													<span class="blind">{{ message('item.com.085') }}</span>
												</button>

												<div class="dropdown">
													<ul class="list_sty dropdown_list" id="detailPhaseList">
													</ul>
												</div>
											</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">{{ message('item.dsgn.008') }}</div>
                                        <div class="form_data">
                                            <input type="text" name="rgstr" id="detailRgstr" class="">
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label"></div>
                                        <div class="form_data detailSearch">
                                            <label class="form_check">
                                                <input class="check_mark" type="checkbox" name="checkbox"
                                                    id="detailMyRplyYn" value="Y">
                                                <span class="check_label">
                                                    {{ message('item.dfccy.021') }}
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">{{ message('item.dsgn.009') }}</div>
                                        <div class="form_data">
                                            <div class="item_group">
                                                <!-- 숫자만 입력 -->
                                                <input type="text" name="startDsgnNo" id="startDsgnNo" class="number">
                                                ~
                                                <input type="text" name="endDsgnNo" id="endDsgnNo" class="number">
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">{{ message('item.dsgn.010') }}</div>
                                        <div class="form_data">
                                            <span class="selectbox" id="selectBox2">
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">평가 결과</div>
                                        <div class="form_data">
                                            <span class="selectbox" id="selectBox3">
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">백체크 결과</div>
                                        <div class="form_data">
                                            <span class="selectbox" id="selectBox4">
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label">{{ message('item.dfccy.025') }}</div>
                                        <div class="form_data">
                                            <div class="item_group">
                                                <!-- 직접선택시 input type="date"를 "text"로 변경 -->
                                                <input type="date" name="startRecentDt" id="startRecentDt" class="date"
                                                    data-date-format="DD/MM/YYYY"
                                                    onchange="page.setMinDate('startRecentDt', 'endRecentDt')">
                                                ~
                                                <input type="date" name="endRecentDt" id="endRecentDt" class="date"
                                                    data-date-format="DD/MM/YYYY">
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label"></div>
                                        <div class="form_data detailSearch">
                                            <label class="form_check">
                                                <input class="check_mark" type="checkbox" name="checkbox"
                                                    id="detailIsuYn" value="Y">
                                                <span class="check_label">
                                                    {{ message('item.dsgn.011') }}
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label"></div>
                                        <div class="form_data detailSearch">
                                            <label class="form_check">
                                                <input class="check_mark" type="checkbox" name="checkbox"
                                                    id="detailLesnYn" value="Y">
                                                <span class="check_label">
                                                    {{ message('item.dsgn.012') }}
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <div class="form_label"></div>
                                        <div class="form_data detailSearch">
                                            <label class="form_check">
                                                <input class="check_mark" type="checkbox" name="checkbox" id="atachYn"
                                                    value="Y">
                                                <span class="check_label">
                                                    {{ message('item.dfccy.027') }}
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="btn_group _fill s_small jc_e">
                                <button type="button" class="btn" onclick="page.detailSearch()">
                                    {{message('btn.014') }}
                                </button>
                                <button type="button" class="btn" onclick="page.detailSearchReset()">
                                    {{message('btn.024')}}
                                </button>
                            </div>
                        </div>
                    </div>

                </div>
                <!-- // E: search wrap ---------------------------------------------- -->

                <!-- S: 상세검색에서 선택된 항목 표시 -->
                <p class="selected_list">

                </p>
                <!-- E: 상세검색에서 선택된 항목 표시 -->

                <div class="toolbar">
                    <div class="btn_area s_default _outline">
                        <button type="button" class="btn _fill" id="" onclick="">레포트</button>
                    </div>

                    <div class="etc_info">
                        <span class="folder_doc">
                            <span class="">{{ message('item.com.059') }}</span> <!-- 전체 -->
                            <b class="num" id="all_cnt">0</b>
                        </span>
                        <span class="folder_doc">
                            <span class="">{{ message('item.dfccy.015') }}</span> <!-- 종결 -->
                            <b class="num" id="end_cnt">0</b>
                        </span>
                        <span class="item_doc">
                            <span class="">{{ message('item.dfccy.012') }}</span> <!-- 미결 -->
                            <b class="num" id="ing_cnt">0</b>
                        </span>
                    </div>
                </div>
                <div class="grid" id="report_grid"></div>
            </div>
            <!-- ////////////// 상세보기 /////////////////-->
            <div id="popup">

            </div>
        </div>
    </article>
</section>
{% endblock content %} {% block footer_script %}
<script>
    let urlParams = new URLSearchParams(window.location.search);
    let searchForm = {};

    // 일반 검색용
    let searchText;

    let detailDsgnNo;
    let rowKey;
    let firstDsgnNo;
    let lastDsgnNo;
    let lastRow;

    $(function () {
        gaia.create({
            $init: function ($params) {
                page.initializeSelectBoxes();
                gaiaPortal.navMenuInit("M080202", "검토 의견 보고서");
                select.init();

                gaia.loaded = true
            }
        })
    })

    function handleIconClick(rowData) {
        const dsgnNo = rowData.dsgnNo;
        const cntrctNo = rowData.cntrctNo;

        if (!dsgnNo) {
            gaiaCommon.customAlert("설계 검토 번호 정보가 없습니다.");
            return;
        }

        const width = 1000;
        const height = 450;
        let left = Math.ceil((window.screen.width - width) / 2);
        left += window.screenLeft;
        const top = Math.ceil((window.screen.height - height) / 2);

        detailDsgnNo = dsgnNo;

        gaiaCommon.checkAuth("DM_REPORT_R_05", () => {
            // $("#popup").load(`/design/reviewcommentreportDetail?pjtNo=${pjtNo}&cntrctNo=${cntrctNo}&type=d`);
            $("#popup").load(`/design/reviewcommentreportDetail?type=d`);
            $("#dsgn_list").css({ height: 0, overflow: 'hidden' });
        });
    }

    var reportGrid = new tui.Grid({
        el: document.getElementById("report_grid"),
        scrollX: true,
        scrollY: true,
        bodyHeight: 480,
        contextMenu: null,
        header: {
            height: 100,
            complexColumns: [
                {
                    header: '{{ message("item.dfccy.008") }}', // 답변
                    name: 'reply',
                    childNames: ['rplyChgDt', 'rplyCdNm']
                },
                {
                    header: '{{ message("item.dsgn.005") }}', // 평가
                    name: 'apprer',
                    childNames: ['apprerRgstDt', 'apprerCdNm']
                },
                {
                    header: '{{ message("item.dsgn.006") }}', // 백체크
                    name: 'backchk',
                    childNames: ['backchkRgstDt', 'backchkCdNm']
                },

            ],
        },
        columns: [
            {
                header: "{{ message('item.dfccy.019') }}", // ID
                name: 'dsgnNo',
                sortable: true,
                sortingType: 'asc',
                resizable: true,
                align: 'center',
                width: 130,
                renderer: {
                    type : window.IconRenderer,
                    options:[
                        {
                            type:"newWindow",
                            isHover:true,
                            align:"right",
                            absolute:true,
                            success:(rowData) => {
                                handleIconClick(rowData);
                            }
                        }
                    ]
                }
            },
            { name: 'rgstrNm', header: "{{ message('item.dsgn.008') }}", align: 'center', sortable: true, sortingType: 'asc', width: 100 }, // 검토자
            { name: 'rgstDt', header: "설계등록일", align: 'center', width: 120 }, //설계등록일
            { name: 'title', header: "{{ message('item.com.060') }}", align: 'left', resizable: true, ellipsis: true, width: 250 }, // 제목
            { name: 'dsgnPhaseNm', header: "{{ message('item.dsgn.025') }}", align: 'left', resizable: true, width: 250 }, // 설계 단계
            { name: 'dsgnNm', header: "{{ message('item.dsgn.007') }}", align: 'center', width: 100 }, // 검토 분류
            { name: 'rplyChgDt', header: "{{ message('item.dsgn.013') }}", align: 'center', resizable: true, ellipsis: true }, // 최근 입력 일자
            { name: 'rplyCdNm', header: "{{ message('item.dsgn.014') }}", align: 'center', resizable: true, ellipsis: true }, // 결과
            { name: 'apprerRgstDt', header: "{{ message('item.dsgn.013') }}", align: 'center', resizable: true, ellipsis: true }, // 최근 입력 일자
            { name: 'apprerCdNm', header: "{{ message('item.dsgn.014') }}", align: 'center', resizable: true, ellipsis: true }, // 결과
            { name: 'backchkRgstDt', header: "{{ message('item.dsgn.013') }}", align: 'center', resizable: true, ellipsis: true }, // 최근 입력 일자
            { name: 'backchkCdNm', header: "{{ message('item.dsgn.014') }}", align: 'center', resizable: true, ellipsis: true }, // 결과
        ],
    });


    // 그리드 업데이트 시 통계 처리
    this.reportGrid.on('onGridUpdated', (ev) => {
        const allCount = ev.instance.getData().length; // 전체 행 개수
        let endCount = 0;  // 종결 개수 
        let ingCount = 0;  // 미결 개수 


        // 모든 행을 순회하며 개수 카운트
        ev.instance.getData().forEach(row => {
            if (row.backchkCd === '0402') endCount++; // 종결 개수 증가
            if (row.backchkCd === '0401') ingCount++; // 미결 개수 증가
        });

        // HTML 요소 업데이트
        document.getElementById("all_cnt").innerText = allCount;
        document.getElementById("end_cnt").innerText = endCount;
        document.getElementById("ing_cnt").innerText = ingCount;

        const gridData = reportGrid.getData();

        if (gridData.length > 0) {
            firstDsgnNo = gridData[0].dsgnNo;
            lastDsgnNo = gridData[gridData.length - 1].dsgnNo;
            lastRow = gridData.length - 1;
        }
    });


    var page = {
        init: function () {
            page.makeSearchSelectBox();

            let dsgnCd = urlParams.get("dsgnCd") ?? null;
            let dsgnPhaseNo = urlParams.get("dsgnPhaseNo") ?? null;
            let rplyStatus = urlParams.get("rplyStatus") ?? null;
            let rplyCd = urlParams.get("rplyCd") ?? null;
            let apprerCd = urlParams.get("apprerCd") ?? null;
            let backchkCd = urlParams.get("backchkCd") ?? null;

            if(dsgnCd || dsgnPhaseNo || rplyStatus || rplyCd || apprerCd || backchkCd) {
                if(dsgnCd) $("select[name='detailDsgnCd']").val(dsgnCd);
                if(rplyStatus) $("select[name='detailRplyStatus']").val(rplyStatus);
                if(rplyCd) $("select[name='detailRplyCd']").val(rplyCd);
                if(apprerCd) $("select[name='detailApprerCd']").val(apprerCd);
                if(backchkCd) $("select[name='detailBackchkCd']").val(backchkCd);
                if(dsgnPhaseNo) {
                    let $chkBox = $(`#detailPhaseList input.check_mark[value="${dsgnPhaseNo}"]`);
                    $chkBox.prop('checked', true);
                    let labelText = $chkBox.closest('label').find('.check_label').text();
                    $('#detailPhaseSelect').text(labelText);
                }
                page.detailSearch();
            }else{
                page.read();
            }

        },
        read() {
            $.ajax({
                url: `/api/design/reviewcommentreport/list`,
                method: 'POST',
                contentType: "application/json",
                data: JSON.stringify({   // 🔥 `data`에 JSON으로 변환해서 넣기
                    pjtNo: pjtNo,
                    cntrctNo: $("#cntrctNo").val(),
                    ...searchForm

                }),
                success: function (data) {
                    var report = data.details.report;
                    reportGrid.resetData(report);
                    refreshGrid(reportGrid);
                }
            });
        },

        // 검색
        detailSearchOpen() {
            $("[data-name='search_detail']").addClass("on");
        },

        detailSearchClose() {
            $("[data-name='search_detail']").removeClass("on");
        },

        // 일반검색
        search() {
            // searchForm = {};

            let dsgnCdList = searchForm.dsgnCdList ?? [];
            let dsgnPhaseNoList = searchForm.dsgnPhaseNoList ?? [];
            let rgstrIdList = searchForm.rgstrIdList ?? [];

            $("#dsgnPhaseList").find("input.check_mark:checked").each(function () {
                if ($(this).attr("id") !== "designPhaseAllCheck") {
                    const dsgnPhaseNo = $(this).val().trim();
                    if (dsgnPhaseNo) {
                        dsgnPhaseNoList.push(dsgnPhaseNo);
                    }
                }
            });
            $("#dsgnCdList").find("input.check_mark:checked").each(function () {
                if ($(this).attr("id") !== "dsgnCdAllCheck") {
                    const dsgnCd = $(this).val().trim();
                    if (dsgnCd) {
                        dsgnCdList.push(dsgnCd);
                    }
                }
            });
            $("#rgstrList").find("input.check_mark:checked").each(function () {
                if ($(this).attr("id") !== "rgstrAllCheck") {
                    const rgstrId = $(this).val().trim();
                    if (rgstrId) {
                        rgstrIdList.push(rgstrId);
                    }
                }
            });
            searchText = $('#searchText').val();

            searchForm.keyword = searchText;
            searchForm.dsgnPhaseNoList = dsgnPhaseNoList;
            searchForm.dsgnCdList = dsgnCdList;
            searchForm.rgstrIdList = rgstrIdList;

            page.read();

        },

        //상세검색
        detailSearch() {
            searchText = "";
            $('#searchText').val('')
            page.selectClear('rgstr', 'rgstrAllCheck');
            page.selectClear('designPhase', 'designPhaseAllCheck');
            page.selectClear('dsgnCd', 'dsgnAllCheck');

            // 상세 검색 조건 표시 on

            $('.selected_list').addClass('on');
            $('.selected_list').children().remove();

            const dsgnCd = $("#detailDsgnCd").val();
            const rgstr = $("#detailRgstr").val();
            const myRplyYn = $("input[id='detailMyRplyYn']:checked").val();
            const startDsgnNo = $('#startDsgnNo').val();
            const endDsgnNo = $('#endDsgnNo').val();
            const rplyStatus = $("#detailRplyCd").val();
            const apprerCd = $("#detailApprerCd").val();
            const backchkCd = $("#detailBackchkCd").val();
            const isuYn = $("input[id='detailIsuYn']:checked").val();
            const lesnYn = $("input[id='detailLesnYn']:checked").val();
            const atachYn = $("input[id='atachYn']:checked").val();
            const startRecentDt = $("#startRecentDt").val();
            const endRecentDt = $("#endRecentDt").val();
            const dsgnPhaseNoList = $("input[name='check']:checked").map(function () { return $(this).val(); }).get();


            searchForm = {
                dsgnCd: dsgnCd && dsgnCd !== "all" ? dsgnCd : null,
                rgstr: rgstr ?? null,
                myRplyYn: myRplyYn ?? null,
                startDsgnNo: startDsgnNo || null,
                endDsgnNo: endDsgnNo || null,
                rplyStatus: rplyStatus && rplyStatus !== "all" ? rplyStatus : null,
                apprerCd: apprerCd && apprerCd !== "all" ? apprerCd : null,
                backchkCd: backchkCd && backchkCd !== "all" ? backchkCd : null,
                startRecentDt: startRecentDt ?? null,
                endRecentDt: endRecentDt ?? null,
                isuYn: isuYn ?? null,
                lesnYn: lesnYn ?? null,
                atachYn: atachYn ?? null,
                dsgnPhaseNoList: dsgnPhaseNoList ?? null,
            }

            console.log("설계 단계 값: ", dsgnPhaseNoList);

            // 결함 분류
            if (dsgnCd && dsgnCd !== "all") {

                let dsgnCdText = $("#detailDsgnCd option:selected").text();

                let keywordHtml = `
					<span class="selected_item detailDsgnCd">
						<span class="item dfCd">${dsgnCdText}</span>
						<input type="hidden" name="detailDsgnCd" data-name="dsgnCd" value="${dsgnCd}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailDsgnCd')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            //설계 단계
            if (dsgnPhaseNoList.length > 0) {
                let phaseNm = $('#detailPhaseSelect').text();
                let keywordHtml = `
						<span class="selected_item detailPhase">
							<span class="item phase">${phaseNm}</span>
							<input type="hidden" name="detailPhaseNm" data-name="dsgnPhaseNoList" value="${phaseNm}">
							<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailPhase')">
								<i class="ic ic-close"></i>
								<span class="blind">{{ message('btn.002') }}</span>
							</button>
						</span>
					`;
                $('.selected_list').append(keywordHtml);
            }

            // 작성자
            if (rgstr) {
                $('select[name="rgstr_search_select"]').val(rgstr); // 그리드 작성자 값 설정.

                let keywordHtml = `
					<span class="selected_item detailRgstr">
						<span class="item rgstr">${rgstr}</span>
						<input type="hidden" name="detailRgstr" data-name="rgstr" value="${rgstr}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailRgstr')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            // 내 의견
            if (myRplyYn) {
                let keywordHtml = `
					<span class="selected_item detailMyRplyYn">
						<span class="item ">{{ message('item.dfccy.007') }} O</span>
						<input type="hidden" name="detailMyRplyYn" data-name="myRplyYn" value="${myRplyYn}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailMyRplyYn')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            // 설계번호 범위
            if (startDsgnNo || endDsgnNo) {
                let combinedValue = `${startDsgnNo} ~ ${endDsgnNo}`;
                let keywordHtml = `
					<span class="selected_item detailDsId">
						<span class="item dsId">${combinedValue}</span>
						<input type="hidden" name="startDsgnNo" data-name="startDsgnNo" value="${startDsgnNo}">
						<input type="hidden" name="endDsgnNo" data-name="endDsgnNo" value="${endDsgnNo}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailDsId')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            // 답변 상태
            if (rplyStatus && rplyStatus !== "all") {

                let rplyStatusText = $("#detailRplyCd option:selected").text();

                let keywordHtml = `
                    <span class="selected_item detailRplyCd">
                        <span class="item rply">${rplyStatusText}</span>
                        <input type="hidden" name="detailRplyCd" data-name="rplyStatus" value="${rplyStatus}">
                        <button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailRplyCd')">
                            <i class="ic ic-close"></i>
                            <span class="blind">{{ message('btn.002') }}</span>
                        </button>
                    </span>
                `;
                $('.selected_list').append(keywordHtml);
            }

            // 평가 결과
            if (apprerCd) {
                if(apprerCd !== "all"){
                    let apprerCdText = $("#detailApprerCd option:selected").text();
                    let keywordHtml = `
						<span class="selected_item detailApprerCd">
							<span class="item apprer">${apprerCdText}</span>
							<input type="hidden" name="detailApprerCd" data-name="apprerCd" value="${apprerCd}">
							<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailApprerCd')">
								<i class="ic ic-close"></i>
								<span class="blind">{{ message('btn.002') }}</span>
							</button>
						</span>
					`;
                    $('.selected_list').append(keywordHtml);
                }
            }

            // 백체크 결과
            if (backchkCd) {
                if(backchkCd !== "all"){
                    let backchkCdText = $("#detailBackchkCd option:selected").text();
                    let keywordHtml = `
						<span class="selected_item detailBackchkCd">
							<span class="item backchk">${backchkCdText}</span>
							<input type="hidden" name="detailBackchkCd" data-name="backchkCd" value="${backchkCd}">
							<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailBackchkCd')">
								<i class="ic ic-close"></i>
								<span class="blind">{{ message('btn.002') }}</span>
							</button>
						</span>
					`;
                    $('.selected_list').append(keywordHtml);
                }
            }

            // 최근입력일자
            if (startRecentDt || endRecentDt) {
                let combinedValue = `${startRecentDt} ~ ${endRecentDt}`;
                let keywordHtml = `
					<span class="selected_item detailRecentDt">
						<span class="item rgstDt">${combinedValue}</span>
						<input type="hidden" name="startRecentDt" data-name="startRecentDt" value="${startRecentDt}">
						<input type="hidden" name="endRecentDt" data-name="endRecentDt" value="${endRecentDt}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailRecentDt')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }


            // 첨부 파일
            if (atachYn) {
                let keywordHtml = `
					<span class="selected_item atachYn">
						<span class="item ">{{ message('item.com.062') }} O</span>
						<input type="hidden" name="atachYn" data-name="atachYn" value="${atachYn}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('atachYn')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            // 문제점
            if (isuYn) {
                let keywordHtml = `
					<span class="selected_item detailIsuYn">
						<span class="item ">{{ message('item.dsgn.011') }} O</span>
						<input type="hidden" name="detailIsuYn" data-name="detailIsuYn" value="${isuYn}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailIsuYn')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            // 교훈
            if (lesnYn) {
                let keywordHtml = `
					<span class="selected_item detailLesnYn">
						<span class="item ">{{ message('item.dsgn.012') }} O</span>
						<input type="hidden" name="detailLesnYn" data-name="detailLesnYn" value="${lesnYn}">
						<button type="button" class="icon_btn" onclick="page.detailSearchListClose('detailLesnYn')">
							<i class="ic ic-close"></i>
							<span class="blind">{{ message('btn.002') }}</span>
						</button>
					</span>
				`;
                $('.selected_list').append(keywordHtml);
            }

            if ($('.selected_list').children().length === 0) {
                $('.selected_list').removeClass('on');
            }

            page.read()
            page.detailSearchClose()
        },

        detailSearchListClose(keyword) {

            let selectedItem = $(`.${keyword}`).closest('.selected_item');
            let hiddenInputs = selectedItem.find('input[type="hidden"]');
            hiddenInputs.each((index, input) => {
                let key = $(input).attr('data-name');
                console.log('key', key);
                searchForm[key] = null;
                if('dsgnPhaseNoList' === key){
                    // [상세검색] 설계 단계 콤보박스 초기화
                    page.selectClear('detailPhase','detailPhaseAllCheck');
                }
            });

            selectedItem.remove();

            if ($('.selected_list').children().length === 0) {
                $('.selected_list').removeClass('on');
            }

            page.read();

        },

        // 상세검색 최소 날짜 지정
        setMinDate(startDtId, endDtId) {
            var startDate = new Date($(`#${startDtId}`).val());
            startDate.setDate(startDate.getDate() + 1);
            var minEndDate = startDate.toISOString().split('T')[0];
            $(`#${endDtId}`).attr('min', minEndDate);
        },

        detailSearchReset() {
            // $("#detailDsgnCd").val('')
            // $("#detailRgstr").val('');
            // $("#startDsgnNo").val('');
            // $("#endDsgnNo").val('');
            // $("#detailRplyCd").val('')
            // $("#startRecentDt").val('');
            // $("#endRecentDt").val('')
            // $("input[name='checkbox']").prop('checked', false);

            // `lay_pop` 클래스 하위의 모든 입력 요소 선택
            const layPopElements = document.querySelector(".lay_pop");

            if (layPopElements) {
                // 모든 input 요소 초기화
                layPopElements.querySelectorAll("input").forEach(input => {
                    if (input.type === "checkbox" || input.type === "radio") {
                        input.checked = false; // 체크박스 및 라디오 버튼 초기화
                    } else {
                        input.value = ""; // 일반 입력 필드 초기화
                    }
                });

                // 모든 select 요소 초기화
                layPopElements.querySelectorAll("select").forEach(select => {
                    select.selectedIndex = 0; // 첫 번째 옵션으로 설정
                });

                // 상세 검색 데이터 초기화
                Object.keys(searchForm).forEach(key => {
                    searchForm[key] = null;
                });

                // [상세검색] 설계 단계 콤보박스 초기화
                page.selectClear('detailPhase','detailPhaseAllCheck');
            }
        },

        makeSelect: function (url, containerId, allCheckId, listId, listElId) {
            $.ajax({
                url: `${url}?cntrctNo=${cntrctNo}&dsgnPhaseCd=0101`,
                method: "GET",
                contentType: "application/json",
                success: function (data) {
                    const $list = $('#' + listElId).empty();
                    const items = data.details[listId];

                    const myDsgn = containerId === "#rgstrContainer" ?
                        `<li class="list_item">
                            <label class="form_check">
                                <input class="check_mark" id="myDsgn" type="checkbox" name="check"  value="myDsgn">
                                <span class="check_label">{{ message('item.dfccy.007') }}</span>
                            </label>
                        </li> `: '';

                    $list.append(`
                        <li class="list_item">
                            <label class="form_check">
                                <input class="check_mark" id="${allCheckId}" type="checkbox" name="check">
                                <span class="check_label">{{ message('item.com.059') }}</span>
                            </label>
                        </li>
                    ${myDsgn}
                    `);

                    if (items) {
                        items.forEach(({ usrNm, usrId, dsgnPhaseNm, dsgnPhaseNo, cmnCdNmKrn, cmnCd }) => {
                            const name = usrNm || dsgnPhaseNm || cmnCdNmKrn;
                            const id = usrId || dsgnPhaseNo || cmnCd;
                            $list.append(`
                                <li class="list_item">
                                    <label class="form_check">
                                        <input class="check_mark" type="checkbox" name="check" value="${id}">
                                        <span class="check_label">${name}</span>
                                    </label>
                                </li>
                            `);
                        });
                    }

                    // 전체 체크박스 클릭 이벤트
                    $(containerId).on('change', `#${allCheckId}`, function () {
                        const isChecked = $(this).is(':checked');
                        $(containerId + " .check_mark").prop('checked', isChecked);
                        page.updateSelectBoxText(containerId, allCheckId);
                    });

                    // 개별 체크박스 상태 변경 시 전체 체크박스 상태 업데이트
                    $(containerId).on('change', 'input.check_mark:not(#' + allCheckId + ')', function () {
                        const totalCheckboxes = $(containerId).find("input.check_mark:not(#" + allCheckId + ")").length;
                        const checkedCheckboxes = $(containerId).find("input.check_mark:not(#" + allCheckId + "):checked").length;
                        $(containerId + " #" + allCheckId).prop('checked', totalCheckboxes === checkedCheckboxes);
                        page.updateSelectBoxText(containerId, allCheckId);
                    });



                    $(document).off("click").on("click", function (event) {
                        if (!$(event.target).closest(".selectbox.has_clear").length) {
                            $(".dropdown").removeClass("on");
                        }
                    });
                },
                error: function (xhr) {
                    console.error("Error fetching data:", xhr.responseText);
                }
            });
        },

        updateSelectBoxText: function (containerId, allCheckId) {
            const allChecked = $(containerId + " #" + allCheckId).is(":checked");
            const selectedGroups = $(containerId + " .check_mark:checked:not(#" + allCheckId + ")")
                .map((_, el) => $(el).siblings(".check_label").text())
                .get();
            const count = selectedGroups.length;

            let displayText;

            if (allChecked) {
                displayText = "{{ message('item.com.059') }}"; // 전체 선택된 경우
            } else if (count === 0) {
                if (containerId == "#dsgnCdContainer") {
                    displayText = "{{ message('item.dsgn.007') }}";  // 검토 분류
                }
                else if (containerId == "#designPhaseContainer") {
                    displayText = "{{ message('item.dsgn.027') }}"; // 설계 단계
                }
                else if (containerId == "#detailPhaseContainer"){
                    displayText = "{{ message('item.dsgn.027') }}"; // 설계 단계
                }
                else {
                    displayText = "{{ message('item.com.064') }}"; // 작성자
                }
                // 아무것도 선택되지 않은 경우
            } else if (count === 1) {
                displayText = selectedGroups[0]; // 하나 선택된 경우
            } else {
                displayText = `${selectedGroups[0]} 외 ${count - 1}건`; // 여러 개 선택된 경우
            }

            // Select 박스의 텍스트 업데이트
            if (containerId == "#dsgnCdContainer") {
                $("#dsgnCdSelect").text(displayText);
            }
            else if (containerId == "#designPhaseContainer") {
                $("#designPhaseSelect").text(displayText);
            }
            else if (containerId == "#detailPhaseContainer"){
                $("#detailPhaseSelect").text(displayText);
            }
            else {
                $("#rgstrSelect").text(displayText);
            }


            // Clear 버튼 표시 여부 업데이트
            $(containerId + " .icon_btn._clear").toggle(allChecked || count > 0);
        },

        selectClear: function (selectType, allCheckId) {
            let containerId;

            if (selectType === 'dsgnCd') {
                containerId = "#dsgnCdContainer";
                searchForm.dsgnCdList = [];
            }
            else if (selectType === 'designPhase') {
                containerId = "#designPhaseContainer";
                searchForm.dsgnPhaseNoList = [];
            }
            else if (selectType === 'detailPhase'){
                containerId = "#detailPhaseContainer";
            }
            else {
                containerId = "#rgstrContainer";
                searchForm.rgstrIdList = [];
            }

            $(containerId + " .check_mark").prop("checked", false);
            page.updateSelectBoxText(containerId, allCheckId);
        },

        // 검토분류 selectBox
        makeSearchSelectBox: function () {
            this.makeSelect("/api/design/dsgnPhase/list", "#designPhaseContainer", "designPhaseAllCheck", "dsgnPhaseList", "dsgnPhaseList");
            this.makeSelect("/api/design/dsgnPhase/list", "#detailPhaseContainer", "detailPhaseAllCheck", "dsgnPhaseList", "detailPhaseList");
            this.makeSelect("/api/design/dsgnCd/list", "#dsgnCdContainer", "dsgnCdAllCheck", "dsgnCdList", "dsgnCdList");
            this.makeSelect("/api/design/rgstr/list", "#rgstrContainer", "rgstrAllCheck", "rgstrList", "rgstrList");
        },

        // 셀렉트박스 호출
        makeSelectBox: function (comCodeSelectBoxGets) {
            $.ajax({
                url: "/api/util/make-selectBox",
                method: "POST",
                dataType: "json",
                xhrFields: { withCredentials: true },
                contentType: "application/json; charset=UTF-8",
                traditional: true,
                data: JSON.stringify(comCodeSelectBoxGets), // 요청 데이터로 comCodeSelectBoxGets 배열을 전송
                success: function (data) {
                    let returnMap = data.details.returnMap;
                    comCodeSelectBoxGets.forEach(function (item, index) {
                        let addAppLineContent = document.getElementById(
                            item.selectBoxId
                        );
                        let categorySelect = `${returnMap[item.selectBoxId]}`;
                        if (addAppLineContent) {
                            addAppLineContent.innerHTML =
                                returnMap[item.selectBoxId];
                        }
                        $(`#selectBox${index + 1}`).append(categorySelect);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error making select box:", status, error);
                },
            });
        },

        initializeSelectBoxes() {
            let selectBoxRequests = [
                {
                    cmnGrpCd: "19a8bb53-74b4-405a-8d91-2b38555fc7d9",
                    selectBoxId: "detailDsgnCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "{{ message('item.dsgn.007') }}",
                    paramNm: "detailDsgnCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "onchange",
                },
                {
                    cmnGrpCd: "f1c22c3b-b5b5-43a9-acdb-fa20b7d13234",
                    selectBoxId: "detailRplyCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "{{ message('item.dsgn.010') }}",
                    paramNm: "detailRplyCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "onchange",
                },
                {
                    cmnGrpCd: "a1c025ce-d31b-409a-971d-26be70841848",
                    selectBoxId: "detailApprerCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "평가 결과",
                    paramNm: "detailApprerCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "onchange",
                },
                {
                    cmnGrpCd: "18616692-eca4-4560-8425-0cbe7bd461f0",
                    selectBoxId: "detailBackchkCd",
                    selectBoxNmType: "KOR",
                    ckeckedValue: "",
                    orderByCol: "",
                    orderByType: "",
                    initText: "백체크 결과",
                    paramNm: "detailBackchkCd",
                    funName: "",
                    funParam: "this.value",
                    funtype: "onchange",
                },
            ];

            page.makeSelectBox(selectBoxRequests);
        },
    }


    // 상세정보 버튼 클릭 이벤트
    $(document).on('click', '.detail-btn', function () {
        $(this).closest('tr').next('.more_info').toggleClass('open');
        event.stopPropagation();
    });

    // 닫기 버튼 클릭 이벤트
    $(document).on('click', '.lay_pop_close', function () {
        $(this).closest('.more_info').removeClass('open');
    });

</script>
{% endblock footer_script %}