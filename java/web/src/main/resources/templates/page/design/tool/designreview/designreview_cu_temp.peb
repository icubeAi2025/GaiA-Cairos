
<h3 class="conts_tit" id="dsgn_cu_tit">검토 의견 추가</h3>
<div class="btn_area s_default">
    {{ cuBtnHtml | raw }}
{#    <button type="button" class="btn _outline" id="action-button" onclick="dsgnInput.save()">{{ message('btn.006') }}</button>#}
    <button type="button" class="btn _outline" id="close-popup" onclick="dsgnInput.close()">{{ message('btn.007') }}</button>
    <div class="btn_group iconbtns">
        <button class="icon_btn" id="open-new-window" onclick="dsgnInput.open()">
            <i class="fa-solid fa-up-right-from-square"></i>
            <span class="tooltip">{{ message('item.com.017') }}</span>
        </button>
    </div>
</div>
<div class="form_box" id="dsgn_cu_form">
    <div class="container" style="display: flex; align-items: center;">
        <span class="caption">
            <span><b class="c_red">*</b> {{ message('item.com.023') }}</span>
        </span>
    </div>
    <div class="group">
        <div class="row">
            <div class="col">
                <div class="form_label required">제목</div>
                <div class="form_data">
                    <input type="text" class="maxlength" id="cu_title" name="title" required maxlength="255">
                </div>
            </div>
        </div>
        <!-- row -->
        <div class="row">
            <div class="col">
                <div class="form_label required">검토 분류</div>
                <div class="form_data">
                    <div class="selectbox sort" style="margin-left: 0;">
                        <span class="selectbox" id="cu_dsgnCd_box">
                        </span>
                    </div>  
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form_label">문서 번호</div>
                <div class="form_data">
                    <input type="text" class="maxlength" id="cu_docNo" name="docNo" maxlength="100">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form_label">도면 번호</div>
                <div class="form_data">
                    <input type="text" class="maxlength" id="cu_dwgNo" name="dwgNo" maxlength="255">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form_label">도면 명</div>
                <div class="form_data">
                    <input type="text" class="maxlength" id="cu_dwgNm" name="dwgNm" maxlength="2000">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form_label">검토 의견</div>
                <div class="form_data">
                    <textarea class="maxlength" id="cu_rvw_opnin" maxlength="2000"></textarea>
                </div>
            </div>
        </div>
        <!-- row -->
        <div class="row">
            <div class="col">
                <div class="form_label">문제점</div>
                <div class="form_data">
                    <div class="item_group" role="group" aria-label="Basic radio group">
                        <label class="form_check">
                            <input class="check_mark" type="radio" id="cu_isuY" name="isuYn" value="Y" checked>
                            <span class="check_label">Yes</span>
                        </label>
                        <label class="form_check">
                            <input class="check_mark" type="radio" id="cu_isuN" name="isuYn" value="N">
                            <span class="check_label">No</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form_label">교훈</div>
                <div class="form_data">
                    <div class="item_group" role="group" aria-label="Basic radio group">
                        <label class="form_check">
                            <input class="check_mark" type="radio" id="cu_lesnY" name="lesnYn" value="Y" checked>
                            <span class="check_label">Yes</span>
                        </label>
                        <label class="form_check">
                            <input class="check_mark" type="radio" id="cu_lesnN" name="lesnYn" value="N">
                            <span class="check_label">No</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- row -->
        <div class="row">
            <div class="col">
                <div class="form_label">{{ message('btn.021') }}</div> <!-- 파일첨부 -->
                <div class="form_data">

                    <div class="attach_wrap">
                        <div class="attach_toolbar">
                            <div class="btn_area s_small">
                                <div class="attach_btn">
                                    <input type="file" id="fileInput" name="files" multiple>
                                    <button type="button" class="btn _fill" id="addFileButton">{{
                                        message('btn.021') }}</button> <!-- 파일첨부 -->
                                </div>
                                <button type="button" class="btn _outline" id="removeAllButton">{{
                                    message('btn.020') }}</button> <!-- 모두삭제 -->
                            </div>
                            <div class="attach_info">
                                <span class="attach_result">
                                    <span class="sucess">
                                        <i class="ic ic-check"></i>
                                        <b class="num" id="uploadedFileCount">0</b>
                                    </span>
                                    <span class="fail">
                                        <i class="ic ic-close"></i>
                                        <b class="num" id="failedFileCount">0</b>
                                    </span>
                                </span>
                                <span class="attach_capacity">
                                    <span class="item" id="uploadedFileSize">0 KB</span>
                                    <span class="item">100 MB</span>
                                </span>
                            </div>
                        </div>

                        <div class="attach_area">
                            <!-- 첨부파일 미등록 시 -->
                            <p class="data_info">
                                {{ message('msg.pinstall.003') }}
                            </p>

                            <!-- 첨부파일 등록 시 활성화 'hide'제거-->
                            <div class="attach_list hide">
                                <ul class="file_header">
                                    <li class="header_item">
                                        <button type="button" class="icon_btn">
                                            <i class="ic ic-close"></i>
                                            <span class="blind">{{ message('item.com.020') }}</span>
                                            <!-- 파일명 -->
                                        </button>
                                        <span class="f_name">{{ message('item.com.020') }}</span>
                                        <!-- 파일명 -->
                                        <span class="f_progress">{{ message('item.info.036') }}</span>
                                        <!-- 진행상태 -->
                                        <span class="f_capacity">{{ message('item.com.021') }}</span>
                                        <!-- 크기 -->
                                    </li>
                                </ul>
                                <ul class="file_list" id="fileList"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="g-group g-col2" style="grid-template-columns: 50% 50%;">
            <div class="group">
                <div class="s_conts">
                    <span class="tree_route">검토 도서</span>
    
    
                    <!-- S: Slick Slider -->
                    <div class="process_photo">
                        <div class="rvw_dwg_photo" id="rvw_dwg_photo">
                        </div>
    
                        <div class="slick_nav">
                            <div class="btn_area">
                                <div class="btn_group _outline">
                                    <button type="button" class="btn icon_btn" onclick="dsgnInput.addDwgPhoto('rvw')">
                                        <i class="ic ic-picture-one"></i>
                                        <span class="blind">추가</span>
                                    </button>
                                    <button type="button" class="btn icon_btn" onclick="dsgnInput.photo.delPhoto('rvw_dwg_photo')">
                                        <i class="ic ic-delete"></i>
                                        <span class="blind">삭제</span>
                                    </button>
                                </div>

                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="cu_rvwDwgNo" value="">
                </div>
            </div>

            <div class="group">
                <div class="s_conts">
                    <span class="tree_route">변경 요청</span>
        
                    <div class="process_photo">
                        <div class="chg_dwg_photo" id="chg_dwg_photo">
                        </div>
        
                        <div class="slick_nav">
                            <div class="btn_area">
                                <div class="btn_group _outline">
                                    <button type="button" class="btn icon_btn" onclick="dsgnInput.addDwgPhoto('chg')">
                                        <i class="ic ic-picture-one"></i>
                                        <span class="blind">추가</span>
                                    </button>
                                    <button type="button" class="btn icon_btn" onclick="dsgnInput.photo.delPhoto('chg_dwg_photo')">
                                        <i class="ic ic-delete"></i>
                                        <span class="blind">삭제</span>
                                    </button>
                                </div>

                            </div>
                        </div>
                        <input type="hidden" id="cu_chgDwgNo" value="">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="dwg_popup" class="popup_overlay modal_base" style="display: none;">
        <!-- 팝업 내용 -->
    </div>
</div>
<script>
    // 새창 모드일 경우,
    var dsgnCuPopup;

    $(document).ready(function () {
        dsgnInput.initializeSelectBoxes();
        dsgnInput.file.init();
    });
    
    var dsgnInput = {
        mode: null,
        dsgnNo: null,
        dwgPhotoMode: null,
        init: function (mode, dsgnNo) {
            this.mode = mode;
            this.dsgnNo = dsgnNo;
            let title;
            if(this.mode === "create"){
                title = "검토 의견 추가";
            }

            if(this.mode === "update"){
                title = "검토 의견 수정";
                this.updateInputSet();
            }

            $("#dsgn_cu_tit").text(title);
        },

        close: function() {
            this.formBoxReset(); // 입력한 값 초기화
            this.photo.rvwPhotoData = null; // 검토도서 데이터 초기화
            this.photo.chgPhotoData = null; // 변경요청 데이터 초기화
            this.photo.rvwDwgNo = null;     // 검토도서 번호 초기화
            this.photo.chgDwgNo = null;     // 변경요청 번호 초기화

            $("#rvw_dwg_photo").html(''); // 검토도서 요소 초기화
            $("#chg_dwg_photo").html(''); // 변경요청 요소 초기화

            page.dsgn.gridInit(cntrctNo, dsgnPhaseNo);

            $("#dsgn_list").show();
            $("#dsgn_cu").hide();
        },

        //새창 오픈
        open: function () {
            let dsgnNo;
            if(this.mode === "update"){
                dsgnNo = this.dsgnNo;
            }
            
            if(!cntrctNo || !dsgnPhaseNo){
                gaiaCommon.customAlert("설계 검토 단계 정보가 없습니다.");
                return;
            }else if(this.mode === "update" && !dsgnNo){
                gaiaCommon.customAlert("설계 검토 정보가 없습니다.");
                return;
            }

            let url = this.mode === "update" ? `/design/designReview/form?mode=update&cntrctNo=${cntrctNo}&dsgnPhaseNo=${dsgnPhaseNo}&dsgnNo=${dsgnNo}&pjtNo=${pjtNo}`
                                            : `/design/designReview/form?mode=create&cntrctNo=${cntrctNo}&dsgnPhaseNo=${dsgnPhaseNo}&pjtNo=${pjtNo}`;

            const _width = 1150;
            const _height = 750;

            let _left = Math.ceil((window.screen.width - _width)/2);
            _left += window.screenLeft; // 듀얼 모니터일 때
            const _top = Math.ceil((window.screen.height - _height)/2);

            dsgnCuPopup = window.open(url, "dsgnCuPopup", `width=${_width}, height=${_height},left=${_left},top=${_top}, scrollbars=yes, resizable=yes`);
            this.close();
        },

        save: function () {
            if (this.mode == "create") {
                this.create();
            } else if (this.mode == "update") {
                this.update();
            }
        },

        create: function () {
            if(!cntrctNo || !dsgnPhaseNo){
                gaiaCommon.customAlert('저장할 설계 검토 단계 정보가 없습니다.');
                return false;
            }

            // 필수 값 유효성 확인
            if (!this.vaildateData()) return false;

            let dsgnData = {
                cntrctNo: cntrctNo,
                dsgnPhaseNo: dsgnPhaseNo,
                title: $("#cu_title").val(),
                dsgnCd: $("#cu_dsgnCd").val(),
                docNo: $("#cu_docNo").val() || null,
                dwgNo: $("#cu_dwgNo").val() || null,
                dwgNm: $("#cu_dwgNm").val() || null,
                rvwOpnin: $("#cu_rvw_opnin").val() || null,
                isuYn: $("input[name='isuYn']:checked").val() || null,
                lesnYn: $("input[name='lesnYn']:checked").val() || null,
                dwgs: dsgnInput.photo.dwgPhotoDataArr.map(dwg => ({
                    dwgCd: dwg.dwgCd,
                    dwgDscrpt: dwg.dscrpt,
                })),
            }

            const formData = new FormData();
            
			formData.delete('files');
			this.file.existingFiles.forEach(file => {
				formData.append('files', file);
			});

			formData.append('dsgn', new Blob([JSON.stringify(dsgnData)], { type: 'application/json' }));

            // 검토도서, 변경요청 파일 추가
            if (this.photo.rvwPhotoData && this.photo.rvwPhotoData.file) {
                formData.append('rvwPhoto', this.photo.rvwPhotoData.file);
            }

            if (this.photo.chgPhotoData && this.photo.chgPhotoData.file) {
                formData.append('chgPhoto', this.photo.chgPhotoData.file);
            }

            // console.log("설계 검토 저장 입력데이터: ", dsgnData);

            // 서버 전송
            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.postForm("/api/design/review/create",formData, function (response) {
                if (response.ok) {
                    gaiaCommon.customAlert('{{ message("msg.044") }}', function () { // 저장되었습니다
                        // dsgnInput.formBoxReset(); // 폼 초기화
                        dsgnInput.close(); // 기존 close() 호출
                        gaiaCommon.LoadingOverlay('body', false);
                    });
                }else{
                    gaiaCommon.LoadingOverlay('body', false);
                    gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
                }
            },function (error) {
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
            })
        },

        update: function () {
            const dsgnNo = dsgnInput.dsgnNo;

            if(!cntrctNo || !dsgnPhaseNo || !dsgnNo){
                gaiaCommon.customAlert('저장할 설계 검토 정보가 없습니다.');
                return false;
            }

            // 필수 값 유효성 확인
            if (!this.vaildateData()) return false;

            let dsgnData = {
                cntrctNo: cntrctNo,
                dsgnPhaseNo: dsgnPhaseNo,
                dsgnNo: dsgnNo,
                title: $("#cu_title").val(),
                dsgnCd: $("#cu_dsgnCd").val(),
                docNo: $("#cu_docNo").val(),
                dwgNo: $("#cu_dwgNo").val(),
                dwgNm: $("#cu_dwgNm").val(),
                rvwOpnin: $("#cu_rvw_opnin").val(),
                isuYn: $("input[name='isuYn']:checked").val(),
                lesnYn: $("input[name='lesnYn']:checked").val(),
                rvwDwgNo: $("#cu_rvwDwgNo").val(),
                chgDwgNo: $("#cu_chgDwgNo").val(),
				deleteRvwFileNo: dsgnInput.photo.deleteRvwFileNo,
                deleteRvwFileKey: dsgnInput.photo.deleteRvwFileKey,
                deleteChgFileNo: dsgnInput.photo.deleteChgFileNo,
                deleteChgFileKey: dsgnInput.photo.deleteChgFileKey,
            }

            // dwgs 추가 조건
            if (this.photo.rvwPhotoData || this.photo.chgPhotoData) {
                dsgnData.dwgs = dsgnInput.photo.dwgPhotoDataArr.map(dwg => ({
                    dwgCd: dwg.dwgCd,
                    dwgDscrpt: dwg.dscrpt,
                }));
            }

            const formData = new FormData();

            // 검토도서, 변경요청 파일 추가
            if (this.photo.rvwPhotoData && this.photo.rvwPhotoData.file) {
                formData.append('rvwPhoto', this.photo.rvwPhotoData.file);
            }

            if (this.photo.chgPhotoData && this.photo.chgPhotoData.file) {
                formData.append('chgPhoto', this.photo.chgPhotoData.file);
            }
            
            if (this.file.removedFiles[dsgnNo]) {
				this.file.removedFiles[dsgnNo].forEach(file => {
					formData.append('removedFiles', file.fileNo);
					formData.append('removedFileKeys', file.fileKey);
				});
			}

			formData.delete('files');
			this.file.existingFiles.forEach(file => {
				formData.append('files', file);
			});

			formData.append('dsgn', new Blob([JSON.stringify(dsgnData)], { type: 'application/json' }));


            console.log("설계 검토 수정 입력데이터: ", dsgnData);

            
            // 서버 전송
            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.postForm("/api/design/review/update",formData,function (response) {
                if (response.ok) {
                    gaiaCommon.customAlert('{{ message("msg.007") }}', function () { // 수정되었습니다
                        // dsgnInput.formBoxReset(); // 폼 초기화
                        dsgnInput.close(); // 기존 close() 호출
                        gaiaCommon.LoadingOverlay('body', false);
                    });
                } else{
                    gaiaCommon.LoadingOverlay('body', false);
                    gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
                }
            },function (error) {
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
            })
        },


        updateInputSet(){
            const dsgnNo = dsgnInput.dsgnNo;
            if(!cntrctNo || !dsgnPhaseNo || !dsgnNo){
                gaiaCommon.customAlert("설계 검토 정보가 없습니다.");
                return false;
            }

            gaiaCommon.get(`/api/design/review/${cntrctNo}/${dsgnPhaseNo}/${dsgnNo}`, {}, function(result){
                if(result.ok){
                    let inputData = result.details.dsgn;
                    let attachments = result.details.attachments;
                    let chgDwgAttach = result.details.chgDwgAttach;
                    let rvwDwgAttach = result.details.rvwDwgAttach;

                    // 설계 검토 데이터 설정
                    $("#cu_title").val(inputData.title);        // 제목
                    $("#cu_dsgnCd").val(inputData.dsgnCd);      // 검토 분류
                    $("#cu_docNo").val(inputData.docNo);        // 문서 번호
                    $("#cu_dwgNo").val(inputData.dwgNo);        // 도면 번호
                    $("#cu_dwgNm").val(inputData.dwgNm);        // 도면 명
                    $("#cu_rvw_opnin").val(inputData.rvwOpnin); // 검토 의견
                    $("#cu_rvwDwgNo").val(inputData.rvwDwgNo); // 검토 도서 번호
                    $("#cu_chgDwgNo").val(inputData.chgDwgNo); // 변경 요청 번호

                    // 문제점
                    if(inputData.isuYn === "Y"){ 
                        $("#cu_isuY").prop('checked', true);
                        $("#cu_isuN").prop('checked', false);
                    }else{
                        $("#cu_isuN").prop('checked', true);
                        $("#cu_isuY").prop('checked', false);
                    }

                    // 교훈
                    if(inputData.lesnYn === "Y"){
                        $("#cu_lesnY").prop('checked', true);
                        $("#cu_lesnN").prop('checked', false);
                    }else{
                        $("#cu_lesnN").prop('checked', true);
                        $("#cu_lesnY").prop('checked', false);
                    }

                    
                    //첨부파일 데이터 설정
                    const fileList = document.getElementById('fileList');
                    if (fileList) {
                        dsgnInput.file.clearFileList(); // 기존 파일 목록 지우기
                        if (attachments && attachments.length > 0) {
                            dsgnInput.file.processFetchedFiles(attachments); // 새 파일 목록 추가
                        } else {
                            dsgnInput.file.updateFileSizeSummary(); // 파일 사이즈 요약 업데이트
                            dsgnInput.file.updateFileCount(); // 파일 개수 업데이트
                            
                        }
                    }

                    // 검토 도서, 변경 요청 데이터 설정
                    if(rvwDwgAttach){
                        rvwDwgAttach.dwgDscrpt = inputData.rvwDwgDscrpt;
                        dsgnInput.photo.loadDwgPhotos(rvwDwgAttach, "rvw_dwg_photo");
                    }
                    
                    if(chgDwgAttach){
                        chgDwgAttach.dwgDscrpt = inputData.chgDwgDscrpt;
                        dsgnInput.photo.loadDwgPhotos(chgDwgAttach, "chg_dwg_photo");
                    }
                    
                }
            },function(error){
                console.log(`[Modal] 검토 의견 수정 초기 렌더링 실패, /api/design/designReview/dsgn/${cntrctNo}/${dsgnPhaseNo}/${dsgnNo}, PARAMS : {}`,error);
            });
        },

        // 입력된 값 모두 초기화.
        formBoxReset: function() {
            // `form_box` 클래스 하위의 모든 입력 요소 선택
            const formBoxElements = document.querySelector("#dsgn_cu_form");

            if (formBoxElements) {
                // 모든 input 요소 초기화
                formBoxElements.querySelectorAll("input").forEach(input => {
                    if (input.type === "checkbox" || input.type === "radio") {
                        input.checked = false; // 체크박스 및 라디오 버튼 초기화
                    } else {
                        input.value = ""; // 일반 입력 필드 초기화
                    }
                });

                // 모든 select 요소 초기화
                formBoxElements.querySelectorAll("select").forEach(select => {
                    select.selectedIndex = 0; // 첫 번째 옵션으로 설정
                });

                // 모든 textarea 요소 초기화
                formBoxElements.querySelectorAll("textarea").forEach(textarea => {
                    textarea.value = "";
                });

                // 파일 입력 초기화
                const fileInput = document.getElementById('fileInput');
                if (fileInput) {
                    fileInput.value = "";
                }

                // 첨부 파일 리스트 초기화
                const fileList = document.getElementById('fileList');
                if (fileList) {
                    fileList.innerHTML = '';
                }

                // 첨부 파일 개수 초기화
                document.getElementById('uploadedFileCount').textContent = '0';
                document.getElementById('failedFileCount').textContent = '0';
                document.getElementById('uploadedFileSize').textContent = '0 KB';
            }
        },


        // 필수 값 유효성 확인
        vaildateData: function(){
            let addRegex = /^(?!\s)[^\/:*?"<>|]+$/;
            let isValid = true;

            $(".required").each(function () {
                const inputElement = $(this).closest(".row").find("input, select, textarea");
                if (!inputElement.val()) {
                    gaiaCommon.customAlert("{{ message('msg.008') }}"); // 필수 값이 누락되었습니다.
                    inputElement.focus();
                    console.log(inputElement);
                    isValid = false;
                    return false;
                }
            });

            if (!isValid) return false; // 필수 값 체크에서 실패한 경우 종료

            // 유효성 검사 대상 필드 리스트
            const fieldsToValidate = ['#cu_title', '#cu_docNo', '#cu_dwgNo', '#cu_dwgNm', '#cu_rvw_opnin'];

            // 각 필드에 이벤트 리스너 추가
            fieldsToValidate.forEach(selector => {
                const value = $(selector).val();

                // 값이 없는 경우 유효성 검사 패스
                if (!value || value === "") return;

                if (!addRegex.test(value)) {
                    gaiaCommon.customAlert("{{ message('msg.079') }}" + '/ , : , * , ? , " , < , >  , |'); // 유효하지 않은 값이 포함되어 있습니다 : [/, :, *, ?, ", <, >, ., |]
                    $(selector).focus();
                    isValid = false;
                    return false;
                }
            });

            return isValid;
        },

        // 검토분류 콤보박스 생성
		// 셀렉트박스 호출
        makeSelectBox: function (cmnGrpCd, selectBoxId, elementId, ckeckedValue) {
            let initText = "검토 분류";
            let requestData = {
                cmnGrpCd: cmnGrpCd,
                selectBoxId: selectBoxId,
                selectBoxNmType: "KOR", //TODO: 영어일 때 항목 가져오는 거 필요.
                ckeckedValue: ckeckedValue,
                orderByCol: "",
                orderByType: "",
                initText: initText,
                paramNm: selectBoxId,
                funName: "",
                funParam: "this.value",
                funtype: "onchange",
            };

            gaiaCommon.post("/api/util/make-selectBox",[requestData],function (data) {
                let returnMap = data.details.returnMap;

                // 메인 화면 결함분류 콤보박스 업데이트
                let addAppLineContent = document.getElementById(elementId);
                addAppLineContent.innerHTML = returnMap[selectBoxId];
            },function (error) {
                console.log(`[Modal] 결함 분류 드롭다운 리스트 생성 실패, /api/util/make-selectBox, PARAMS : {[requestData]}`,error);
            })
        },

        initializeSelectBoxes(ckeckedValue) {
            dsgnInput.makeSelectBox(
                "19a8bb53-74b4-405a-8d91-2b38555fc7d9",
                "cu_dsgnCd",
                "cu_dsgnCd_box",
				ckeckedValue
            );
        },

        addDwgPhoto: function (mode) {
            this.dwgPhotoMode = mode;
			$("#dwg_popup").load(`/design/designReview/dwgPhoto/modal?mode=${mode}&pjtNo=${pjtNo}&cntrctNo=${cntrctNo}`);
			$("#dwg_popup").css({ "display": "flex" });
		},

        // 사진관련
        photo : {
            rvwPhotoData: null,
            chgPhotoData: null,
            dwgPhotoDataArr: [],
            deleteRvwSno: null,
            deleteRvwFileNo: null,
            deleteChgSno: null,
            deleteChgFileNo: null,
            rvwDwgNo: null,
            chgDwgNo: null,

            init: function (rvwDwgAttach, chgDwgAttach) {
                this.loadDwgPhotos(rvwDwgAttach, "rvw_dwg_photo"); // 검토 도서
                this.loadDwgPhotos(chgDwgAttach, "chg_dwg_photo"); // 변경 요청 도서
            },

            loadDwgPhotos: function (data, targetId) {
                if (!data) return; // 데이터가 없으면 종료

                const photoHtml = `
                    <dl class="dl_box p_photo">
                        <dt class="item_dt">
                            <label class="form_check">
                                <input class="check_mark" type="checkbox" name="check" value="0">
                            </label>
                        </dt>
                        <dd class="item_dd">
                            <figure class="p_photo_info">
                                <img src="${data.fileDiskPath.replace(/\\/g, '/').replace(/^.*\/upload/, '/upload')}/${data.fileDiskNm}" alt="${data.fileNm}">
                                <figcaption>
                                    <p class="desc">${data.dwgDscrpt}</p>
                                    <input type="hidden" id="fileNo" value="${data.fileNo}">
                                    <input type="hidden" id="sno" value="${data.sno}">
                                </figcaption>
                            </figure>
                        </dd>
                    </dl>`;

                $(`#${targetId}`).html(photoHtml);

                // 데이터 저장
                if (targetId === "rvw_dwg_photo") {
                    this.rvwPhotoData = data;
                    this.rvwDwgNo = data.rvwDwgNo;
                } else if (targetId === "chg_dwg_photo") {
                    this.chgPhotoData = data;
                    this.chgDwgNo = data.chgDwgNo;
                }
            },

            // 사진 추가
            setPhoto: function (data, mode) {
                this.dwgPhotoDataArr.push(data);
                const photoHtml = 
                    `<dl class="dl_box p_photo">
                        <dt class="item_dt">
                            <label class="form_check">
                                <input class="check_mark" type="checkbox" name="check" value="0">
                            </label>
                        </dt>
                        <dd class="item_dd">
                            <figure class="p_photo_info">
                                <img src=${data.base} alt="검토도서사진">
                                <figcaption>
                                    <p class="desc">${data.dscrpt}</p>
                                </figcaption>
                            </figure>
                        </dd>
                    </dl>`;

                if (mode === "0501") { // 검토 도서
                    if (this.rvwPhotoData) {
                        this.deleteRvwSno = this.rvwPhotoData.sno;
                        this.deleteRvwFileNo = this.rvwPhotoData.fileNo;
                        this.rvwDwgNo = this.rvwPhotoData.rvwDwgNo;
                    }
                    this.rvwPhotoData = data;
                    $("#rvw_dwg_photo").html(photoHtml);
                } 
                else if (mode === "0502") { // 변경 요청
                    if (this.chgPhotoData) {
                        this.deleteChgSno = this.chgPhotoData.sno;
                        this.deleteChgFileNo = this.chgPhotoData.fileNo;
                        this.chgDwgNo = this.chgPhotoData.chgDwgNo;
                    }
                    this.chgPhotoData = data;
                    $("#chg_dwg_photo").html(photoHtml);
                }
            },

            // 사진 삭제
            delPhoto: function (dwgElId) {
                if (dwgElId === 'rvw_dwg_photo') {
                    if (this.rvwPhotoData) {
                        this.deleteRvwSno = this.rvwPhotoData.sno;
                        this.deleteRvwFileNo = this.rvwPhotoData.fileNo;
                    }
                    this.rvwPhotoData = null;
                } 
                else if (dwgElId === 'chg_dwg_photo') {
                    if (this.chgPhotoData) {
                        this.deleteChgSno = this.chgPhotoData.sno;
                        this.deleteChgFileNo = this.chgPhotoData.fileNo;
                    }
                    this.chgPhotoData = null;
                }
                $(`#${dwgElId}`).html('');


                // if (this.photoData) {
                //     if (this.photoData.sno) {
                //         this.deleteSno = this.photoData.sno;
                //     }
                //     if (this.photoData.phtSno) {
                //         this.deletePhtSno = this.photoData.phtSno;
                //     }
                //     this.photoData = null;

                // }
            }
        },

        // 파일 첨부 관련
        file: {    
            uploadedFileCount: null,
            failedFileCount: null,
            uploadedFileSize: null,
            maxTotalFileSize: 100 * 1024 * 1024, // 100 MB
            totalFileSize: 0,
            failedFileCounts: 0,
            successfulFileCount: 0,
            existingFiles: [],
            allRemovedFiles: [],
            removedFiles: {},

            init() {
                this.cacheElements();
                this.addEventListeners();

                /* 기존 코드*/
                // document.addEventListener('DOMContentLoaded', () => {
                //     this.cacheElements();
                //     this.addEventListeners();
                // });
            },

            cacheElements() {
                console.log(this);
                this.addFileButton = document.getElementById('addFileButton');
                this.removeAllButton = document.getElementById('removeAllButton');
                this.fileInput = document.getElementById('fileInput');
                this.fileList = document.getElementById('fileList');
                this.uploadedFileCount = document.getElementById('uploadedFileCount');
                this.failedFileCount = document.getElementById('failedFileCount');
                this.uploadedFileSize = document.getElementById('uploadedFileSize');
            },

            addEventListeners() {
                document.querySelectorAll('.file-item .remove-button').forEach(button => {   // 파일 목록 단일 삭제(x) 버튼
                    button.addEventListener('click', (event) => this.removeFile(event));
                });

                // 드래그 앤 드롭
                this.attachArea = document.querySelector('.attach_area');
                this.attachArea.addEventListener('dragover', (event) => this.dragOver(event));
                this.attachArea.addEventListener('dragleave', () => this.dragLeave());
                this.attachArea.addEventListener('drop', (event) => this.handleDrop(event));

                this.addFileButton.addEventListener('click', () => this.fileInput.click()); // 파일 첨부
                this.fileInput.addEventListener('change', () => this.updateFileListFromInput()); // 파일 목록 업데이트
                this.removeAllButton.addEventListener('click', () => this.removeAllFiles()); // 파일 모두 삭제
            },

            // 파일 드래그 앤 드롭
            dragOver(event) {
                event.preventDefault();
                this.attachArea.classList.add('dragging');
            },
            dragLeave() {
                this.attachArea.classList.remove('dragging');
            },
            handleDrop(event) {
                event.preventDefault();
                this.attachArea.classList.remove('dragging');

                const newFiles = event.dataTransfer.files;
                if (newFiles.length > 0) {
                    this.existingFiles = this.existingFiles.concat(newFiles); // 기존 파일 목록에 새 파일 추가
                    this.updateFileList(newFiles);
                }
            },

            updateFileListFromInput() { // '파일첨부'로 첨부된 파일 추가
                const newFiles = this.fileInput.files;
                this.existingFiles = this.existingFiles.concat(newFiles);
                if (newFiles.length > 0) {
                    this.updateFileList(newFiles);
                }
            },

            removeFile(event) { // 파일 삭제(단일) -> X 버튼
                const fileItem = event.target.parentElement;
                const fileNo = fileItem.getAttribute('data-file-no');
                const sno = fileItem.getAttribute('data-sno');

                this.allRemovedFiles.push({ fileNo, sno });
                fileItem.remove();
            },

            removeAllFiles() { // '모두삭제'
                const fileItems = document.querySelectorAll('.file_list .list_item');
                fileItems.forEach(fileItem => {
                    const fileNo = fileItem.dataset.fileNo;
                    const sno = fileItem.dataset.sno;
                    this.allRemovedFiles.push({ fileNo, sno });
                    this.removeFileFromProject(fileNo, sno); // 삭제된 파일 목록에 추가 (실제 사용하는 변수)
                });
                this.updateFileSizeSummary();
                this.clearFileList();
                this.fileInput.value = '';
            },

            processFetchedFiles(attachments) {   // 서버에서 받은 파일 정보 처리
                const files = attachments.map(file => ({
                    name: file.fileNm,
                    size: file.fileSize,
                    fileNo: file.fileNo,
                    sno: file.sno
                }));

                this.updateFileList(files);
            },

            clearFileList() {  // 파일 목록 초기화
                const fileList = document.getElementById('fileList');

                fileList.innerHTML = '';
                this.totalFileSize = 0;
                this.successfulFileCount = 0;
                this.failedFileCounts = 0;
                this.existingFiles = [];
                this.updateFileSizeSummary();
                this.updateFileCount();
                this.updateFailedFileCount();

                // 파일 목록이 비었을 때 메시지 표시
                const dataInfo = document.querySelector('.data_info');
                const attachList = document.querySelector('.attach_list');

                if (fileList.querySelectorAll('.list_item').length === 0) {
                    dataInfo.classList.remove('hide');
                    attachList.classList.add('hide');
                }
            },

            removeFileFromProject(fileNo, fileKey) {   // 파일 삭제 처리 함수
                if (!this.removedFiles[dsgnInput.dsgnNo]) {
                    this.removedFiles[dsgnInput.dsgnNo] = [];
                }
                this.removedFiles[dsgnInput.dsgnNo].push({ fileNo, fileKey });
            },

            updateFileSizeSummary() {  // 파일 크기 업데이트
                const totalSizeText = this.formatFileSize(this.totalFileSize);
                document.getElementById('uploadedFileSize').textContent = `${totalSizeText}`;
            },

            formatFileSize(size) { // 파일 크기 포맷팅
                if (size >= 1024 * 1024) {
                    return (size / (1024 * 1024)).toFixed(2) + ' MB';
                } else if (size >= 1024) {
                    return (size / 1024).toFixed(2) + ' KB';
                } else {
                    return size + ' bytes';
                }
            },

            updateFileList(files) { // 파일 목록 업데이트
                const existingFileNames = this.existingFiles.map(file => file.name);
                const fileListElement = document.getElementById('fileList');
                const dataInfo = document.querySelector('.data_info');
                const attachList = document.querySelector('.attach_list');
                this.totalFileSize = this.existingFiles.reduce((sum, file) => sum + (file.size || 0), 0);

                if (files.length === 0 && this.existingFiles.length === 0) {
                    dataInfo.classList.remove('hide');
                    attachList.classList.add('hide');
                } else {
                    dataInfo.classList.add('hide');
                    attachList.classList.remove('hide');

                    const allFiles = [...this.existingFiles, ...files];

                    allFiles.forEach(file => {
                        if (!existingFileNames.includes(file.name)) {
                            const fileItem = this.createFileItem(file, fileListElement);
                            this.handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList);
                        }
                    });

                    this.updateFileCount();
                    this.updateFailedFileCount();
                }
            },

            createFileItem(file, fileListElement) { // 파일 목록 내 파일 만들기
                const fileItem = document.createElement('li');
                fileItem.classList.add('list_item');
                fileItem.dataset.filename = file.name;
                fileItem.dataset.fileNo = file.fileNo || '';
                fileItem.dataset.sno = file.sno || '';

                const fileName = document.createElement('span');
                fileName.classList.add('f_name');
                fileName.textContent = file.name;

                const fileSizeText = this.formatFileSize(file.size);
                const fileSize = document.createElement('span');
                fileSize.classList.add('f_capacity');
                fileSize.textContent = fileSizeText;

                const progressContainer = document.createElement('span');
                progressContainer.classList.add('f_progress');

                const progress = document.createElement('span');
                progress.classList.add('progress');

                const successIndicator = document.createElement('span');
                successIndicator.classList.add(file.size > this.maxTotalFileSize ? 'fail' : 'sucess');
                successIndicator.innerHTML = file.size > this.maxTotalFileSize ? '<i class="ic ic-close"></i>' : '<i class="ic ic-check"></i>';

                if (file.size > this.maxTotalFileSize) {
                    progress.innerHTML = `<span class="bar" style="width: 100%;"></span>`;
                    progress.classList.add('fail');
                    this.failedFileCounts++;
                } else {
                    progress.innerHTML = `<span class="bar" style="width: 0%;"></span>`;
                    progress.classList.add('ing');
                }

                progressContainer.appendChild(progress);
                progressContainer.appendChild(successIndicator);

                fileItem.appendChild(this.createRemoveButton(file, fileListElement));
                fileItem.appendChild(fileName);
                fileItem.appendChild(progressContainer);
                fileItem.appendChild(fileSize);

                fileListElement.appendChild(fileItem);
                this.totalFileSize += file.size;
                this.updateFileSizeSummary();

                if (file.size <= this.maxTotalFileSize) {
                    this.successfulFileCount++;
                    this.existingFiles.push(file);
                    this.uploadFile(file, fileItem);
                }

                return fileItem;
            },
            createRemoveButton(file, fileListElement) { // 삭제 버튼 추가
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.classList.add('icon_btn');
                removeButton.innerHTML = '<i class="ic ic-close"></i><span class="blind">삭제</span>';
                return removeButton;
            },
            handleFileItemClick(fileItem, file, fileListElement, dataInfo, attachList) {
                const removeButton = fileItem.querySelector('.icon_btn');
                removeButton.addEventListener('click', () => {
                    this.removeFileFromProject(file.fileNo, file.fileKey);
                    fileItem.remove();
                    this.totalFileSize -= file.size;
                    this.updateFileSizeSummary();

                    if (file.size <= this.maxTotalFileSize) {
                        this.successfulFileCount--;
                        this.updateFileCount();
                    } else {
                        this.failedFileCounts--;
                        this.updateFailedFileCount();
                    }

                    this.existingFiles = this.existingFiles.filter(f => f.fileNo !== file.fileNo || f.sno !== file.sno);

                    if (fileListElement.querySelectorAll('.list_item').length === 0) {
                        dataInfo.classList.remove('hide');
                        attachList.classList.add('hide');
                    }
                    document.querySelector('#fileInput').value = '';
                });
            },

            updateFileCount() { // 파일 개수 업데이트
                const uploadedFileCountElement = document.getElementById('uploadedFileCount');
                uploadedFileCountElement.textContent = this.successfulFileCount > 0 ? this.successfulFileCount : '0';
            },

            updateFailedFileCount(failedCount) { // 실패한 파일 개수 업데이트
                const failedFileCountElement = document.getElementById('failedFileCount');
                failedFileCountElement.textContent = this.failedFileCounts > 0 ? this.failedFileCounts : '0';
            },

            uploadFile(file, fileItem) { // 파일 업로드 상태 확인
                const formData = new FormData();
                formData.append('file', file);

                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/upload', true);

                xhr.upload.onprogress = (event) => {
                    if (event.lengthComputable) {
                        const percentComplete = Math.round((event.loaded / event.total) * 100);
                        this.updateProgress(file.name, percentComplete, fileItem);
                    }
                };
                xhr.onload = () => {
                    this.updateProgress(file.name, xhr.status === 200 ? 100 : 0, fileItem, xhr.status === 200);
                };
                xhr.onerror = () => {
                    this.updateProgress(file.name, 0, fileItem, false);
                };
                xhr.send(formData);
            },

            updateProgress(fileName, percent, fileItem, success = true) { // 파일 업로드 상태바
                const progressBar = fileItem.querySelector('.progress .bar');
                const progressContainer = fileItem.querySelector('.progress');
                const successIndicator = fileItem.querySelector('.sucess');
                progressBar.style.width = percent + '%';

                if (percent === 100) {
                    progressBar.style.display = 'none';
                    progressContainer.classList.remove('ing');
                    successIndicator.classList.remove('hide');
                    successIndicator.classList.add(success ? 'sucess' : 'fail');
                    successIndicator.innerHTML = success ? '<i class="ic ic-check"></i>' : '<i class="ic ic-close"></i>';
                } else {
                    progressBar.style.display = 'block';
                    successIndicator.classList.add('hide');
                    progressBar.classList.add('ing');
                }
            },

            formatFileSize(size) { // 파일 크기 포맷
                return size < 1024 ? `${size} bytes` : size < 1048576 ? `${(size / 1024).toFixed(2)} KB` : `${(size / 1048576).toFixed(2)} MB`;
            },
	    }
    };
    
</script>
