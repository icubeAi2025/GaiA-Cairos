<article id="split-0" class="treeview_area g-row2 ty1">
	<div class="treeview_area">
		<div class=" treeview ty_pd0" id="dsgn_phase_list"></div>
	</div>
</article>
<script>
	//// 설계단계 Tree
	var dsgnPhase = {
		tree: {
			obj: null,
			refresh() {
				this.obj.jstree(true).refresh();
			},

			getNode(id) {
				return this.obj.jstree("get_node", id);
			},

			// search() {
			// 	const keyword = $('input[name="treeKeyword"]').val();
			// 	$("#jstree").jstree("search", keyword);  
			// },

			init() {
				const dsgnPhaseListGet = {
				}
				var url = `/api/design/dsgnPhase/list?pjtNo=${pjtInfo.pjtNo}&cntrctNo=${encodeURIComponent(cntrctNo)}&dsgnPhaseCd=${encodeURIComponent(dsgnPhaseCd)}`;

				// 기존 jstree 객체가 있으면 파괴 후 다시 초기화
				if (this.obj && $.jstree.reference(this.obj)) {
					this.obj.jstree("destroy").empty();
				}

				this.obj = $("#dsgn_phase_list").jstree({
					// plugins: ["search"],
					// search: {
					// 	"show_only_matches" : true,
					// 	"show_only_matches_children" : true,
					// },
					core: {
						data(obj, cb) {
							gaiaCommon.get(url, { dsgnPhaseListGet }, function (result) {
								var data = [];

								// 오늘 날짜 가져오기 (시간 제거)
								let today = new Date();
								today.setHours(0, 0, 0, 0);

								// 루트 노드 추가
								var rootNode = {
									id: "root",
									parent: "#",  // 최상위 노드
									text: "설계단계",
									state: { opened: true }, // 기본적으로 펼쳐진 상태
									li_attr: { class: "root-node" } // CSS 클래스 추가 가능
								};

								data.push(rootNode); // 루트 노드 추가

								if (result.details?.dsgnPhaseList) {
									result.details?.dsgnPhaseList.forEach((item, index) => {
										// 설계 상황 상태 설정
										let statusText = "";

										if (item.endDate) {
											// 날짜 변환 (시간 제거)
											let endDate = new Date(item.endDate);
											let startDate = new Date(item.bgnDate);
											endDate.setHours(0, 0, 0, 0);
											startDate.setHours(0, 0, 0, 0);

											if (startDate > today && endDate > today) {
												statusText = `대기`;
											} else if (startDate <= today && endDate >= today) {
												statusText = `진행중`;
											} else if (endDate < today) {
												statusText = `종료`;
											}
											statusText = `(${statusText} ${item.endCount}/${item.totalCount})`;
										}

										data.push({
											id: item.dsgnPhaseNo,
											parent: 'root',
											text: item.dsgnPhaseNm + statusText, // 상태 추가
											state: { opened: false },
											data: item,
											li_attr: {
												// class: item.menuUseYn === 'N' ? 'disabled-node' : '' // 사용하지 않는 메뉴의 경우, 다른 색 처리
											}
										});
									});
									cb.call(obj, data);
								}
							});
						},
						check_callback: true, // 요거이 없으면, create_node 안먹음
						themes: {
							"theme": "default",
							"dots": false,
							"responsive": false,
							"icons": false
						}
					},
				});

				this.obj.on("ready.jstree", function (e, data) {
					dsgnPhase.tree.openFirstChild('#', data); // 루트 노드에서 시작하여 첫 번째 자식만 열기

					if (dsgnPhaseNo) {
						dsgnPhase.tree.selectNode(dsgnPhaseNo); // 트리가 준비된 후 dsgnPhaseNo를 기준으로 노드 선택
						// page.init();
					} else {
						// 첫 번째 자식 노드 자동 선택 (루트 제외)
						var rootNode = data.instance.get_node("root"); // 루트 노드 가져오기
						if (rootNode.children.length > 0) {
							var firstChildId = rootNode.children[0]; // 첫 번째 자식 ID 가져오기
							console.log("첫 노드: ", firstChildId);
							dsgnPhase.tree.selectNode(firstChildId); // 첫 번째 자식 노드 선택
						} else {
							// console.error("설계 없음");
							if ("0101" === dsgnPhaseCd) {
								// 결함 추가, 수정 화면 숨기기
								dsgnInput.formBoxReset();
								$("#dsgn_list").hide();
								$("#dsgn_cu").hide();
								$("#dsgn_detail_list").hide();
								// $('.more_info').removeClass('open');


								// // 새창이 열려있을 시, 닫기
								// if (dsgnCuPopup != null) dsgnCuPopup.close();
								// if(dsgnDetailPopup!= null) dsgnDetailPopup.close();

                                gaiaCommon.customAlert("결함 단계가 존재하지 않습니다.");
							}
							else if ("0102" === dsgnPhaseCd) {
								//목록 화면 아닌 요소들 숨기기
								$(".search_wrap").hide();
								$(".dsgn_btn").hide();
								$(".gridContainer").hide();
								page.detailSearchListAllClose();
                                gaiaCommon.customAlert("설계 단계가 존재하지 않습니다.");
							}
							else if ("0103" === dsgnPhaseCd) {
								$('#page_contents').hide();
                                gaiaCommon.customAlert("설계 단계가 존재하지 않습니다.");
								// gaiaCommon.customAlert("설계 단계가 존재하지 않습니다. 단계 설정 페이지로 이동합니다.", function(){
								// 	window.location.href = `/design/setting?cntrctNo=${cntrctNo}`;
								// });
							}
							else if ("0104" === dsgnPhaseCd) {
								$('#page_contents').hide();
                                gaiaCommon.customAlert("설계 단계가 존재하지 않습니다.");
								// gaiaCommon.customAlert("설계 단계가 존재하지 않습니다. 단계 설정 페이지로 이동합니다.", function(){
								// 	window.location.href = `/design/setting?cntrctNo=${cntrctNo}`;
								// });
							}
						}
					}
				});

				this.obj.on("select_node.jstree", function (e, data) {
					//루트노드는 선택 X
					if (data.node.id === "root") {
						e.preventDefault(); // 선택 이벤트 방지
						dsgnPhase.tree.obj.jstree(true).deselect_node("root"); // 선택 해제
						return false;
					}

					// 오늘 날짜 가져오기 (시간 제거)
					let today = new Date();
					today.setHours(0, 0, 0, 0);

					// 날짜 변환 (시간 제거)
					let endDate = new Date(data.node.data.endDate);
					let startDate = new Date(data.node.data.bgnDate);
					endDate.setHours(0, 0, 0, 0);
					startDate.setHours(0, 0, 0, 0);

					dsgnPhaseNo = data.node.id;
					// 1. 설계 목록 화면 나타나기 - dsgnPhaseCd 값에 따라 다른 처리.
					if ("0101" === dsgnPhaseCd) {
						// 1-1. 결함 목록 그리드 초기화
						page.dsgn.gridInit(cntrctNo, data.node.id);

						// // 2. 결함 추가, 수정 화면 숨기기
						dsgnInput.formBoxReset();
						$("#dsgn_list").show();

						$("#dsgn_cu").hide();
						$("#dsgn_detail_list").hide();
						$('.more_info').removeClass('open');

                        $("[data-name='search_detail']").removeClass("on");


						// 새창이 열려있을 시, 닫기
						if (dsgnCuPopup != undefined) dsgnCuPopup.close();
						if (dsgnDetailPopup != undefined) dsgnDetailPopup.close();
					}
					else if ("0102" === dsgnPhaseCd) {
						page.init();
					}
					else if ("0103" === dsgnPhaseCd) {
						isEnd = endDate < today ? true : false;
						page.init();
					}
					else if ("0104" === dsgnPhaseCd) {
						isEnd = endDate < today ? true : false;

                        if(currentPage && currentDsgnNo) {
                            page.read(currentPage, currentDsgnNo);
                        } else {
                            page.init();
                        }
					}

					// 1-1. 설계 목록 그리드 초기화
					// console.log(cntrctNo, data.node.id);
					// page.dsgn.gridInit(cntrctNo, data.node.id);

					// 2. 설계 추가, 수정 화면 숨기기

					// 3. 설계 단계 브레드크럼 변경
					let dsgnPhasePath = ['설계 단계'];
					let currentNode = data.node;

					while (currentNode && currentNode.data) {
						dsgnPhasePath.push(currentNode.data.dsgnPhaseNm);
						currentNode = $("#dsgn_phase_list").jstree("get_node", currentNode.parent);
					}

					$("#dsgn_phase_path").text(gaiaCommon.decodeSafeText(dsgnPhasePath.join(' > ')));
					$("#dsgn_phase_path").css("visibility", "visible");

				});

			},

			// 특정 노드를 선택 상태로 만드는 함수
			selectNode(dsgnPhaseNo) {
				this.obj.jstree(true).deselect_all();
				this.obj.jstree("select_node", dsgnPhaseNo);
			},

			//첫번째 노드만 열린 상태로 하는 함수
			openFirstChild(nodeId, data) {
				var node = data.instance.get_node(nodeId);

				if (node.children.length > 0) {
					data.instance.open_node(node.children[0]); // 첫 번째 자식 노드만 열기
				}
			}
		},
	};
</script>
<script src="/webjars/jstree/jstree.min.js"></script>