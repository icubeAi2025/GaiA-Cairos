
{% extends 'layout/base_popup' %}
{% block content %}
<article class="conts_area">
    <div class="conts" style="height: 100%;">
        <div class="conts_form">

            <!-- <h3 class="conts_tit" id="dsgn_cu_tit">검토 의견 추가</h3> -->
            <div class="btn_area s_default">
                <button type="button" class="btn _outline" id="action-button" onclick="dsgnInputPop.save()">{{ message('btn.006') }}</button>
                <button type="button" class="btn _outline" id="close-popup" onclick="dsgnInputPop.close()">{{ message('btn.007') }}</button>
            </div>
            <div class="form_box" id="dsgn_cu_form">
                <div class="container" style="display: flex; align-items: center;">
                    <span class="caption">
                        <span><b class="c_red">*</b> {{ message('item.com.023') }}</span>
                    </span>
                </div>
                <div class="group">
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">제목</div>
                            <div class="form_data">
                                <input type="text" class="maxlength" id="cu_title" name="title" required maxlength="255">
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label required">검토 분류</div>
                            <div class="form_data">
                                <div class="selectbox sort" style="margin-left: 0;">
                                    <span class="selectbox" id="cu_dsgnCd_box">
                                    </span>
                                </div>  
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">문서 번호</div>
                            <div class="form_data">
                                <input type="text" class="maxlength" id="cu_docNo" name="docNo" maxlength="100">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">도면 번호</div>
                            <div class="form_data">
                                <input type="text" class="maxlength" id="cu_dwgNo" name="dwgNo" maxlength="255">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">도면 명</div>
                            <div class="form_data">
                                <input type="text" class="maxlength" id="cu_dwgNm" name="dwgNm" maxlength="2000">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form_label">검토 의견</div>
                            <div class="form_data">
                                <textarea class="maxlength" id="cu_rvw_opnin" maxlength="2000"></textarea>
                            </div>
                        </div>
                    </div>
                    <!-- row -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label">문제점</div>
                            <div class="form_data">
                                <div class="item_group" role="group" aria-label="Basic radio group">
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="cu_isuY" name="isuYn" value="Y" checked>
                                        <span class="check_label">Yes</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="cu_isuN" name="isuYn" value="N">
                                        <span class="check_label">No</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
            
                    <div class="row">
                        <div class="col">
                            <div class="form_label">교훈</div>
                            <div class="form_data">
                                <div class="item_group" role="group" aria-label="Basic radio group">
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="cu_lesnY" name="lesnYn" value="Y" checked>
                                        <span class="check_label">Yes</span>
                                    </label>
                                    <label class="form_check">
                                        <input class="check_mark" type="radio" id="cu_lesnN" name="lesnYn" value="N">
                                        <span class="check_label">No</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- row -->
                    <div class="row">
                        <div class="col">
                            <div class="form_label">{{ message('btn.021') }}</div> <!-- 파일첨부 -->
                            <div class="form_data">
                                <div class="attach-component" id="designReview-fileAttach"></div>
                                {% include 'sub/file_attach_component' %}
                            </div>
                        </div>
                    </div>
                    <div class="g-group g-col2" style="grid-template-columns: 50% 50%;">
                        <div class="group">
                            <div class="s_conts">
                                <span class="tree_route">검토 도서</span>
                
                
                                <!-- S: Slick Slider -->
                                <div class="process_photo">
                                    <div class="rvw_dwg_photo" id="rvw_dwg_photo">
                                    </div>
                
                                    <div class="slick_nav">
                                        <div class="btn_area">
                                            <div class="btn_group _outline">
                                                <button type="button" class="btn icon_btn" onclick="dsgnInputPop.addDwgPhoto('rvw')">
                                                    <i class="ic ic-picture-one"></i>
                                                    <span class="blind">추가</span>
                                                </button>
                                                <button type="button" class="btn icon_btn" onclick="dsgnInputPop.photo.delPhoto('rvw_dwg_photo')">
                                                    <i class="ic ic-delete"></i>
                                                    <span class="blind">삭제</span>
                                                </button>
                                            </div>
            
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" id="cu_rvwDwgNo" value="">
                            </div>
                        </div>
            
                        <div class="group">
                            <div class="s_conts">
                                <span class="tree_route">변경 요청</span>
                    
                                <div class="process_photo">
                                    <div class="chg_dwg_photo" id="chg_dwg_photo">
                                    </div>
                    
                                    <div class="slick_nav">
                                        <div class="btn_area">
                                            <div class="btn_group _outline">
                                                <button type="button" class="btn icon_btn" onclick="dsgnInputPop.addDwgPhoto('chg')">
                                                    <i class="ic ic-picture-one"></i>
                                                    <span class="blind">추가</span>
                                                </button>
                                                <button type="button" class="btn icon_btn" onclick="dsgnInputPop.photo.delPhoto('chg_dwg_photo')">
                                                    <i class="ic ic-delete"></i>
                                                    <span class="blind">삭제</span>
                                                </button>
                                            </div>
            
                                        </div>
                                    </div>
                                    <input type="hidden" id="cu_chgDwgNo" value="">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="dwg_popup" class="popup_overlay modal_base" style="display: none;">
                    <!-- 팝업 내용 -->
                </div>
            </div>
        </div>
    </div>
</article>
<script>
    var fileAttachComponent;
    // 새창 모드일때, 부모창이 있는지 감지.
	if(opener){
		opener.document.onkeydown = fkey;
		opener.document.onkeypress = fkey;
		opener.document.onkeyup = fkey;

		// 부모창의 f5 새로고침 누를때 열려있는 팝업 창 닫기
		function fkey(e){
			if (window.event.keyCode == 116) {
				window.close();
			}
		};

		window.opener.onbeforeunload = function () {
			// 부모창이 새로고침되거나 페이지 이동할 때 실행
			if (window) {
				// 자식 창 닫기
				window.close();
			}
		};

	}

    $(document).ready(function () {
        gaia.create({
            $init: function ($params) {
                dsgnInputPop.initializeSelectBoxes();
                dsgnInputPop.initFromURL(); // URL에서 파라미터 가져와 초기화

                gaia.loaded = true;
            }
        });
    });
    
    var dsgnInputPop = {
        mode: null,
        cntrctNo: null,
        pjtNo: null,
        dsgnPhaseNo: null,
        dsgnNo: null,
        dwgPhotoMode: null,
        init: function (mode, dsgnNo) {
            this.mode = mode;
            this.dsgnNo = dsgnNo;
            let title;
            if(fileAttachComponent){
                fileAttachComponent.destroy();
            }
            fileAttachComponent = FileAttachComponent.init({
                id:'designReview-fileAttach',
                maxUploadFileSize:100,
            })
            if(this.mode === "create"){
                title = "검토 의견 추가";
            }

            if(this.mode === "update"){
                title = "검토 의견 수정";
                this.updateInputSet();
            }

            // $("#dsgn_cu_tit").text(title);

            //page 헤더 생성
            gaiaPortal.navMenuInit('M080102', title);
            $("#menuDepth").append('<li class=\"breadcrumb_item\">'+ title +'</li>');

        },

        // URL에서 파라미터를 가져와 기본 값 설정
        initFromURL: function () {
            const params = new URLSearchParams(window.location.search);
            this.mode = params.get("mode") || "create"; // 기본값은 create
            this.dsgnNo = params.get("dsgnNo") || null;
            const cntrctNo = params.get("cntrctNo"); // 계약 번호
            const pjtNo = params.get("pjtNo"); // 프로젝트 번호
            const dsgnPhaseNo = params.get("dsgnPhaseNo"); // 설계 검토 단계 번호

            if (!cntrctNo || !dsgnPhaseNo) {
                gaiaCommon.customAlert("결함 단계 정보가 없습니다.");
                window.close();
            }

            this.pjtNo = pjtNo;
            this.cntrctNo = cntrctNo;
            this.dsgnPhaseNo = dsgnPhaseNo;

            this.init(this.mode, this.dsgnNo);
        },

        close: function() {

            if(opener){
                opener.dsgnInput.close();
                window.close();
            }
        },

        save: function () {
            if (this.mode == "create") {
                this.create();
            } else if (this.mode == "update") {
                this.update();
            }
        },

        create: function () {
            if(!this.cntrctNo || !this.dsgnPhaseNo){
                gaiaCommon.customAlert('저장할 설계 검토 단계 정보가 없습니다.');
                return false;
            }

            // 필수 값 유효성 확인
            if (!this.vaildateData()) return false;

            let dsgnData = {
                cntrctNo: this.cntrctNo,
                dsgnPhaseNo: this.dsgnPhaseNo,
                title: $("#cu_title").val(),
                dsgnCd: $("#cu_dsgnCd").val(),
                docNo: $("#cu_docNo").val() || null,
                dwgNo: $("#cu_dwgNo").val() || null,
                dwgNm: $("#cu_dwgNm").val() || null,
                rvwOpnin: $("#cu_rvw_opnin").val() || null,
                isuYn: $("input[name='isuYn']:checked").val() || null,
                lesnYn: $("input[name='lesnYn']:checked").val() || null,
                dwgs: dsgnInputPop.photo.dwgPhotoDataArr.map(dwg => ({
                    dwgCd: dwg.dwgCd,
                    dwgDscrpt: dwg.dscrpt,
                })),
            }

            const formData = new FormData();

            formData.delete('files');
            console.log("UPLOADED FILES : ",fileAttachComponent.state.uploadedFiles)
            for(const file of fileAttachComponent.state.uploadedFiles){
                if(file.success){
                    if(file.realFile){
                        formData.append('files', file.realFile);
                    }
                }
            }

			formData.append('dsgn', new Blob([JSON.stringify(dsgnData)], { type: 'application/json' }));

            // 검토도서, 변경요청 파일 추가
            if (this.photo.rvwPhotoData && this.photo.rvwPhotoData.file) {
                formData.append('rvwPhoto', this.photo.rvwPhotoData.file);
            }

            if (this.photo.chgPhotoData && this.photo.chgPhotoData.file) {
                formData.append('chgPhoto', this.photo.chgPhotoData.file);
            }

            // console.log("설계 검토 저장 입력데이터: ", dsgnData);

            // 서버 전송
            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.postForm("/api/design/review/create",formData, function (response) {
                if (response.ok) {
                    gaiaCommon.customAlert('{{ message("msg.044") }}', function () { // 저장되었습니다
                        // dsgnInput.formBoxReset(); // 폼 초기화
                        dsgnInputPop.close(); // 기존 close() 호출
                        gaiaCommon.LoadingOverlay('body', false);
                    });
                }else{
                    gaiaCommon.LoadingOverlay('body', false);
                    gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
                }
            },function (error) {
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
            })
        },

        update: function () {
            const dsgnNo = dsgnInputPop.dsgnNo;

            if(!this.cntrctNo || !this.dsgnPhaseNo || !dsgnNo){
                gaiaCommon.customAlert('저장할 설계 검토 정보가 없습니다.');
                return false;
            }

            // 필수 값 유효성 확인
            if (!this.vaildateData()) return false;

            let dsgnData = {
                cntrctNo: this.cntrctNo,
                dsgnPhaseNo: this.dsgnPhaseNo,
                dsgnNo: dsgnNo,
                title: $("#cu_title").val(),
                dsgnCd: $("#cu_dsgnCd").val(),
                docNo: $("#cu_docNo").val(),
                dwgNo: $("#cu_dwgNo").val(),
                dwgNm: $("#cu_dwgNm").val(),
                rvwOpnin: $("#cu_rvw_opnin").val(),
                isuYn: $("input[name='isuYn']:checked").val(),
                lesnYn: $("input[name='lesnYn']:checked").val(),
                rvwDwgNo: $("#cu_rvwDwgNo").val(),
                chgDwgNo: $("#cu_chgDwgNo").val(),
                deleteRvwSno: dsgnInputPop.photo.deleteRvwSno,
				deleteRvwFileNo: dsgnInputPop.photo.deleteRvwFileNo,
                deleteChgSno: dsgnInputPop.photo.deleteChgSno,
                deleteChgFileNo: dsgnInputPop.photo.deleteChgFileNo,
            }

            // dwgs 추가 조건
            if (this.photo.rvwPhotoData || this.photo.chgPhotoData) {
                dsgnData.dwgs = dsgnInputPop.photo.dwgPhotoDataArr.map(dwg => ({
                    dwgCd: dwg.dwgCd,
                    dwgDscrpt: dwg.dscrpt,
                }));
            }

            const formData = new FormData();

            // 검토도서, 변경요청 파일 추가
            if (this.photo.rvwPhotoData && this.photo.rvwPhotoData.file) {
                formData.append('rvwPhoto', this.photo.rvwPhotoData.file);
            }

            if (this.photo.chgPhotoData && this.photo.chgPhotoData.file) {
                formData.append('chgPhoto', this.photo.chgPhotoData.file);
            }
            
            if (this.file.removedFiles[dsgnNo]) {
				this.file.removedFiles[dsgnNo].forEach(file => {
					formData.append('removedFiles[]', file.fileNo);
					formData.append('removedSnos[]', file.sno);
				});
			}

			formData.delete('files');
            formData.append('removedFiles',
                new Blob([JSON.stringify(fileAttachComponent.state.deletedFiles)],
                    {type:"application/json"}
                ));

            formData.delete('files');
            for(const file of fileAttachComponent.state.uploadedFiles){
                if(file.success){
                    if(file.realFile){
                        formData.append('files', file.realFile);
                    }
                }
            }
			formData.append('dsgn', new Blob([JSON.stringify(dsgnData)], { type: 'application/json' }));


            console.log("설계 검토 수정 입력데이터: ", dsgnData);

            
            // // 서버 전송
            gaiaCommon.LoadingOverlay('body', true);
            gaiaCommon.postForm("/api/design/review/update",formData,function (response) {
                if (response.ok) {
                    gaiaCommon.customAlert('{{ message("msg.007") }}', function () { // 수정되었습니다
                        // dsgnInput.formBoxReset(); // 폼 초기화
                        dsgnInputPop.close(); // 기존 close() 호출
                        gaiaCommon.LoadingOverlay('body', false);
                    });
                } else{
                    gaiaCommon.LoadingOverlay('body', false);
                    gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
                }
            },function (error) {
                gaiaCommon.LoadingOverlay('body', false);
                gaiaCommon.customAlert('{{ message("msg.045") }}');	// 저장에 실패 했습니다.
            })
        },


        updateInputSet(){
            const dsgnNo = dsgnInputPop.dsgnNo;
            if(!this.cntrctNo || !this.dsgnPhaseNo || !dsgnNo){
                gaiaCommon.customAlert("설계 검토 정보가 없습니다.");
                return false;
            }

            gaiaCommon.get(`/api/design/designReview/dsgn/${this.cntrctNo}/${this.dsgnPhaseNo}/${dsgnNo}`, {}, function(result){
                if(result.ok){
                    let inputData = result.details.dsgn;
                    let attachments = result.details.attachments;
                    let chgDwgAttach = result.details.chgDwgAttach;
                    let rvwDwgAttach = result.details.rvwDwgAttach;

                    // 설계 검토 데이터 설정
                    $("#cu_title").val(gaiaCommon.decodeSafeText(inputData.title));        // 제목
                    $("#cu_dsgnCd").val(inputData.dsgnCd);      // 검토 분류
                    $("#cu_docNo").val(gaiaCommon.decodeSafeText(inputData.docNo));        // 문서 번호
                    $("#cu_dwgNo").val(gaiaCommon.decodeSafeText(inputData.dwgNo));        // 도면 번호
                    $("#cu_dwgNm").val(gaiaCommon.decodeSafeText(inputData.dwgNm));        // 도면 명
                    $("#cu_rvw_opnin").val(gaiaCommon.decodeSafeText(inputData.rvwOpnin)); // 검토 의견
                    $("#cu_rvwDwgNo").val(inputData.rvwDwgNo); // 검토 도서 번호
                    $("#cu_chgDwgNo").val(inputData.chgDwgNo); // 변경 요청 번호

                    // 문제점
                    if(inputData.isuYn === "Y"){ 
                        $("#cu_isuY").prop('checked', true);
                        $("#cu_isuN").prop('checked', false);
                    }else{
                        $("#cu_isuN").prop('checked', true);
                        $("#cu_isuY").prop('checked', false);
                    }

                    // 교훈
                    if(inputData.lesnYn === "Y"){
                        $("#cu_lesnY").prop('checked', true);
                        $("#cu_lesnN").prop('checked', false);
                    }else{
                        $("#cu_lesnN").prop('checked', true);
                        $("#cu_lesnY").prop('checked', false);
                    }

                    
                    //첨부파일 데이터 설정
                    const fileList = document.getElementById('fileList');
                    if (fileList) {
                        dsgnInputPop.file.clearFileList(); // 기존 파일 목록 지우기
                        if (attachments && attachments.length > 0) {
                            dsgnInputPop.file.processFetchedFiles(attachments); // 새 파일 목록 추가
                        } else {
                            dsgnInputPop.file.updateFileSizeSummary(); // 파일 사이즈 요약 업데이트
                            dsgnInputPop.file.updateFileCount(); // 파일 개수 업데이트
                            
                        }
                    }

                    // 검토 도서, 변경 요청 데이터 설정
                    if(rvwDwgAttach){
                        rvwDwgAttach.dwgDscrpt = inputData.rvwDwgDscrpt;
                        dsgnInputPop.photo.loadDwgPhotos(rvwDwgAttach, "rvw_dwg_photo");
                    }
                    
                    if(chgDwgAttach){
                        chgDwgAttach.dwgDscrpt = inputData.chgDwgDscrpt;
                        dsgnInputPop.photo.loadDwgPhotos(chgDwgAttach, "chg_dwg_photo");
                    }
                    //첨부파일 데이터 설정
                    fileAttachComponent.destroy();
                    fileAttachComponent = FileAttachComponent.init({
                        id:'designReview-fileAttach',
                        maxUploadFileSize:100,
                        orgFiles:attachments
                    })

                }
            },function(error){
                console.log(`[Modal] 검토 의견 수정 초기 렌더링 실패, /api/design/designReview/dsgn/${cntrctNo}/${dsgnPhaseNo}/${dsgnNo}, PARAMS : {}`,error);
            });
        },

        // 입력된 값 모두 초기화.
        formBoxReset: function() {
            // `form_box` 클래스 하위의 모든 입력 요소 선택
            const formBoxElements = document.querySelector("#dsgn_cu_form");

            if (formBoxElements) {
                // 모든 input 요소 초기화
                formBoxElements.querySelectorAll("input").forEach(input => {
                    if (input.type === "checkbox" || input.type === "radio") {
                        input.checked = false; // 체크박스 및 라디오 버튼 초기화
                    } else {
                        input.value = ""; // 일반 입력 필드 초기화
                    }
                });

                // 모든 select 요소 초기화
                formBoxElements.querySelectorAll("select").forEach(select => {
                    select.selectedIndex = 0; // 첫 번째 옵션으로 설정
                });

                // 모든 textarea 요소 초기화
                formBoxElements.querySelectorAll("textarea").forEach(textarea => {
                    textarea.value = "";
                });

                // 파일 입력 초기화
                const fileInput = document.getElementById('fileInput');
                if (fileInput) {
                    fileInput.value = "";
                }

                // 첨부 파일 리스트 초기화
                const fileList = document.getElementById('fileList');
                if (fileList) {
                    fileList.innerHTML = '';
                }
            }
        },


        // 필수 값 유효성 확인
        vaildateData: function(){
            let addRegex = /^(?!\s)[^\/:*?"<>|]+$/;
            let isValid = true;

            $(".required").each(function () {
                const inputElement = $(this).closest(".row").find("input, select, textarea");
                if (!inputElement.val()) {
                    gaiaCommon.customAlert("{{ message('msg.008') }}"); // 필수 값이 누락되었습니다.
                    inputElement.focus();
                    console.log(inputElement);
                    isValid = false;
                    return false;
                }
            });

            if (!isValid) return false; // 필수 값 체크에서 실패한 경우 종료

            // 유효성 검사 대상 필드 리스트
            const fieldsToValidate = ['#cu_title', '#cu_docNo', '#cu_dwgNo', '#cu_dwgNm', '#cu_rvw_opnin'];

            // 각 필드에 이벤트 리스너 추가
            fieldsToValidate.forEach(selector => {
                const value = $(selector).val();

                // 값이 없는 경우 유효성 검사 패스
                if (!value || value === "") return;

                if (!addRegex.test(value)) {
                    gaiaCommon.customAlert("{{ message('msg.079') }}" + '/ , : , * , ? , " , < , >  , |'); // 유효하지 않은 값이 포함되어 있습니다 : [/, :, *, ?, ", <, >, ., |]
                    $(selector).focus();
                    isValid = false;
                    return false;
                }
            });

            return isValid;
        },

        // 검토분류 콤보박스 생성
		// 셀렉트박스 호출
        makeSelectBox: function (cmnGrpCd, selectBoxId, elementId, ckeckedValue) {
            let initText = "검토 분류";
            let requestData = {
                cmnGrpCd: cmnGrpCd,
                selectBoxId: selectBoxId,
                selectBoxNmType: "KOR", //TODO: 영어일 때 항목 가져오는 거 필요.
                ckeckedValue: ckeckedValue,
                orderByCol: "",
                orderByType: "",
                initText: initText,
                paramNm: selectBoxId,
                funName: "",
                funParam: "this.value",
                funtype: "onchange",
            };

            gaiaCommon.post("/api/util/make-selectBox",[requestData],function (data) {
                let returnMap = data.details.returnMap;

                // 메인 화면 결함분류 콤보박스 업데이트
                let addAppLineContent = document.getElementById(elementId);
                addAppLineContent.innerHTML = returnMap[selectBoxId];
            },function (error) {
                console.log(`[Modal] 결함 분류 드롭다운 리스트 생성 실패, /api/util/make-selectBox, PARAMS : {[requestData]}`,error);
            })
        },

        initializeSelectBoxes(ckeckedValue) {
            dsgnInputPop.makeSelectBox(
                "19a8bb53-74b4-405a-8d91-2b38555fc7d9",
                "cu_dsgnCd",
                "cu_dsgnCd_box",
				ckeckedValue
            );
        },

        addDwgPhoto: function (mode) {
            gaiaCommon.checkAuth("DM_DSGN_CU_02", () => {
                this.dwgPhotoMode = mode;
                $("#dwg_popup").load(`/design/designReview/dwgPhoto/modal?mode=${mode}&pjtNo=${this.pjtNo}&cntrctNo=${this.cntrctNo}`);
                $("#dwg_popup").css({ "display": "flex" });
            });
		},

        // 사진관련
        photo : {
            rvwPhotoData: null,
            chgPhotoData: null,
            dwgPhotoDataArr: [],
            deleteRvwSno: null,
            deleteRvwFileNo: null,
            deleteChgSno: null,
            deleteChgFileNo: null,
            rvwDwgNo: null,
            chgDwgNo: null,

            init: function (rvwDwgAttach, chgDwgAttach) {
                this.loadDwgPhotos(rvwDwgAttach, "rvw_dwg_photo"); // 검토 도서
                this.loadDwgPhotos(chgDwgAttach, "chg_dwg_photo"); // 변경 요청 도서
            },

            loadDwgPhotos: function (data, targetId) {
                if (!data) return; // 데이터가 없으면 종료

                const photoHtml = `
                    <dl class="dl_box p_photo">
                        <dt class="item_dt">
                            <label class="form_check">
                                <input class="check_mark" type="checkbox" name="check" value="0">
                            </label>
                        </dt>
                        <dd class="item_dd">
                            <figure class="p_photo_info">
                                <img src="${data.fileDiskPath.replace(/\\/g, '/').replace(/^.*\/upload/, '/upload')}/${data.fileDiskNm}" alt="${data.fileNm}">
                                <figcaption>
                                    <p class="desc">${data.dwgDscrpt}</p>
                                    <input type="hidden" id="fileNo" value="${data.fileNo}">
                                    <input type="hidden" id="sno" value="${data.sno}">
                                </figcaption>
                            </figure>
                        </dd>
                    </dl>`;

                $(`#${targetId}`).html(photoHtml);

                // 데이터 저장
                if (targetId === "rvw_dwg_photo") {
                    this.rvwPhotoData = data;
                    this.rvwDwgNo = data.rvwDwgNo;
                } else if (targetId === "chg_dwg_photo") {
                    this.chgPhotoData = data;
                    this.chgDwgNo = data.chgDwgNo;
                }
            },

            // 사진 추가
            setPhoto: function (data, mode) {
                this.dwgPhotoDataArr.push(data);
                const photoHtml = 
                    `<dl class="dl_box p_photo">
                        <dt class="item_dt">
                            <label class="form_check">
                                <input class="check_mark" type="checkbox" name="check" value="0">
                            </label>
                        </dt>
                        <dd class="item_dd">
                            <figure class="p_photo_info">
                                <img src=${data.base} alt="검토도서사진">
                                <figcaption>
                                    <p class="desc">${data.dscrpt}</p>
                                </figcaption>
                            </figure>
                        </dd>
                    </dl>`;

                if (mode === "0501") { // 검토 도서
                    if (this.rvwPhotoData) {
                        this.deleteRvwSno = this.rvwPhotoData.sno;
                        this.deleteRvwFileNo = this.rvwPhotoData.fileNo;
                        this.rvwDwgNo = this.rvwPhotoData.rvwDwgNo;
                    }
                    this.rvwPhotoData = data;
                    $("#rvw_dwg_photo").html(photoHtml);
                } 
                else if (mode === "0502") { // 변경 요청
                    if (this.chgPhotoData) {
                        this.deleteChgSno = this.chgPhotoData.sno;
                        this.deleteChgFileNo = this.chgPhotoData.fileNo;
                        this.chgDwgNo = this.chgPhotoData.chgDwgNo;
                    }
                    this.chgPhotoData = data;
                    $("#chg_dwg_photo").html(photoHtml);
                }
            },

            // 사진 삭제
            delPhoto: function (dwgElId) {
                if (dwgElId === 'rvw_dwg_photo') {
                    if (this.rvwPhotoData) {
                        this.deleteRvwSno = this.rvwPhotoData.sno;
                        this.deleteRvwFileNo = this.rvwPhotoData.fileNo;
                    }
                    this.rvwPhotoData = null;
                } 
                else if (dwgElId === 'chg_dwg_photo') {
                    if (this.chgPhotoData) {
                        this.deleteChgSno = this.chgPhotoData.sno;
                        this.deleteChgFileNo = this.chgPhotoData.fileNo;
                    }
                    this.chgPhotoData = null;
                }
                $(`#${dwgElId}`).html('');


                // if (this.photoData) {
                //     if (this.photoData.sno) {
                //         this.deleteSno = this.photoData.sno;
                //     }
                //     if (this.photoData.phtSno) {
                //         this.deletePhtSno = this.photoData.phtSno;
                //     }
                //     this.photoData = null;

                // }
            }
        },
    };
    
</script>
<script src="/webjars/jstree/jstree.min.js"></script>
{% endblock content %}