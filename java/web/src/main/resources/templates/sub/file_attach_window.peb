<div class="file-attach-window hide" id="sample-window-component">
    <div class="window-header">
        <div class="count-area">
            <h5 class="count-msg pop_tit">
<!--                <span class="upload-count"></span>/<span class="max-count"></span>-->
                업로드
            </h5>
        </div>
        <div class="btn_area">
            <button type="button" class="icon_btn minimize">
                <i class="far fa-window-minimize"></i>
                <span class="blind">최소화</span>
            </button>
            <button type="button" class="icon_btn plus">
                <i class="fas fa-plus"></i>
                <span class="blind">최대화</span>
            </button>
            <button type="button" class="icon_btn close">
                <i class="ic ic-close"></i>
                <span class="blind">창닫기</span>
            </button>
        </div>
    </div>
    <div class="window-body">
        <div class="btn_area">
            <button type="button" class="btn _outline clear-all">전체 삭제</button>
            <button type="button" class="btn _fill clear-finish">완료 삭제</button>
        </div>
        <div class="file-area">
            <div class="status-area">
                <div class="percent-area">
                    (<span class="loaded-byte"></span>/<span class="total-byte"></span>)
                    <span class="loaded-percent">0</span>% 완료
                </div>
                <div class="progress-area">
                    <div class="progress-bar-bg">
                        <div class="progress-bar"></div>
                    </div>
                </div>
            </div>
            <ul class="file-list"></ul>
        </div>
    </div>
</div>
<script>
    const fileAttachWindow = {
        id:"",
        uploadPath:"",
        maxCount:0,
        uploadCount:0,
        filesLength:0,
        extraDatas:{},
        preHandler:null,
        success:null,
        error:null,
        init : function(id, uploadPath, extraDatas, preHandler, success, error) {
            this.id = id;
            document.querySelector(`#sample-window-component`).setAttribute("id",id);

            this.uploadPath = uploadPath;
            this.extraDatas = extraDatas;
            this.uploadCount = 0;
            this.maxCount = 0;
            this.preHandler = preHandler;
            this.success = success;
            this.error = error;

            document.querySelector(`#${this.id} .percent-area .total-byte`).textContent = "0KB";
            document.querySelector(`#${this.id} .percent-area .loaded-byte`).textContent = "0KB";
            document.querySelector(`#${this.id} .progress-bar`).style.width=`0%`;

            document.querySelector(`#${this.id} .window-header .btn_area .minimize`).addEventListener("click", (e) => {
                e.stopPropagation();
                this.hide();
            })

            document.querySelector(`#${this.id} .window-header .btn_area .close`).addEventListener("click", (e) => {
                e.stopPropagation();
                this.close();
            })
            document.querySelector(`#${this.id} .window-header .btn_area .minimize`).addEventListener("click", (e) => {
                document.querySelector(`#${this.id}`).classList.remove("show");
                document.querySelector(`#${this.id}`).classList.add("minimized");
            })
            document.querySelector(`#${this.id} .window-header .btn_area .plus`).addEventListener("click", (e) => {
                document.querySelector(`#${this.id}`).classList.add("show");
                document.querySelector(`#${this.id}`).classList.remove("minimized");
            })
            document.querySelector(`#${this.id} .clear-all`).addEventListener("click", (e) => {
                document.querySelectorAll(`#${this.id} .file-list .file-element`).forEach(el => el.remove());
            })

            document.querySelector(`#${this.id} .clear-finish`).addEventListener("click", (e) => {
                document.querySelectorAll(`#${this.id} .file-list .finish`).forEach(el => el.remove());
            })
            document.querySelector(`#${this.id}`).addEventListener("click", (e) => {
                console.log(e.target);
            })
        },
        setExtraDatas:function(extraDatas){
            this.extraDatas = extraDatas;
        },
        setSuccess:function(success){
            this.success = success;
        },
        setError:function(error) {
            this.error = error;
        },
        setUploadPath:function(uploadPath){
            this.uploadPath = uploadPath;
        },
        show:function(){
            document.querySelector(`#${this.id}`).classList.add("show");
            document.querySelector(`#${this.id}`).classList.remove("minimized");
            document.querySelector(`#${this.id}`).classList.remove("hide");
        },
        hide:function(){

            document.querySelector(`#${this.id}`).classList.remove("show");
            document.querySelector(`#${this.id}`).classList.add("minimized");
        },
        close:function(){
            document.querySelector(`#${this.id}`).classList.remove("show");
            document.querySelector(`#${this.id}`).classList.remove("minimized");
            document.querySelector(`#${this.id}`).classList.add("hide");

            this.uploadCount = 0;
            this.maxCount = 0;

            //총 파일 개수 초기화
            // document.querySelector(`#${this.id} .max-count`).textContent = "0";
            //업로드 된 파일 개수 초기화
            // document.querySelector(`#${this.id} .upload-count`).textContent = "0";

            document.querySelector(`#${this.id} .percent-area .loaded-byte`).textContent = "0KB";
            document.querySelector(`#${this.id} .percent-area .total-byte`).textContent = "0KB";
            //로드된 퍼센트 초기화
            document.querySelector(`#${this.id} .percent-area .loaded-percent`).textContent = "0";
            //프로그레스바 크기 초기화
            document.querySelector(`#${this.id} .progress-area .progress-bar`).style.width=`0%`;
            //파일 요소들 모두 지우기
            document.querySelector(`#${this.id} .file-list`).replaceChildren();

        },
        draw:function(files){
            if(this.preHandler){
                this.preHandler();
            }
            console.log("FILES : ",files);

            const loadedPercent = document.querySelector(`#${this.id} .percent-area .loaded-percent`);
            const progressBar = document.querySelector(`#${this.id} .progress-area .progress-bar`);
            const fileList = document.querySelector(`#${this.id} .file-list`);

            progressBar.style.transition = "";
            progressBar.style.width=`0%`;

            const formData = new FormData();
            const xhr = new XMLHttpRequest();

            this.maxCount += files.length;
            // document.querySelector(`#${this.id} .window-header .max-count`).textContent = this.maxCount;

            const steps = [];
            let loaded = 0;
            let filesLength = files.length;


            for(let i=0; i<filesLength; i++){
                const file = files[i];
                loaded += file.size;
                steps[i] = loaded;

                const iconWrap = document.createElement('div');
                iconWrap.classList.add('icon-wrap');

                const icon = document.createElement("i");
                icon.className = `ic`;

                iconWrap.appendChild(icon);

                const successIcon = document.createElement("div");
                successIcon.classList.add("success-icon-area");
                successIcon.appendChild(iconWrap);

                const fileName = document.createElement("div");
                fileName.classList.add("file-name");
                fileName.textContent = file.name;

                const fileSize = document.createElement("div");
                fileSize.classList.add("file-size");
                fileSize.textContent = this.formatBytes(file.size);

                const fileInfo = document.createElement("div");
                fileInfo.classList.add("file-info");

                fileInfo.appendChild(successIcon);
                fileInfo.appendChild(fileName);
                fileInfo.appendChild(fileSize);

                const fileElement = document.createElement("li");
                fileElement.setAttribute("class",`file-element li${i}`);

                fileElement.appendChild(fileInfo);

                fileList.appendChild(fileElement);

                formData.append("files", file);
            }

            for(const key in this.extraDatas){
                formData.append(key,this.extraDatas[key]);
            }

            progressBar.style.transition = "width 0.15s ease";

            xhr.upload.onprogress = (e) => {
                if(e.lengthComputable){
                    document.querySelector(`#${this.id} .percent-area .total-byte`).textContent = this.formatBytes(e.total);
                    document.querySelector(`#${this.id} .percent-area .loaded-byte`).textContent = this.formatBytes(e.loaded);

                    const percent = Math.round((e.loaded / e.total) * 100);
                    loadedPercent.textContent = percent;
                    progressBar.style.width=`${percent}%`;

                    for(let i=0; i<steps.length; i++){
                        if(steps[i]<=e.loaded){
                            document.querySelector(`#${this.id} .file-element.li${i}`).classList.add("finish");
                            document.querySelectorAll(`#${this.id} .file-element.finish .ic`).forEach((item)=> item.classList.add("ic-check"));
                        }
                        else{
                            break;
                        }
                    }

                    this.uploadCount = document.querySelectorAll(`#${this.id} .file-element.finish`).length;
                    // document.querySelector(`#${this.id} .window-header .upload-count`).textContent = this.uploadCount;
                }
            }

            xhr.onload = () => {
                progressBar.style.transition = "";
                setTimeout(()=>{
                    console.log("업로드 성공",files);
                    document.querySelectorAll(`#${this.id} .file-element.finish`).forEach(el => el.className = "file-element finish");

                    if(this.success){
                        this.success(JSON.parse(xhr.responseText));
                    }
                    else{
                        console.log("File Attach Window Success : ",JSON.parse(xhr.responseText));
                    }
                },50)
            };
            xhr.onerror = (e) => {
                const errorObj = new Error("XHR REQUEST FAIL");
                errorObj.status = xhr.status;
                errorObj.responseJSON = JSON.parse(xhr.responseText);
                errorObj.xhr = xhr;
                if(this.error){
                    this.error(errorObj);
                }
                else{
                    console.log("File Attach Window Error : ",errorObj);
                }

            }

            xhr.open("POST",this.uploadPath);
            setTimeout(()=>{
                xhr.send(formData);
            },100)
        },
        formatBytes:function(bytes) {
            if (bytes < 0) return "0KB"; // 음수는 0으로 처리

            const kb = 1024;
            const mb = kb * 1024;
            const gb = mb * 1024;

            if (bytes < 100 * kb) {
                return `${(bytes / kb).toFixed(2)}KB`;
            } else if (bytes < gb) {
                // 100KB ~ 999MB: 소수점 1자리 MB 표시 (ex: 0.1MB ~ 999MB)
                return `${(bytes / mb).toFixed(2)}MB`;
            } else {
                // 1GB 이상: 정수 GB 표시 (ex: 1GB ~)
                return `${(bytes / gb).toFixed(2)}GB`;
            }
        }

    }
</script>