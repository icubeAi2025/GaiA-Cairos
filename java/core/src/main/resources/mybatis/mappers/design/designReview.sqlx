<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview">
	<select id="getDsgnPhaseList" parameterType="input" resultType="output">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.getDsgnPhaseList][thkim]  */
		SELECT 
				DDP.DSGN_PHASE_NO,
				DDP.CNTRCT_NO,
				DDP.DSGN_PHASE_NM,
				DDP.DSPLY_ORDR,
				DDS.BGN_DATE,
				DDS.END_DATE,
                CASE
                    WHEN TO_CHAR(DDS.BGN_DATE, 'YYYYMMDD') <![CDATA[>]]> TO_CHAR(NOW(), 'YYYYMMDD') THEN '대기'
                    WHEN TO_CHAR(NOW(), 'YYYYMMDD') BETWEEN TO_CHAR(DDS.BGN_DATE, 'YYYYMMDD') AND TO_CHAR(DDS.END_DATE, 'YYYYMMDD') THEN '진행중'
                    WHEN TO_CHAR(DDS.END_DATE, 'YYYYMMDD') <![CDATA[<]]> TO_CHAR(NOW(), 'YYYYMMDD') THEN '종료'
                END status,
				COUNT(DDR.*) AS total_count,
                COUNT(CASE WHEN DDR.BACKCHK_CD = '0402' THEN 1 END) AS end_count
		FROM 
				DM_DESIGN_PHASE DDP
		INNER JOIN
				DM_DESIGN_SCHEDULE DDS
		ON 
				DDP.DSGN_PHASE_NO = DDS.DSGN_PHASE_NO
		AND 
				DDS.DSGN_PHASE_CD = #{dsgnPhaseCd}
		AND
		        DDS.DLT_YN = 'N'
		LEFT JOIN
        		DM_DESIGN_REVIEW DDR
        ON
                DDP.DSGN_PHASE_NO = DDR.DSGN_PHASE_NO
        AND 	DDR.CNTRCT_NO = #{cntrctNo}
        AND
                DDR.DLT_YN = 'N'
		WHERE 
				DDP.CNTRCT_NO = #{cntrctNo}
		AND 
				DDP.DLT_YN = 'N'
	    GROUP BY
	            DDP.DSGN_PHASE_NO, DDP.CNTRCT_NO, DDS.END_DATE, DDS.BGN_DATE
		ORDER BY 
				DDP.DSPLY_ORDR ASC;
    </select>

	<select id="getDsgnList" parameterType="input" resultType="designReviewListOutput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.getDsgnList][jhkim]  */
		SELECT
				DDR.DSGN_SEQ,
				DDR.DSGN_PHASE_NO,
				DDR.DSGN_NO,
				DDR.RGSTR_ID,
				(
					SELECT SUI.USR_NM 
					FROM SM_USER_INFO SUI
					WHERE SUI.USR_ID = DDR.RGSTR_ID
				) AS RGSTR_NM,
				DR.RGSTR_ID AS RPLY_RGSTR_ID,
				(
					SELECT SUI.USR_NM 
					FROM SM_USER_INFO SUI
					WHERE SUI.USR_ID = DR.RGSTR_ID
				) AS RPLY_RGSTR_NM,
				DDR.TITLE,
				DDR.DSGN_CD,
				SCC1.CMN_CD_NM_KRN AS DSGN_CD_NM,
				DDR.DOC_NO,
				DDR.DWG_NO,
				DDR.DWG_NM,
				DDR.RVW_OPNIN,
				DDR.ISU_YN,
				DDR.LESN_YN,
				DDR.ATCH_FILE_NO,
				DDR.RVW_DWG_NO,
				DD1.DWG_DSCRPT AS RVW_DWG_DSCRPT,
				DDR.CHG_DWG_NO,
				DD2.DWG_DSCRPT AS CHG_DWG_DSCRPT,
				DR.DWG_NO AS RPLY_DWG_NO,
				DD3.DWG_DSCRPT AS RPLY_DWG_DSCRPT,
				DR.RES_SEQ,
				DR.RPLY_CNTNTS,
				DR.ATCH_FILE_NO AS RPLY_ATCH_NO,
				DR.DWG_NO AS RPLY_DWG_NO,
				-- DR.CHG_DT,
				TO_CHAR(DR.CHG_DT::DATE, 'YYYY-MM-DD') AS RPLY_CHG_DT,
				SCC2.CMN_CD_NM_KRN AS RPLY_STATUS,
				TO_CHAR(DR.RGST_DT::TIMESTAMP ,'YYYY-MM-DD HH:SS') AS RPLY_RGST_DT,
				TO_CHAR(DDR.APPRER_RGST_DT::TIMESTAMP ,'YYYY-MM-DD HH:SS') AS APPRER_RGST_DT,
				TO_CHAR(DDR.BACKCHK_RGST_DT::TIMESTAMP ,'YYYY-MM-DD HH:SS') AS BACKCHK_RGST_DT,
				TO_CHAR(DDR.RGST_DT::TIMESTAMP ,'YYYY-MM-DD') AS RGST_DT,
				(
					SELECT SUI.USR_NM 
					FROM SM_USER_INFO SUI 
					WHERE SUI.USR_ID = DDR.BACKCHK_RGSTR_ID
				) AS BACKCHK_RGSTR_NM,
				(
					SELECT SUI.USR_NM 
					FROM SM_USER_INFO SUI 
					WHERE SUI.USR_ID = DDR.APPRER_RGSTR_ID
				) AS APPRER_RGSTR_NM,
				CASE 
					WHEN #{lang} = 'ko' THEN SCC2.CMN_CD_NM_KRN
					WHEN #{lang} = 'en' THEN SCC2.CMN_CD_NM_ENG
					ELSE SCC2.CMN_CD_NM_KRN
				END AS RPLY_CD_NM,
				DDR.APPRER_CD,
				CASE 
					WHEN #{lang} = 'ko' THEN SCC3.CMN_CD_NM_KRN
					WHEN #{lang} = 'en' THEN SCC3.CMN_CD_NM_ENG
					ELSE SCC3.CMN_CD_NM_KRN
				END AS APPRER_CD_NM,
				DDR.BACKCHK_CD,
				CASE 
					WHEN #{lang} = 'ko' THEN SCC4.CMN_CD_NM_KRN
					WHEN #{lang} = 'en' THEN SCC4.CMN_CD_NM_ENG
					ELSE SCC4.CMN_CD_NM_KRN
				END AS BACKCHK_CD_NM
		FROM
				DM_DESIGN_REVIEW DDR
		LEFT JOIN 
				DM_RESPONSE DR
		ON 		DDR.DSGN_NO = DR.DSGN_NO AND DR.DLT_YN = 'N'
		LEFT JOIN 
				SM_COM_CODE SCC1
		ON		SCC1.CMN_CD = DDR.DSGN_CD
		AND 	SCC1.CMN_GRP_CD = #{dsgnCd}
		LEFT JOIN 
				SM_COM_CODE SCC2
		ON		SCC2.CMN_CD = DR.RPLY_CD
		AND 	SCC2.CMN_GRP_CD = #{rplyStatus}
		LEFT JOIN 
				SM_COM_CODE SCC3
		ON		SCC3.CMN_CD = DDR.APPRER_CD
		AND 	SCC3.CMN_GRP_CD = #{apprerStatus}
		LEFT JOIN 
				SM_COM_CODE SCC4
		ON		SCC4.CMN_CD = DDR.BACKCHK_CD
		AND 	SCC4.CMN_GRP_CD = #{backchkStatus}
		LEFT JOIN 
				DM_DWG DD1
		ON		DD1.DWG_NO  = DDR.RVW_DWG_NO
		AND 	DD1.DWG_CD = '0501'
		AND 	DD1.DLT_YN = 'N'
		LEFT JOIN 
				DM_DWG DD2
		ON		DD2.DWG_NO  = DDR.CHG_DWG_NO
		AND 	DD2.DWG_CD = '0502'
		AND 	DD2.DLT_YN = 'N'
		LEFT JOIN 
				DM_DWG DD3
		ON		DD3.DWG_NO  = DR.DWG_NO
		AND 	DD3.DWG_CD = '0503'
		AND 	DD3.DLT_YN = 'N'
		<where>
					DDR.CNTRCT_NO = #{cntrctNo}
			AND 	DDR.DSGN_PHASE_NO = #{dsgnPhaseNo}
			AND 	DDR.DLT_YN = 'N'
			<if test="searchInput != null">
				<if test="searchInput.rgstrNm != null and searchInput.rgstrNm != ''">
					AND EXISTS (
							SELECT 1 FROM SM_USER_INFO SUI
							WHERE SUI.USR_ID = DDR.RGSTR_ID
							AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.rgstrNm}, '%')
							LIMIT 1
						)
				</if> 
				<if test="searchInput.dsgnCd != null and searchInput.dsgnCd != ''">
					AND DDR.DSGN_CD ILIKE CONCAT('%', #{searchInput.dsgnCd}, '%')
				</if>
				<if test="searchInput.keyword != null and searchInput.keyword != ''">
					AND (
						DDR.DSGN_NO::TEXT ILIKE CONCAT('%', #{searchInput.keyword}, '%')
						OR DDR.TITLE ILIKE CONCAT('%', #{searchInput.keyword}, '%')
						OR EXISTS (
							SELECT 1 FROM SM_USER_INFO SUI
							WHERE SUI.USR_ID = DDR.RGSTR_ID
							AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.keyword}, '%')
							LIMIT 1
						)
					)
				</if>
				<if test="searchInput.startRecentDt != null and searchInput.startRecentDt != ''">
					AND DATE(DDR.RGST_DT) &gt;= DATE(#{searchInput.startRecentDt})
				</if>
				<if test="searchInput.endRecentDt != null and searchInput.endRecentDt != ''">
					AND DATE(DDR.RGST_DT) &lt;= DATE(#{searchInput.endRecentDt})
				</if>
				<if test="searchInput.startRplyRecentDt != null and searchInput.startRplyRecentDt != ''">
					AND DATE(DR.CHG_DT) &gt;= DATE(#{searchInput.startRplyRecentDt})
				</if>
				<if test="searchInput.endRplyRecentDt != null and searchInput.endRplyRecentDt != ''">
					AND DATE(DR.CHG_DT) &lt;= DATE(#{searchInput.endRplyRecentDt})
				</if>
				<choose>
					<when test="searchInput.startDsgnNo != null and searchInput.startDsgnNo != '' and searchInput.endDsgnNo != null and searchInput.endDsgnNo != ''">
						AND DDR.DSGN_NO::NUMERIC BETWEEN #{searchInput.startDsgnNo} AND #{searchInput.endDsgnNo}
					</when>
					<when test="searchInput.startDsgnNo == null and searchInput.endDsgnNo != null and searchInput.endDsgnNo != ''">
						AND DDR.DSGN_NO::NUMERIC &lt;= #{searchInput.endDsgnNo}
					</when>
					<when test="searchInput.startDsgnNo != null and searchInput.startDsgnNo != '' and searchInput.endDsgnNo == null">
						AND DDR.DSGN_NO::NUMERIC &gt;= #{searchInput.startDsgnNo}
					</when>
				</choose>
				<if test="searchInput.rplyCd != null and searchInput.rplyCd != '' and searchInput.rplyCd != 'all'">
					AND DR.RPLY_CD = #{searchInput.rplyCd}
				</if>
				<if test="searchInput.apprerCd != null and searchInput.apprerCd != '' and searchInput.apprerCd != 'all'">
					AND DDR.APPRER_CD = #{searchInput.apprerCd}
				</if>
				<if test="searchInput.backchkCd != null and searchInput.backchkCd != '' and searchInput.backchkCd != 'all'">
					AND DDR.BACKCHK_CD = #{searchInput.backchkCd}
				</if>
				<if test="searchInput.isuYn != null and searchInput.isuYn != ''">
					AND DDR.ISU_YN = #{searchInput.isuYn}
				</if>
				<if test="searchInput.lesnYn != null and searchInput.lesnYn != ''">
					AND DDR.LESN_YN = #{searchInput.lesnYn}
				</if>
				<if test='searchInput.atachYn != null and searchInput.atachYn != "" and searchInput.atachYn.equals("Y")'>
					AND DDR.ATCH_FILE_NO IS NOT NULL AND DDR.ATCH_FILE_NO &lt;&gt; 0
				</if>
				<if test='searchInput.myRplyYn != null and searchInput.myRplyYn != "" and searchInput.myRplyYn.equals("Y")'>
					AND (DDR.BACKCHK_RGSTR_ID = #{usrId} OR DDR.APPRER_RGSTR_ID = #{usrId} OR DR.RGSTR_ID = #{usrId} OR DDR.RGSTR_ID = #{usrId})
				</if>
			</if>
		</where>
		<if test="searchInput != null">
			<if test="searchInput.rgstrNm != null and searchInput.rgstrNm != ''">
				AND EXISTS (
						SELECT 1 FROM SM_USER_INFO SUI
						WHERE SUI.USR_ID = DDR.RGSTR_ID
						AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.rgstrNm}, '%')
						LIMIT 1
					)
			</if>
			<if test="searchInput.dsgnCd != null and searchInput.dsgnCd != ''">
				AND DDR.DSGN_CD ILIKE CONCAT('%', #{searchInput.dsgnCd}, '%')
			</if>
			<if test="searchInput.keyword != null and searchInput.keyword != ''">
				AND (
					DDR.DSGN_NO::TEXT ILIKE CONCAT('%', #{searchInput.keyword}, '%')
					OR DDR.TITLE ILIKE CONCAT('%', #{searchInput.keyword}, '%')
					OR EXISTS (
						SELECT 1 FROM SM_USER_INFO SUI
						WHERE SUI.USR_ID = DDR.RGSTR_ID
						AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.keyword}, '%')
						LIMIT 1
					)
				)
			</if>
			<if test="searchInput.rplyStatus != null and searchInput.rplyStatus != ''">
				AND DR.RPLY_CD = #{searchInput.rplyStatus}
			</if>
			<if test="searchInput.isuYn != null and searchInput.isuYn != ''">
				AND DDR.ISU_YN = #{searchInput.isuYn}
			</if>
			<if test="searchInput.lesnYn != null and searchInput.lesnYn != ''">
				AND DDR.LESN_YN = #{searchInput.lesnYn}
			</if>
		</if>
		order by ddr.dsgn_seq desc
		<if test="pageable != null">
            OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY;
        </if>
    </select>

	<select id="getDsgnListCount" parameterType="input" resultType="long">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.getDsgnListCount][jhkim]  */
		SELECT
				COUNT(DDR.DSGN_NO) 
		FROM
				DM_DESIGN_REVIEW DDR
		LEFT JOIN 
				SM_COM_CODE SCC 
		ON		SCC.CMN_CD = DDR.DSGN_CD
		AND 	SCC.CMN_GRP_CD = #{dsgnCd}
		LEFT JOIN 
				DM_RESPONSE DR
		ON 		DDR.DSGN_NO = DR.DSGN_NO AND DR.DLT_YN = 'N'
		<where>
					DDR.CNTRCT_NO = #{cntrctNo}
			AND 	DDR.DSGN_PHASE_NO = #{dsgnPhaseNo}
			AND 	DDR.DLT_YN = 'N'
			<if test="searchInput != null">
				<if test="searchInput.rgstrNm != null and searchInput.rgstrNm != ''">
					AND EXISTS (
							SELECT 1 FROM SM_USER_INFO SUI
							WHERE SUI.USR_ID = DDR.RGSTR_ID
							AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.rgstrNm}, '%')
							LIMIT 1
						)
				</if> 
				<if test="searchInput.dsgnCd != null and searchInput.dsgnCd != ''">
					AND DDR.DSGN_CD ILIKE CONCAT('%', #{searchInput.dsgnCd}, '%')
				</if>
				<if test="searchInput.keyword != null and searchInput.keyword != ''">
					AND (
						DDR.DSGN_NO::TEXT ILIKE CONCAT('%', #{searchInput.keyword}, '%')
						OR DDR.TITLE ILIKE CONCAT('%', #{searchInput.keyword}, '%')
						OR EXISTS (
							SELECT 1 FROM SM_USER_INFO SUI
							WHERE SUI.USR_ID = DDR.RGSTR_ID
							AND SUI.USR_NM ILIKE CONCAT('%', #{searchInput.keyword}, '%')
							LIMIT 1
						)
					)
				</if>
				<if test="searchInput.startRecentDt != null and searchInput.startRecentDt != ''">
					AND DATE(DDR.RGST_DT) &gt;= DATE(#{searchInput.startRecentDt})
				</if>
				<if test="searchInput.endRecentDt != null and searchInput.endRecentDt != ''">
					AND DATE(DDR.RGST_DT) &lt;= DATE(#{searchInput.endRecentDt})
				</if>
				<choose>
					<when test="searchInput.startDsgnNo != null and searchInput.startDsgnNo != '' and searchInput.endDsgnNo != null and searchInput.endDsgnNo != ''">
						AND DDR.DSGN_NO::NUMERIC BETWEEN #{searchInput.startDsgnNo} AND #{searchInput.endDsgnNo}
					</when>
					<when test="searchInput.startDsgnNo == null and searchInput.endDsgnNo != null and searchInput.endDsgnNo != ''">
						AND DDR.DSGN_NO::NUMERIC &lt;= #{searchInput.endDsgnNo}
					</when>
					<when test="searchInput.startDsgnNo != null and searchInput.startDsgnNo != '' and searchInput.endDsgnNo == null">
						AND DDR.DSGN_NO::NUMERIC &gt;= #{searchInput.startDsgnNo}
					</when>
				</choose>
				<if test="searchInput.rplyCd != null and searchInput.rplyCd != '' and searchInput.rplyCd != 'all'">
					AND DR.RPLY_CD = #{searchInput.rplyCd}
				</if>
				<if test="searchInput.apprerCd != null and searchInput.apprerCd != '' and searchInput.apprerCd != 'all'">
					AND DDR.APPRER_CD = #{searchInput.apprerCd}
				</if>
				<if test="searchInput.backchkCd != null and searchInput.backchkCd != '' and searchInput.backchkCd != 'all'">
					AND DDR.BACKCHK_CD = #{searchInput.backchkCd}
				</if>
				<if test="searchInput.isuYn != null and searchInput.isuYn != ''">
					AND DDR.ISU_YN = #{searchInput.isuYn}
				</if>
				<if test="searchInput.lesnYn != null and searchInput.lesnYn != ''">
					AND DDR.LESN_YN = #{searchInput.lesnYn}
				</if>
				<if test='searchInput.atachYn != null and searchInput.atachYn != "" and searchInput.atachYn.equals("Y")'>
					AND DDR.ATCH_FILE_NO IS NOT NULL AND DDR.ATCH_FILE_NO &lt;&gt; 0
				</if>
				<if test='searchInput.myRplyYn != null and searchInput.myRplyYn != "" and searchInput.myRplyYn.equals("Y")'>
					AND (DDR.BACKCHK_RGSTR_ID = #{usrId} OR DDR.APPRER_RGSTR_ID = #{usrId} OR DR.RGSTR_ID = #{usrId} OR DDR.RGSTR_ID = #{usrId})
				</if>
			</if>
		</where>
    </select>

	<select id="getDesignReview" parameterType="input" resultType="dsgnUpdateOutPut">
        /* [kr.co.ideait.platform.gaiacairos.mappers.defecttracking.defectTracking.getDesignReview][thkim]  */
		SELECT 
			DDR.DSGN_NO, 
			DDR.CNTRCT_NO,
			DDR.TITLE,
			DDR.DSGN_CD,
			CASE 
				WHEN #{lang} = 'ko' THEN SC.CMN_CD_NM_KRN
				WHEN #{lang} = 'en' THEN SC.CMN_CD_NM_ENG
				ELSE SC.CMN_CD_NM_KRN
			END  AS DFCCY_CD_NM,
			DDR.ISU_YN, 
			DDR.LESN_YN,
			DDR.DOC_NO,
			DDR.DWG_NO,
			DDR.DWG_NM,
			DDR.RVW_OPNIN,
			DDR.RVW_DWG_NO,
			DDR.CHG_DWG_NO,
			DDR.ATCH_FILE_NO,
			RVWDD.ATCH_FILE_NO AS RVW_ATCH_FILE_NO,
			RVWDD.SNO AS RVW_SNO,
			RVWDD.DWG_DSCRPT AS RVW_DWG_DSCRPT, 
			CHGDD.ATCH_FILE_NO AS CHG_ATCH_FILE_NO,
			CHGDD.SNO AS CHG_SNO,
			CHGDD.DWG_DSCRPT AS CHG_DWG_DSCRPT 
		FROM 
			DM_DESIGN_REVIEW DDR 
		LEFT JOIN 
				SM_COM_CODE SC 
		ON 		DDR.DSGN_CD = SC.CMN_CD 
		AND 	SC.CMN_GRP_CD = #{dsgnCd}
		LEFT JOIN 
				DM_DWG RVWDD 
		ON 		RVWDD.DWG_NO  = DDR.RVW_DWG_NO 
		AND 	RVWDD.DWG_CD = '0501'
		AND 	RVWDD.DLT_YN = 'N'
		LEFT JOIN 
				DM_DWG CHGDD 
		ON 		CHGDD.DWG_NO  = DDR.CHG_DWG_NO 
		AND 	CHGDD.DWG_CD = '0502'
		AND 	CHGDD.DLT_YN = 'N'
		WHERE 
			DDR.CNTRCT_NO = #{cntrctNo}
		AND 
			DDR.DSGN_PHASE_NO = #{dsgnPhaseNo}
		AND 
			DDR.DSGN_NO = #{dsgnNo}
		AND 
			DDR.DLT_YN = 'N'
    </select>

	<select id="selectDesignReview" resultType="dmDesignReview">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.selectDesignReview][bjkim]  */
        SELECT
            dsgn_no
            , cntrct_no
            , dsgn_phase_no
            , title
            , dsgn_cd
            , doc_no
            , dwg_no
            , dwg_nm
            , rvw_opnin
            , isu_yn
            , lesn_yn
            , atch_file_no
            , rvw_dwg_no
            , chg_dwg_no
            , apprer_cd
            , apprer_rgstr_id
            , apprer_rgst_dt
            , backchk_cd
            , backchk_rgstr_id
            , backchk_rgst_dt
            , dlt_yn
            , rgstr_id
            , rgst_dt
            , chg_id
            , chg_dt
            , dsgn_seq
        FROM DM_DESIGN_REVIEW
        <where>
            AND dsgn_no = #{dsgnNo}
            AND dlt_yn = 'N'
        </where>
    </select>

    <insert id="insertDesignReview">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.insertDesignReview][bjkim]  */
        INSERT INTO DM_DESIGN_REVIEW (
            dsgn_no
            , cntrct_no
            , dsgn_phase_no
            , title
            , dsgn_cd
            , doc_no
            , dwg_no
            , dwg_nm
            , rvw_opnin
            , isu_yn
            , lesn_yn
            , atch_file_no
            , rvw_dwg_no
            , chg_dwg_no
            , dlt_yn
            , rgstr_id
            , rgst_dt
            , chg_id
            , chg_dt
            , dsgn_seq
        ) VALUES (
            #{dsgnNo}
            , #{cntrctNo}
            , #{dsgnPhaseNo}
            , #{title}
            , #{dsgnCd}
            , #{docNo}
            , #{dwgNo}
            , #{dwgNm}
            , #{rvwOpnin}
            , #{isuYn}
            , #{lesnYn}
            , #{atchFileNo}
            , #{rvwDwgNo}
            , #{chgDwgNo}
            , 'N'
            , #{rgstrId}
            , NOW()
            , #{chgId}
            , NOW()
            , #{dsgnSeq}
        )
    </insert>

    <update id="updateDesignReview">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.updateDesignReview][bjkim]  */
        UPDATE DM_DESIGN_REVIEW
        <set>
            , title = #{title}
            , dsgn_cd = #{dsgnCd}
            , doc_no = #{docNo}
            , dwg_no = #{dwgNo}
            , dwg_nm = #{dwgNm}
            , rvw_opnin = #{rvwOpnin}
            , isu_yn = #{isuYn}
            , lesn_yn = #{lesnYn}
            , atch_file_no = #{atchFileNo}
            , rvw_dwg_no = #{rvwDwgNo}
            , chg_dwg_no = #{chgDwgNo}
            <if test=' apprerCd != null and !"".equals(apprerCd) '>
                , apprer_cd = #{apprerCd}
                , apprer_rgstr_id = #{apprerRgstrId}
            </if>
            <if test=' backchkCd != null and !"".equals(backchkCd) '>
                , backchk_cd = #{backchkCd}
                , backchk_rgstr_id = #{backchkRgstrId}
                , backchk_rgst_dt = #{backchkRgstDt}
            </if>
            <if test=' "Y".equals(dltYn) '>
                , dlt_yn = #{dltYn}
                , dlt_id = #{dltId}
                , dlt_dt = NOW()
            </if>
            , chg_id = #{chgId}
            , chg_dt = NOW()
            , dsgn_seq = #{dsgnSeq}
        </set>
        <where>
            AND dsgn_no = #{dsgnNo}
        </where>
    </update>

	<select id="getApprerDataList" parameterType="input" resultType="dsgnApprerOutput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.getApprerDataList][thkim]  */
        SELECT
			DE.EVL_OPNIN,
			DE.ATCH_FILE_NO AS APPRER_ATCH_FILE_NO,
			DE.RGSTR_ID AS APPRER_RGSTR_ID,
			(
				SELECT SUI.USR_NM 
				FROM SM_USER_INFO SUI 
				WHERE SUI.USR_ID = DE.RGSTR_ID
			) AS APPRER_RGSTR_NM,
			TO_CHAR(DE.RGST_DT, 'YYYY-MM-DD HH:SS') AS APPRER_RGST_DT,
			DDR.APPRER_CD,
			CASE 
				WHEN #{lang} = 'ko' THEN SCC.CMN_CD_NM_KRN
				WHEN #{lang} = 'en' THEN SCC.CMN_CD_NM_ENG
				ELSE SCC.CMN_CD_NM_KRN
			END AS APPRER_CD_NM
		FROM 
			DM_EVALUATION DE
		LEFT JOIN 
				DM_DESIGN_REVIEW DDR
		ON 		DE.DSGN_NO = DDR.DSGN_NO
		AND		DDR.DLT_YN = 'N'
		LEFT JOIN 
				SM_COM_CODE SCC
		ON		SCC.CMN_CD = DDR.APPRER_CD
		AND 	SCC.CMN_GRP_CD = #{apprerStatus}
		WHERE
			DE.CNTRCT_NO = #{cntrctNo}
		AND
			DE.DSGN_NO = #{dsgnNo}
		AND 
			DE.DLT_YN = 'N'
		ORDER BY DE.RGST_ORDR ASC;
    </select>

	<select id="getBackchkDataList" parameterType="input" resultType="dsgnBackchkOutput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.getBackchkDataList][thkim]  */
        SELECT 
			DB.BCKCHK_OPNIN,
			DB.ATCH_FILE_NO AS BACKCHK_ATCH_FILE_NO,
			DB.RGSTR_ID AS BACKCHK_RGSTR_ID,
			(
				SELECT SUI.USR_NM 
				FROM SM_USER_INFO SUI 
				WHERE SUI.USR_ID = DB.RGSTR_ID
			) AS BACKCHK_RGSTR_NM,
			TO_CHAR(DB.RGST_DT, 'YYYY-MM-DD HH:SS') AS BACKCHK_RGST_DT,
			DDR.BACKCHK_CD,
			CASE 
				WHEN #{lang} = 'ko' THEN SCC.CMN_CD_NM_KRN
				WHEN #{lang} = 'en' THEN SCC.CMN_CD_NM_ENG
				ELSE SCC.CMN_CD_NM_KRN
			END AS BACKCHK_CD_NM
		FROM 
			DM_BACKCHECK DB
		LEFT JOIN 
				DM_DESIGN_REVIEW DDR
		ON 		DB.DSGN_NO = DDR.DSGN_NO
		AND		DDR.DLT_YN = 'N'
		LEFT JOIN 
				SM_COM_CODE SCC
		ON		SCC.CMN_CD = DDR.BACKCHK_CD
		AND 	SCC.CMN_GRP_CD = #{backchkStatus}
		WHERE
			DB.CNTRCT_NO = #{cntrctNo}
		AND
			DB.DSGN_NO = #{dsgnNo}
		AND 
			DB.DLT_YN = 'N'
		ORDER BY DB.RGST_ORDR ASC;
    </select>

	<select id="selectDwgsList" parameterType="string" resultType="dmDwg">
		select *
		from dm_dwg
		where
		    dwg_no in (
		    	select rvw_dwg_no, chg_dwg_no from dm_design_review
				where dsgn_no = #{dsgnNo}
			)
			and dlt_yn = 'N'
	</select>
	<update id="deleteFile">
		update dm_attachments
		set dlt_yn = 'Y', dlt_id = #{dltId}, dlt_dt = now()
		where file_no = #{fileNo}
		and sno = #{sno}
	</update>
	<insert id="insertFile" parameterType="dmAttachments">
		insert into dm_attachments(
		    file_no
			,sno
			,file_nm
			,file_disk_nm
			,file_disk_path
			,file_size
			,file_hit_num
			,dlt_yn
			,rgstr_id
			,rgst_dt
			,chg_id
			,chg_dt
		)
		values(
			#{fileNo}
			,#{sno}
			,#{fileNm}
			,#{fileDiskNm}
			,#{fileDiskPath}
			,#{fileSize}
			,#{fileHitNum}
			,#{dltYn}
			,#{rgstrId}
			,now()
			,#{chgId}
			,now()
		)
	</insert>
	<insert id="insertDmDwg" parameterType="dmDwg">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.insertDmDwg][bjkim]  */
		insert into dm_dwg(
		    dwg_no
			,dwg_cd
			,dwg_dscrpt
            ,sno
			,atch_file_no
			,file_key
			,dlt_yn
			,rgstr_id
			,rgst_dt
			,chg_id
			,chg_dt
		)
		values(
			#{dwgNo}
			,#{dwgCd}
			,#{dwgDscrpt}
            ,(select coalesce(max(sno), 0) + 1 from dm_dwg where dwg_no = #{dwgNo} and dwg_cd = #{dwgCd})
			,#{atchFileNo}
			,#{fileKey}
			,#{dltYn}
			,#{rgstrId}
			,now()
			,#{chgId}
			,now()
		)
	</insert>
	<select id="selectMaxDsgnNoOfDay" resultType="string">
		SELECT
			case
				when MAX(dsgn_no) is null then TO_CHAR(CURRENT_DATE, 'YYMMDD')||'0001'
				else cast(cast(max(dsgn_no) as decimal)+1 as varchar)
				end as "result"
		FROM dm_design_review ddr
		WHERE dsgn_no LIKE TO_CHAR(CURRENT_DATE, 'YYMMDD') || '%'
	</select>

	<select id="selectDmDwg" resultType="dmDwg">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.selectDmDwg][bjkim]  */
		SELECT dwg_no
               , dwg_cd
               , dwg_dscrpt
               , sno
               , atch_file_no
               , dlt_yn
               , rgstr_id
               , rgst_dt
               , chg_id
               , chg_dt
               , dlt_id
               , dlt_dt
		FROM dm_dwg
		<where>
		    AND dwg_no = #{dwgNo}
		    AND dwg_cd = #{dwgCd}
		</where>
	</select>

	<insert id="updateDmDwg" parameterType="dmDwg">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.design.designReview.updateDmDwg][bjkim]  */
		UPDATE dm_dwg
		<set>
			, dwg_dscrpt = #{dwgDscrpt}
			, sno = #{sno}
			, file_key = #{fileKey}
			, atch_file_no = #{atchFileNo}
			, dlt_yn = #{dltYn}
			, chg_id = #{chgId}
			, chg_dt = now()
		</set>
		<where>
		    AND dwg_no = #{dwgNo}
		    AND dwg_cd = #{dwgCd}
		</where>
	</insert>
	<select id="selectMaxSno" resultType="short">
		select
			coalesce(max(da1_0.sno), 0)
		from
			dm_attachments da1_0
		where
			da1_0.file_no=#{fileNo}
	</select>
	<insert id="insertDesignReviewAttachment">
		insert into dm_attachments (
									 file_no
								   ,sno
								   ,file_nm
								   ,file_disk_nm
								   ,file_disk_path
								   ,file_size
								   ,file_hit_num
								   ,dlt_yn
								   ,rgstr_id
								   ,rgst_dt
								   ,chg_id
								   ,chg_dt
								   ,file_key
		) values(
				  #{fileNo}
				,#{sno}
				,#{fileNm}
				,#{fileDiskNm}
				,#{fileDiskPath}
				,#{fileSize}
				,#{fileHitNum}
				,#{dltYn}
				,#{rgstrId}
				,now()
				,#{chgId}
				,now()
				,#{fileKey}
				)

	</insert>
	<update id="deleteDesignReviewAttachment" parameterType="dmAttachments">
		update dm_attachments
		set dlt_yn = 'Y', chg_id = #{chgId}, chg_dt = now(), dlt_id = #{dltId}, dlt_dt = now()
		where file_no = #{fileNo} and file_key = #{fileKey}
	</update>
</mapper>
