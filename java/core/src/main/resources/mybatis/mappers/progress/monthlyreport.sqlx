<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport">
	<delete id="deleteMonthlyreportToApi">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.deleteMonthlyreportToApi][dhjung]  */
		DELETE
		FROM    PR_MONTHLY_REPORT
		WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
		AND     MONTHLY_REPORT_ID = #{monthlyReportId}
	</delete>

	<delete id="deleteMonthlyProgressToApi">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.deleteMonthlyProgressToApi][dhjung]  */
		DELETE
		FROM    PR_MONTHLY_REPORT_PROGRESS
		WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
		AND     MONTHLY_REPORT_ID = #{monthlyReportId}
	</delete>

	<delete id="deleteMonthlyActivityToApi">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.deleteMonthlyActivityToApi][dhjung]  */
		DELETE
		FROM    PR_MONTHLY_REPORT_ACTIVITY
		WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
		AND     MONTHLY_REPORT_ID = #{monthlyReportId}
	</delete>

	<update id="updateMonthlyProgressAll" parameterType="updateMonthlyreportInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateMonthlyProgressAll][dhjung]  */
        UPDATE  PR_MONTHLY_REPORT_PROGRESS
        SET     DLT_YN = 'Y',
                CHG_DT = NOW(),
                CHG_ID = #{chgId},
                DLT_DT = NOW(),
                DLT_ID = #{dltId}
        WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
        AND     MONTHLY_REPORT_ID = #{monthlyReportId}
        AND     DLT_YN = 'N';
    </update>

	<update id="updateMonthlyActivityAll" parameterType="updateMonthlyreportInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateMonthlyActivityAll][dhjung]  */
        UPDATE  PR_MONTHLY_REPORT_ACTIVITY
        SET     DLT_YN = 'Y',
                CHG_DT = NOW(),
                CHG_ID = #{chgId},
                DLT_DT = NOW(),
                DLT_ID = #{dltId}
        WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
        AND     MONTHLY_REPORT_ID = #{monthlyReportId}
        AND     DLT_YN = 'N';
	</update>

    <update id="updateMonthlyStatusAll" parameterType="updateMonthlyreportInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateMonthlyStatusAll][dhjung]  */
        UPDATE  PR_MONTHLY_REPORT_STATUS
        SET     DLT_YN = 'Y',
                CHG_DT = NOW(),
                CHG_ID = #{chgId},
                DLT_DT = NOW(),
                DLT_ID = #{dltId}
        WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
        AND     MONTHLY_REPORT_ID = #{monthlyReportId}
        AND     DLT_YN = 'N';
	</update>

	<update id="updateNextActivity" parameterType="list">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateNextActivity][dhjung]  */
		<foreach collection="list" item="item">
            UPDATE  PR_MONTHLY_REPORT_ACTIVITY
            SET     PSTATS   = #{item.pstats},
                    CHG_DT   = NOW(),
                    CHG_ID   = #{item.chgId}
            WHERE   CNTRCT_CHG_ID      = #{item.cntrctChgId}
            AND     MONTHLY_REPORT_ID  = #{item.monthlyReportId}
            AND     MONTHLY_ACTIVITY_ID = #{item.monthlyActivityId}
            AND     DLT_YN = 'N';
		</foreach>
	</update>

	<update id="updateDelayActivity" parameterType="list">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateDelayActivity][dhjung]  */
		<foreach collection="list" item="item">
            UPDATE  PR_MONTHLY_REPORT_ACTIVITY
            SET     DLY_DIV       = #{item.dlyDiv},
                    MAJOR_PRCS_YN = #{item.majorPrcsYn},
                    DLY_RSN       = #{item.dlyRsn},
                    CHG_DT        = NOW(),
                    CHG_ID        = #{item.chgId}
            WHERE   CNTRCT_CHG_ID     = #{item.cntrctChgId}
            AND     MONTHLY_REPORT_ID = #{item.monthlyReportId}
            AND     ACTIVITY_ID       = #{item.activityId}
            AND     WORK_DT_TYPE IN ('T', 'D')
            AND     DLT_YN = 'N';
		</foreach>
	</update>

	<update id="updateMonthlyActivity" parameterType="list">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateMonthlyActivity][dhjung]  */
		<foreach collection="list" item="item">
            UPDATE  PR_MONTHLY_REPORT_ACTIVITY
            SET     DLT_YN = 'Y',
                    CHG_DT = NOW(),
                    CHG_ID = #{item.chgId},
                    DLT_DT = NOW(),
                    DLT_ID = #{item.dltId}
            WHERE   CNTRCT_CHG_ID      = #{item.cntrctChgId}
            AND     MONTHLY_REPORT_ID  = #{item.monthlyReportId}
            AND     MONTHLY_ACTIVITY_ID = #{item.monthlyActivityId};
		</foreach>
	</update>


	<insert id="insertMonthlyProgress" parameterType="insertMonthlyDataInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertMonthlyProgress][dhjung]  */
            INSERT INTO PR_MONTHLY_REPORT_PROGRESS (
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                CNSTTY_CD,
                CNSTTY_NM,
                CNTRCT_AM,
                CNTRCT_BOHAL_RATE,
                ACMLT_PLAN_BOHAL_RATE,
                ACMLT_ARSLT_BOHAL_RATE,
                THISMTH_PLAN_BOHAL_RATE,
                THISMTH_ARSLT_BOHAL_RATE,
                LSMTH_PLAN_BOHAL_RATE,
                LSMTH_ARSLT_BOHAL_RATE,
                DLT_YN,
                RGST_DT,
                RGSTR_ID,
                CHG_DT,
                CHG_ID
            )
            SELECT  CNTRCT_CHG_ID,
                    #{monthlyReportId},
                    CNSTTY_CD,
                    CNSTTY_NM,
                    CNT_COST,
                    BOHAL,
                    ACMLT_PLAN_BOHAL_RATE,
                    ACMLT_ARSLT_BOHAL_RATE,
                    THISMTH_PLAN_BOHAL_RATE,
                    THISMTH_ARSLT_BOHAL_RATE,
                    LSMTH_PLAN_BOHAL_RATE,
                    LSMTH_ARSLT_BOHAL_RATE,
                    'N',
                    NOW(),
                    #{rgstrId},
                    NOW(),
                    #{rgstrId}
            FROM (
                WITH RECURSIVE BASE_DATA AS (
                    SELECT  #{cntrctChgId} AS CNTRCT_CHG_ID,
                            TO_CHAR(TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD'), 'YYYY-MM-DD') AS THIS_START,
                            TO_CHAR((TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 MONTH')::DATE - 1, 'YYYY-MM-DD') AS THIS_END,
                            TO_CHAR(TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 MONTH', 'YYYY-MM-DD') AS NEXT_START,
                            TO_CHAR(TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD')::DATE - 1, 'YYYY-MM-DD') AS PREV_END,
                            (SELECT SUM(MTRL_AM + LBR_AM + GNRLEXPNS_AM)
                    FROM    CT_CBS
                    WHERE   CNSTTY_LVL_NUM = '1'
                    AND     CNTRCT_CHG_ID = #{cntrctChgId}
                    AND     DLT_YN = 'N') AS SUM_COST
                ),
                CBS_TBL AS (
                    SELECT DISTINCT
                            CC.CNTRCT_CHG_ID,
                            CC.UNIT_CNST_TYPE,
                            CC.CNSTTY_CD,
                            CC.CNSTTY_SN,
                            CC.CNSTTY_NM,
                            (MTRL_AM + LBR_AM + GNRLEXPNS_AM) AS CNT_COST,
                            COALESCE(PMRP.ACMLT_PLAN_BOHAL_RATE, 0) AS LSMTH_PLAN_BOHAL_RATE,
                            COALESCE(PMRP.ACMLT_ARSLT_BOHAL_RATE, 0) AS LSMTH_ARSLT_BOHAL_RATE,
                            ((CC.MTRL_AM + CC.LBR_AM + CC.GNRLEXPNS_AM) / BD.SUM_COST) * 100 AS BOHAL
                    FROM    CT_CBS CC
                    INNER JOIN
                            BASE_DATA BD ON CC.CNTRCT_CHG_ID = BD.CNTRCT_CHG_ID
                    LEFT JOIN (
                            SELECT DISTINCT
                                    CNTRCT_CHG_ID,
                                    CNSTTY_CD,
                                    CNSTTY_NM,
                                    MONTHLY_REPORT_ID,
                                    ACMLT_PLAN_BOHAL_RATE,
                                    ACMLT_ARSLT_BOHAL_RATE
                            FROM    PR_MONTHLY_REPORT_PROGRESS
                            WHERE   DLT_YN = 'N'
                            AND     MONTHLY_REPORT_ID = (
                                SELECT  MONTHLY_REPORT_ID
                                FROM    PR_MONTHLY_REPORT
                                WHERE   DLT_YN = 'N'
                                AND     CNTRCT_CHG_ID = #{cntrctChgId}
                                AND     (APPRVL_STATS != 'R' OR APPRVL_STATS IS NULL)
                                AND     REPORT_YM = TO_CHAR(DATE_TRUNC('MONTH', TO_DATE(#{reportYm}, 'YYYY-MM-DD')) - INTERVAL '1 MONTH', 'YYYY-MM')
                            )
                    ) PMRP  ON PMRP.CNTRCT_CHG_ID = CC.CNTRCT_CHG_ID
                    AND     PMRP.CNSTTY_CD = CC.CNSTTY_CD
                    AND     PMRP.CNSTTY_NM = CC.CNSTTY_NM
                    WHERE   CC.CNSTTY_LVL_NUM = 1
                    ),
                <![CDATA[
                PLAN_DATA AS (
                    SELECT  CC.UNIT_CNST_TYPE,
                            CC.UP_CNSTTY_CD AS CNSTTY_CD,
                            CC.CNSTTY_SN,
                            CC.CNSTTY_NM,
                            SUM(PLC.RSCE_QTY / PLC.DURATION * PLC.THIS_MONTH * PLC.AMT) AS PLAN_AMT,
                            SUM(ACTUAL_SCH) AS ACTUAL_AMT
                    FROM    CT_CBS CC
                    INNER JOIN (
                            SELECT  CCD.CNSTTY_SN,
                                    PA.CNTRCT_CHG_ID,
                                    PQ.CNSTTY_CD,
                                    PQ.RSCE_QTY,
                                    PA.PLAN_START,
                                    PA.PLAN_FINISH,
                                    (TO_DATE(PA.PLAN_FINISH, 'YYYY-MM-DD') - TO_DATE(PA.PLAN_START, 'YYYY-MM-DD') + 1) AS DURATION,
                                    (TO_DATE(CASE WHEN PA.PLAN_FINISH > BD.NEXT_START THEN BD.THIS_END ELSE PA.PLAN_FINISH END, 'YYYY-MM-DD')
                                    - TO_DATE(CASE WHEN PA.PLAN_START > BD.PREV_END THEN PA.PLAN_START ELSE BD.THIS_START END, 'YYYY-MM-DD') + 1) AS THIS_MONTH,
                                    (CCD.MTRL_UPRC + CCD.LBR_UPRC + CCD.GNRLEXPNS_UPRC) AS AMT
                            FROM    PR_ACTIVITY PA
                            INNER JOIN
                                    PR_QDB PQ ON PA.CNTRCT_CHG_ID = PQ.CNTRCT_CHG_ID
                            AND     PA.REVISION_ID = PQ.REVISION_ID
                            AND     PA.ACTIVITY_ID = PQ.ACTIVITY_ID
                            INNER JOIN
                                    CT_CBS_DETAIL CCD ON PQ.CNTRCT_CHG_ID = CCD.CNTRCT_CHG_ID
                            AND     PQ.DTL_CNSTTY_SN = CCD.DTL_CNSTTY_SN
                            INNER JOIN
                                    BASE_DATA BD ON CCD.CNTRCT_CHG_ID = BD.CNTRCT_CHG_ID
                            WHERE   PA.CNTRCT_CHG_ID = BD.CNTRCT_CHG_ID
                            AND     PA.REVISION_ID IN (
                                    SELECT  REVISION_ID
                                    FROM    PR_REVISION
                                    WHERE   CNTRCT_CHG_ID = PA.CNTRCT_CHG_ID
                                    AND     DLT_YN = 'N'
                                    AND     LAST_REVISION_YN = 'Y'
                            )
                            AND     PA.DLT_YN = 'N'
                            AND     PA.EXPT_COST <> 0
                            AND     PA.PLAN_START < BD.NEXT_START
                            AND     PA.PLAN_FINISH > BD.PREV_END
                    ) PLC ON CC.CNSTTY_SN = PLC.CNSTTY_SN
                    INNER JOIN (
                            SELECT
                                    CCD.CNSTTY_SN,
                                    SUM(CDRQ.WORK_QTY * (CCD.MTRL_UPRC + CCD.LBR_UPRC + CCD.GNRLEXPNS_UPRC)) AS ACTUAL_SCH
                            FROM    CW_DAILY_REPORT_QDB CDRQ
                            INNER JOIN
                                    CT_CBS_DETAIL CCD ON CDRQ.CNTRCT_CHG_ID = CCD.CNTRCT_CHG_ID
                            AND     CDRQ.DTL_CNSTTY_SN = CCD.DTL_CNSTTY_SN
                            AND     CDRQ.RSCE_CD = CCD.RSCE_CD
                            AND     CCD.DLT_YN = 'N'
                            INNER JOIN
                                    BASE_DATA TD ON CCD.CNTRCT_CHG_ID = TD.CNTRCT_CHG_ID
                            WHERE   CDRQ.DAILY_REPORT_ID IN (
                                    SELECT  DAILY_REPORT_ID
                                    FROM    CW_DAILY_REPORT CDR
                                    WHERE   CDR.CNTRCT_NO = #{cntrctNo}
                                    AND     CDR.DAILY_REPORT_DATE BETWEEN TD.THIS_START AND TD.THIS_END
                                    AND     CDRQ.DLT_YN = 'N'
                            )
                            GROUP BY CCD.CNSTTY_SN
                    ) ACT ON CC.CNSTTY_SN = ACT.CNSTTY_SN
                    WHERE   CC.CNTRCT_CHG_ID = #{cntrctChgId}
                    GROUP BY CC.UNIT_CNST_TYPE, CC.UP_CNSTTY_CD, CC.CNSTTY_SN, CC.CNSTTY_NM
                )
                ]]>
                SELECT DISTINCT
                        CCB.CNTRCT_CHG_ID,
                        CCB.CNSTTY_CD,
                        CCB.CNSTTY_NM,
                        CCB.CNT_COST,
                        CCB.BOHAL,
                        CASE WHEN SUM(PLAN_C.PLAN_AMT) IS NULL AND CCB.LSMTH_PLAN_BOHAL_RATE IS NULL THEN 0
                        ELSE COALESCE(SUM(PLAN_C.PLAN_AMT) / CCB.CNT_COST, 0) + COALESCE(CCB.LSMTH_PLAN_BOHAL_RATE, 0)
                        END AS ACMLT_PLAN_BOHAL_RATE,
                        CASE WHEN SUM(PLAN_C.ACTUAL_AMT) IS NULL AND CCB.LSMTH_ARSLT_BOHAL_RATE IS NULL THEN 0
                        ELSE COALESCE(SUM(PLAN_C.ACTUAL_AMT) / CCB.CNT_COST, 0) + COALESCE(CCB.LSMTH_ARSLT_BOHAL_RATE, 0)
                        END AS ACMLT_ARSLT_BOHAL_RATE,
                        COALESCE((SUM(PLAN_AMT) / CCB.CNT_COST), 0) AS THISMTH_PLAN_BOHAL_RATE,
                        COALESCE((SUM(ACTUAL_AMT) / CCB.CNT_COST), 0) AS THISMTH_ARSLT_BOHAL_RATE,
                        COALESCE(CCB.LSMTH_PLAN_BOHAL_RATE, 0) AS LSMTH_PLAN_BOHAL_RATE,
                        COALESCE(CCB.LSMTH_ARSLT_BOHAL_RATE, 0) AS LSMTH_ARSLT_BOHAL_RATE
                FROM    CBS_TBL CCB
                LEFT JOIN
                        PLAN_DATA PLAN_C ON CCB.UNIT_CNST_TYPE = PLAN_C.UNIT_CNST_TYPE
                AND     CCB.CNSTTY_CD = LEFT(PLAN_C.CNSTTY_CD, LENGTH(CCB.CNSTTY_CD))
                GROUP BY CCB.CNTRCT_CHG_ID,
                        CCB.CNSTTY_CD,
                        CCB.CNSTTY_NM,
                        CCB.CNT_COST,
                        CCB.BOHAL,
                        CCB.LSMTH_PLAN_BOHAL_RATE,
                        CCB.LSMTH_ARSLT_BOHAL_RATE
            ) SUB_TBL;

	</insert>

	<insert id="insertMonthlyActivity" parameterType="list">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertMonthlyActivity][dhjung]  */
	        INSERT INTO PR_MONTHLY_REPORT_ACTIVITY (
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                WBS_CD,
                ACTIVITY_ID,
                WORK_DT_TYPE,
                PLAN_BGN_DATE,
                PLAN_END_DATE,
                ACTUAL_BGN_DATE,
                ACTUAL_END_DATE,
                PSTATS,
                DLY_DIV,
                MAJOR_PRCS_YN,
                DLY_RSN,
                REVISION_ID,
                DLT_YN,
                THISMTH_PLAN_RATE,
                THISMTH_EXE_RATE,
                RGST_DT,
                RGSTR_ID,
                CHG_DT,
                CHG_ID
            )
            VALUES
            <foreach collection="list" item="item" separator=",">
            (
                #{item.cntrctChgId},
                #{item.monthlyReportId},
                #{item.wbsCd},
                #{item.activityId},
                #{item.workDtType},
                #{item.planBgnDate},
                #{item.planEndDate},
                #{item.actualBgnDate},
                #{item.actualEndDate},
                #{item.pstats},
                #{item.dlyDiv},
                #{item.majorPrcsYn},
                #{item.dlyRsn},
                #{item.revisionId},
                'N',
                #{item.thismthPlanRate}::NUMERIC,
                #{item.thismthExeRate}::NUMERIC,
                NOW(),
                #{item.rgstrId},
                NOW(),
                #{item.rgstrId}
            )
            </foreach>
	</insert>

	<insert id="insertThisMonthActivity" parameterType="insertMonthlyDataInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertThisMonthActivity][dhjung]  */
            INSERT INTO PR_MONTHLY_REPORT_ACTIVITY (
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                WBS_CD,
                ACTIVITY_ID,
                WORK_DT_TYPE,
                PLAN_BGN_DATE,
                PLAN_END_DATE,
                ACTUAL_BGN_DATE,
                ACTUAL_END_DATE,
                PSTATS,
                DLY_DIV,
                REVISION_ID,
                DLT_YN,
                THISMTH_PLAN_RATE,
                THISMTH_EXE_RATE,
                RGST_DT,
                RGSTR_ID,
                CHG_DT,
                CHG_ID
            )
            SELECT  #{cntrctChgId},
                    #{monthlyReportId},
                    WBS_CD,
                    ACTIVITY_ID,
                    WORK_DT_TYPE,
                    PLAN_BGN_DATE,
                    PLAN_END_DATE,
                    ACTUAL_BGN_DATE,
                    ACTUAL_END_DATE,
                    PSTATS,
                    DLY_DIV,
                    REVISION_ID,
                    DLT_YN,
                    THISMTH_PLAN_RATE,
                    THISMTH_EXE_RATE,
                    NOW(),
                    #{rgstrId},
                    NOW(),
                    #{rgstrId}
            FROM (
                    WITH RECURSIVE PSTATS_TBL AS (
                    SELECT
                            CDRA.CNTRCT_CHG_ID,
                            CDRA.WBS_CD,
                            CDRA.ACTIVITY_ID,
                            CDRA.PSTATS,
                            ROW_NUMBER() OVER (
                            PARTITION BY CDRA.ACTIVITY_ID, CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD
                            ORDER BY CDRA.PSTATS ASC, DRT.DAILY_REPORT_DATE DESC
                            ) AS RN
                    FROM    CW_DAILY_REPORT_ACTIVITY CDRA
                    JOIN    CW_DAILY_REPORT DRT
                    ON      DRT.DAILY_REPORT_ID = CDRA.DAILY_REPORT_ID
                    WHERE   CDRA.DLT_YN = 'N'
                    AND     CDRA.CNTRCT_CHG_ID LIKE #{cntrctNo}||'%'
                    AND     CDRA.REVISION_ID = (
                                SELECT  REVISION_ID
                                FROM    PR_REVISION
                                WHERE   DLT_YN = 'N'
                                AND     LAST_REVISION_YN = 'Y'
                                AND     CNTRCT_CHG_ID = CDRA.CNTRCT_CHG_ID
                    )
                    AND     DRT.DLT_YN = 'N'
                    AND     DATE_TRUNC('MONTH', DRT.DAILY_REPORT_DATE::DATE)
                    = DATE_TRUNC('MONTH', TO_DATE(#{reportYm}, 'YYYY-MM'))
                    AND     CDRA.WORK_DT_TYPE = 'TD'
                    GROUP BY CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD, CDRA.ACTIVITY_ID, CDRA.PSTATS, DRT.DAILY_REPORT_DATE
                ),
                MAIN_QUERY AS (
                    SELECT
                            PT.CNTRCT_CHG_ID,
                            PT.WBS_CD,
                            PT.ACTIVITY_ID,
                            'T' AS WORK_DT_TYPE,
                            PA.PLAN_START AS PLAN_BGN_DATE,
                            PA.PLAN_FINISH AS PLAN_END_DATE,
                            PA.ACTUAL_START AS ACTUAL_BGN_DATE,
                            PA.ACTUAL_FINISH AS ACTUAL_END_DATE,
                            PT.PSTATS,
                            <![CDATA[
                            CASE
                                WHEN COALESCE(NULLIF(PA.PLAN_START, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(PA.ACTUAL_START, '')::DATE, CURRENT_DATE) THEN 'ST'
                                WHEN COALESCE(NULLIF(PA.PLAN_FINISH, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(PA.ACTUAL_FINISH, '')::DATE, CURRENT_DATE) THEN 'FN'
                            ELSE NULL
                            END AS DLY_DIV,
                            ]]>
                            PA.REVISION_ID,
                            'N' AS DLT_YN,
                            PA.ACTIVITY_KIND,
                -- 이번 달 총 소요일수
                CASE
                    WHEN COALESCE(PA.ACTUAL_START, '') != '' AND COALESCE(PA.ACTUAL_FINISH, '') != ''
                    THEN (NULLIF(PA.ACTUAL_FINISH, '')::DATE - NULLIF(PA.ACTUAL_START, '')::DATE + 1)
                    ELSE (COALESCE(NULLIF(PA.PLAN_FINISH, '')::DATE, NULLIF(PA.PLAN_START, '')::DATE)
                    - COALESCE(NULLIF(PA.PLAN_START, '')::DATE, NULLIF(PA.PLAN_FINISH, '')::DATE) + 1)
                END AS THISMTH_TOTAL_DURATION,
                COALESCE( NULLIF(PA.ACTUAL_FINISH, '')::DATE,
                    (TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 MONTH - 1 day')::DATE) - NULLIF(PA.ACTUAL_START, '')::DATE + 1 AS THISMTH_DURATION,
                COALESCE(NULLIF(PA.PLAN_FINISH, '')::DATE, NULLIF(PA.PLAN_START, '')::DATE) - COALESCE(NULLIF(PA.PLAN_START, '')::DATE, NULLIF(PA.PLAN_FINISH, '')::DATE) + 1 AS PLAN_TOTAL_DURATION,
                COALESCE( NULLIF(PA.PLAN_FINISH, '')::DATE,
                    (TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 MONTH - 1 day')::DATE ) - COALESCE(NULLIF(PA.PLAN_START, '')::DATE, NULLIF(PA.PLAN_FINISH, '')::DATE) + 1 AS PLAN_DURATION
                FROM    PSTATS_TBL PT
                    JOIN    PR_ACTIVITY PA
                    ON      PT.CNTRCT_CHG_ID = PA.CNTRCT_CHG_ID
                    AND     PT.WBS_CD = PA.WBS_CD
                    AND     PT.ACTIVITY_ID = PA.ACTIVITY_ID
                    WHERE   RN = 1
                    ORDER BY WBS_CD, ACTIVITY_ID
                )
                SELECT
                        CNTRCT_CHG_ID,
                        WBS_CD,
                        ACTIVITY_ID,
                        WORK_DT_TYPE,
                        PLAN_BGN_DATE,
                        PLAN_END_DATE,
                        ACTUAL_BGN_DATE,
                        ACTUAL_END_DATE,
                        PSTATS,
                        DLY_DIV,
                        REVISION_ID,
                        DLT_YN,
                        CASE
                            WHEN ACTIVITY_KIND IN ('SM', 'FN') AND (COALESCE(ACTUAL_BGN_DATE, '') != '' OR COALESCE(ACTUAL_END_DATE, '') != '')
                                THEN 100.00
                            ELSE (PLAN_DURATION::NUMERIC / PLAN_TOTAL_DURATION::NUMERIC) * 100
                        END AS THISMTH_PLAN_RATE,
                        CASE
                            WHEN ACTIVITY_KIND IN ('SM', 'FN') AND (COALESCE(ACTUAL_BGN_DATE, '') != '' OR COALESCE(ACTUAL_END_DATE, '') != '')
                                THEN 100.00
                            ELSE (THISMTH_DURATION::NUMERIC / THISMTH_TOTAL_DURATION::NUMERIC) * 100
                        END AS THISMTH_EXE_RATE
                FROM    MAIN_QUERY
            ) SUB_TBL;
	</insert>

	<insert id="insertDelayActivity" parameterType="insertMonthlyDataInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertDelayActivity][dhjung]  */
            INSERT INTO PR_MONTHLY_REPORT_ACTIVITY (
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                WBS_CD,
                ACTIVITY_ID,
                WORK_DT_TYPE,
                PLAN_BGN_DATE,
                PLAN_END_DATE,
                ACTUAL_BGN_DATE,
                ACTUAL_END_DATE,
                PSTATS,
                DLY_DIV,
                REVISION_ID,
                DLT_YN,
                RGST_DT,
                RGSTR_ID,
                CHG_DT,
                CHG_ID
            )
            SELECT  #{cntrctChgId},
                    #{monthlyReportId},
                    WBS_CD,
                    ACTIVITY_ID,
                    WORK_DT_TYPE,
                    PLAN_BGN_DATE,
                    PLAN_END_DATE,
                    ACTUAL_BGN_DATE,
                    ACTUAL_END_DATE,
                    PSTATS,
                    DLY_DIV,
                    REVISION_ID,
                    DLT_YN,
                    NOW(),
                    #{rgstrId},
                    NOW(),
                    #{rgstrId}
            FROM (
                    WITH RECURSIVE PSTATS_TBL AS (
                        SELECT
                                CDRA.CNTRCT_CHG_ID,
                                CDRA.WBS_CD,
                                CDRA.ACTIVITY_ID,
                                CDRA.PSTATS,
                                ROW_NUMBER() OVER (
                                PARTITION BY CDRA.ACTIVITY_ID, CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD
                                ORDER BY CDRA.PSTATS ASC, DRT.DAILY_REPORT_DATE DESC
                                ) AS RN
                        FROM    CW_DAILY_REPORT_ACTIVITY CDRA
                        JOIN    CW_DAILY_REPORT DRT
                        ON      DRT.DAILY_REPORT_ID = CDRA.DAILY_REPORT_ID
                        WHERE   CDRA.DLT_YN = 'N'
                        AND     CDRA.CNTRCT_CHG_ID LIKE #{cntrctNo}||'%'
                        AND     CDRA.REVISION_ID = (
                        SELECT  REVISION_ID
                        FROM    PR_REVISION
                        WHERE   DLT_YN = 'N'
                        AND     LAST_REVISION_YN = 'Y'
                        AND     CNTRCT_CHG_ID = CDRA.CNTRCT_CHG_ID
                        )
                        AND DRT.DLT_YN = 'N'
                        AND DATE_TRUNC('MONTH', DRT.DAILY_REPORT_DATE::DATE)
                        = DATE_TRUNC('MONTH', TO_DATE(#{reportYm}, 'YYYY-MM'))
                        AND CDRA.WORK_DT_TYPE = 'TD'
                        GROUP BY CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD, CDRA.ACTIVITY_ID, CDRA.PSTATS, DRT.DAILY_REPORT_DATE
                    ),
                    DELAY_TBL AS (
                        SELECT  PT.CNTRCT_CHG_ID,
                                PT.WBS_CD,
                                PT.ACTIVITY_ID,
                                'D' AS WORK_DT_TYPE,
                                PA.PLAN_START AS PLAN_BGN_DATE,
                                PA.PLAN_FINISH AS PLAN_END_DATE,
                                PA.ACTUAL_START AS ACTUAL_BGN_DATE,
                                PA.ACTUAL_FINISH AS ACTUAL_END_DATE,
                                PT.PSTATS,
                                <![CDATA[
                                CASE
                                    WHEN COALESCE(NULLIF(PA.PLAN_START, '')::DATE, CURRENT_DATE)
                                        < COALESCE(NULLIF(PA.ACTUAL_START, '')::DATE, CURRENT_DATE) THEN 'ST'
                                    WHEN COALESCE(NULLIF(PA.PLAN_FINISH, '')::DATE, CURRENT_DATE)
                                        < COALESCE(NULLIF(PA.ACTUAL_FINISH, '')::DATE, CURRENT_DATE) THEN 'FN'
                                    ELSE NULL
                                END AS DLY_DIV,
                                ]]>
                                PA.REVISION_ID,
                                'N' AS DLT_YN
                        FROM    PSTATS_TBL PT
                        JOIN    PR_ACTIVITY PA
                        ON      PT.CNTRCT_CHG_ID = PA.CNTRCT_CHG_ID
                        AND     PT.WBS_CD = PA.WBS_CD
                        AND     PT.ACTIVITY_ID = PA.ACTIVITY_ID
                        WHERE   RN = 1
                        ORDER BY WBS_CD, ACTIVITY_ID
                    )
                    SELECT  CNTRCT_CHG_ID,
                            WBS_CD,
                            ACTIVITY_ID,
                            WORK_DT_TYPE,
                            PLAN_BGN_DATE,
                            PLAN_END_DATE,
                            ACTUAL_BGN_DATE,
                            ACTUAL_END_DATE,
                            PSTATS,
                            DLY_DIV,
                            REVISION_ID,
                            DLT_YN
                    FROM    DELAY_TBL
                    WHERE   DLY_DIV IS NOT NULL
                ) SUB_TBL;
	</insert>

	<insert id="insertNextActivity" parameterType="insertMonthlyDataInput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertNextActivity][dhjung]  */
		    INSERT INTO PR_MONTHLY_REPORT_ACTIVITY (
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                WBS_CD,
                ACTIVITY_ID,
                WORK_DT_TYPE,
                PLAN_BGN_DATE,
                PLAN_END_DATE,
                ACTUAL_BGN_DATE,
                ACTUAL_END_DATE,
                PSTATS,
                DLY_DIV,
                REVISION_ID,
                DLT_YN,
                RGST_DT,
                RGSTR_ID,
                CHG_DT,
                CHG_ID
            )
            SELECT
                #{cntrctChgId},
                #{monthlyReportId},
                WBS_CD,
                ACTIVITY_ID,
                WORK_DT_TYPE,
                PLAN_BGN_DATE,
                PLAN_END_DATE,
                ACTUAL_BGN_DATE,
                ACTUAL_END_DATE,
                PSTATS,
                DLY_DIV,
                REVISION_ID,
                DLT_YN,
                NOW(),
                #{rgstrId},
                NOW(),
                #{rgstrId}
            FROM (
                WITH RECURSIVE PSTATS_TBL AS (
                    SELECT
                            CDRA.CNTRCT_CHG_ID,
                            CDRA.WBS_CD,
                            CDRA.ACTIVITY_ID,
                            CDRA.PSTATS,
                            ROW_NUMBER() OVER (
                            PARTITION BY CDRA.ACTIVITY_ID, CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD
                            ORDER BY CDRA.PSTATS ASC, DRT.DAILY_REPORT_DATE DESC
                            ) AS RN
                    FROM    CW_DAILY_REPORT_ACTIVITY CDRA
                    JOIN    CW_DAILY_REPORT DRT
                    ON      DRT.DAILY_REPORT_ID = CDRA.DAILY_REPORT_ID
                    WHERE   CDRA.DLT_YN = 'N'
                    AND     CDRA.CNTRCT_CHG_ID LIKE #{cntrctNo}||'%'
                    AND     CDRA.REVISION_ID = (
                            SELECT  REVISION_ID
                            FROM    PR_REVISION
                            WHERE   DLT_YN = 'N'
                            AND     LAST_REVISION_YN = 'Y'
                            AND     CNTRCT_CHG_ID = CDRA.CNTRCT_CHG_ID
                    )
                    AND     DRT.DLT_YN = 'N'
                    AND     CDRA.WORK_DT_TYPE = 'TD'
                    GROUP BY CDRA.CNTRCT_CHG_ID, CDRA.WBS_CD, CDRA.ACTIVITY_ID, CDRA.PSTATS, DRT.DAILY_REPORT_DATE
                )
                SELECT
                        PT.CNTRCT_CHG_ID,
                        PT.WBS_CD,
                        PT.ACTIVITY_ID,
                        'N' AS WORK_DT_TYPE,
                        PA.PLAN_START AS PLAN_BGN_DATE,
                        PA.PLAN_FINISH AS PLAN_END_DATE,
                        PA.ACTUAL_START AS ACTUAL_BGN_DATE,
                        PA.ACTUAL_FINISH AS ACTUAL_END_DATE,
                        PT.PSTATS,
                        CASE
                            <![CDATA[
                        WHEN COALESCE(NULLIF(PA.PLAN_START, '')::DATE, CURRENT_DATE)
                            < COALESCE(NULLIF(PA.ACTUAL_START, '')::DATE, CURRENT_DATE) THEN 'ST'
                        WHEN COALESCE(NULLIF(PA.PLAN_FINISH, '')::DATE, CURRENT_DATE)
                            < COALESCE(NULLIF(PA.ACTUAL_FINISH, '')::DATE, CURRENT_DATE) THEN 'FN'
                        ELSE NULL
                        ]]>
                        END AS DLY_DIV,
                        PA.REVISION_ID,
                        'N' AS DLT_YN
                FROM    PSTATS_TBL PT
                JOIN    PR_ACTIVITY PA
                ON      PT.CNTRCT_CHG_ID = PA.CNTRCT_CHG_ID
                AND     PT.WBS_CD = PA.WBS_CD
                AND     PT.ACTIVITY_ID = PA.ACTIVITY_ID
                WHERE   RN = 1
                AND (TO_DATE(PA.PLAN_START, 'YYYY-MM') = DATE_TRUNC('MONTH', TO_DATE(#{reportYm}, 'YYYY-MM')) + INTERVAL '1 month'
                OR TO_DATE(PA.PLAN_FINISH, 'YYYY-MM') = DATE_TRUNC('MONTH', TO_DATE(#{reportYm}, 'YYYY-MM')) + INTERVAL '1 month')
                ORDER BY WBS_CD, ACTIVITY_ID
            ) SUB_TBL;
    </insert>

	<select id="selectMonthlyreportList" parameterType="monthlyreportListInput" resultType="monthlyreportListOutput">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyreportList][dhjung]  */
        /* 월간공정보고 목록 */
            WITH MONTHLYREPORT_TBL AS (
                SELECT
                        PMR.CNTRCT_CHG_ID,
                        PMR.MONTHLY_REPORT_ID,
                        PMR.REPORT_YM,
                        PMR.MONTHLY_REPORT_DATE,
                        PMR.APPRVL_STATS,
                        PMR.RGSTR_ID,
                        (SELECT USR_NM FROM SM_USER_INFO WHERE USR_ID = PMR.RGSTR_ID) AS RGSTR_NM,
                        PMR.APPRVL_ID,
                        (SELECT USR_NM FROM SM_USER_INFO WHERE USR_ID = PMR.APPRVL_ID) AS APPRVL_NM,
                        PMR.ACMLT_PLAN_BOHAL_RATE,
                        PMR.ACMLT_ARSLT_BOHAL_RATE,
                        PMR.THISMTH_PLAN_BOHAL_RATE,
                        PMR.THISMTH_ARSLT_BOHAL_RATE,
                        PMR.LSMTH_PLAN_BOHAL_RATE,
                        PMR.LSMTH_ARSLT_BOHAL_RATE,
                        SCC.CMN_CD_NM_KRN AS APPRVL_STATS_KRN,
                        PMR.RGST_DT,
                        PMR.RMRK_CNTNTS,
                        PMR.TITLE
                FROM    PR_MONTHLY_REPORT PMR
                LEFT JOIN SM_COM_CODE SCC
                ON      PMR.APPRVL_STATS = SCC.CMN_CD
                AND     SCC.CMN_GRP_CD = 'f5a2c6ff-458b-8ef4-7219-12b06087a70f'
                WHERE   PMR.DLT_YN = 'N'
                AND     PMR.CNTRCT_CHG_ID IN (
                        SELECT  CNTRCT_CHG_ID
                        FROM    CN_CONTRACT_CHANGE
                        WHERE   CNTRCT_NO = #{cntrctNo}
                        AND     DLT_YN = 'N'
                )
            )
            SELECT  *
            FROM    MONTHLYREPORT_TBL
            WHERE   1 = 1
            <if test="searchText != null and searchText != ''">
            AND (
                    MONTHLY_REPORT_DATE LIKE '%' || #{searchText} || '%'
                    OR RGSTR_NM LIKE '%' || #{searchText} || '%'
            )
            </if>
            <if test="apprvlStats != null and apprvlStats != ''">
            AND     APPRVL_STATS = #{apprvlStats}
            </if>
            ORDER BY REPORT_YM DESC;
    </select>

	<select id="selectProgressStatus" parameterType="monthlyreportActivityDetailInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectProgressStatus][dhjung]  */
        WITH RECURSIVE MAIN_TBL AS (
               SELECT
                       PMR.CNTRCT_CHG_ID,
                       PMR.MONTHLY_REPORT_ID,
                       PMRP.CNSTTY_CD,
                       PMRP.CNSTTY_NM,
                       PMRP.CNTRCT_AM,
                       PMRP.CNTRCT_BOHAL_RATE,
                       PMRP.MONTHLY_CNSTTY_ID,
                       PMRP.LSMTH_PLAN_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.LSMTH_PLAN_BOHAL_RATE) / 100, 0) AS LSMTH_P_CNTRCT_BOHAL,
                       PMRP.THISMTH_PLAN_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.THISMTH_PLAN_BOHAL_RATE) / 100, 0) AS THISMTH_P_CNTRCT_BOHAL,
                       PMRP.ACMLT_PLAN_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.ACMLT_PLAN_BOHAL_RATE) / 100, 0) AS ACMLT_P_CNTRCT_BOHAL,
                       PMRP.LSMTH_ARSLT_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.LSMTH_ARSLT_BOHAL_RATE) / 100, 0) AS LSMTH_A_CNTRCT_BOHAL,
                       PMRP.THISMTH_ARSLT_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.THISMTH_ARSLT_BOHAL_RATE) / 100, 0) AS THISMTH_A_CNTRCT_BOHAL,
                       PMRP.ACMLT_ARSLT_BOHAL_RATE,
                       COALESCE((PMRP.CNTRCT_BOHAL_RATE * PMRP.ACMLT_ARSLT_BOHAL_RATE) / 100, 0) AS ACMLT_A_CNTRCT_BOHAL,
                       PMRP.RMK
               FROM     PR_MONTHLY_REPORT PMR
               LEFT JOIN PR_MONTHLY_REPORT_PROGRESS PMRP
               ON       PMR.CNTRCT_CHG_ID = PMRP.CNTRCT_CHG_ID
               AND      PMRP.MONTHLY_REPORT_ID = #{monthlyReportId}
               AND      PMRP.DLT_YN = 'N'
               WHERE    PMR.MONTHLY_REPORT_ID = #{monthlyReportId}
               AND      PMR.CNTRCT_CHG_ID = #{cntrctChgId}
               AND      PMR.DLT_YN = 'N'
               ORDER BY PMRP.CNSTTY_CD
		)
		SELECT
                CNTRCT_CHG_ID,
                MONTHLY_REPORT_ID,
                CNSTTY_CD,
                CNSTTY_NM,
                CNTRCT_AM,
                ROUND(CNTRCT_BOHAL_RATE, 2) AS CNTRCT_BOHAL_RATE,
                MONTHLY_CNSTTY_ID,
                ROUND(COALESCE(LSMTH_PLAN_BOHAL_RATE, 0), 2) AS LSMTH_PLAN_BOHAL_RATE,
                ROUND(COALESCE(THISMTH_PLAN_BOHAL_RATE, 0), 2) AS THISMTH_PLAN_BOHAL_RATE,
                ROUND(COALESCE(ACMLT_PLAN_BOHAL_RATE, 0), 2) AS ACMLT_PLAN_BOHAL_RATE,
                ROUND(COALESCE(LSMTH_ARSLT_BOHAL_RATE, 0), 2) AS LSMTH_ARSLT_BOHAL_RATE,
                ROUND(COALESCE(THISMTH_ARSLT_BOHAL_RATE, 0), 2) AS THISMTH_ARSLT_BOHAL_RATE,
                ROUND(COALESCE(ACMLT_ARSLT_BOHAL_RATE, 0), 2) AS ACMLT_ARSLT_BOHAL_RATE,
                COALESCE(RMK, '') AS RMK
        FROM MAIN_TBL
		UNION ALL
		SELECT
                NULL AS CNTRCT_CHG_ID,
                NULL AS MONTHLY_REPORT_ID,
                'TOTAL' AS CNSTTY_CD,
                '합계' AS CNSTTY_NM,
                SUM(CNTRCT_AM) AS CNTRCT_AM,
                ROUND(SUM(CNTRCT_BOHAL_RATE), 2) AS CNTRCT_BOHAL_RATE,
                NULL AS MONTHLY_CNSTTY_ID,
                ROUND(SUM(MT.LSMTH_P_CNTRCT_BOHAL), 2) AS LSMTH_PLAN_BOHAL_RATE,
                ROUND(SUM(MT.THISMTH_P_CNTRCT_BOHAL), 2) AS THISMTH_PLAN_BOHAL_RATE,
                ROUND(SUM(MT.ACMLT_P_CNTRCT_BOHAL), 2) AS ACMLT_PLAN_BOHAL_RATE,
                ROUND(SUM(MT.LSMTH_A_CNTRCT_BOHAL), 2) AS LSMTH_ARSLT_BOHAL_RATE,
                ROUND(SUM(MT.THISMTH_A_CNTRCT_BOHAL), 2) AS THISMTH_ARSLT_BOHAL_RATE,
                ROUND(SUM(MT.ACMLT_A_CNTRCT_BOHAL), 2) AS ACMLT_ARSLT_BOHAL_RATE,
                '' AS RMK
        FROM    MAIN_TBL MT;
	</select>

	<select id="selectMajorActivityList" parameterType="monthlyreportActivityDetailInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMajorActivityList][dhjung]  */
        WITH RECURSIVE WBS_PATH_TBL AS (
		SELECT
                WBS_CD,
                WBS_NM,
                UP_WBS_CD,
                1 AS DEPTH,
                ARRAY[WBS_NM]::VARCHAR[] AS PATH,
                CNTRCT_CHG_ID
        FROM    PR_WBS
        WHERE   WBS_LEVEL = '1'
        AND     CNTRCT_CHG_ID = #{cntrctChgId}
        AND     DLT_YN = 'N'
		UNION ALL
		SELECT
                PW.WBS_CD,
                PW.WBS_NM,
                PW.UP_WBS_CD,
                WPT.DEPTH + 1,
                WPT.PATH || PW.WBS_NM,
                PW.CNTRCT_CHG_ID
        FROM    PR_WBS PW
        JOIN    WBS_PATH_TBL WPT
        ON      PW.UP_WBS_CD = WPT.WBS_CD
        AND     PW.CNTRCT_CHG_ID = WPT.CNTRCT_CHG_ID
        WHERE   PW.DLT_YN = 'N'
		)
		SELECT DISTINCT
                ARRAY_TO_STRING(WPT.PATH, ' / ') AS PATH_NM,
                PMRA.CNTRCT_CHG_ID,
                PMRA.MONTHLY_REPORT_ID,
                PMRA.MONTHLY_ACTIVITY_ID,
                PMRA.WBS_CD,
                PMRA.ACTIVITY_ID,
                PA.ACTIVITY_NM,
                TO_CHAR(
                        (TO_DATE(CONCAT(PMR.REPORT_YM, '-01'), 'YYYY-MM-DD') + INTERVAL '1 month')::DATE - 1,
                        'YYYY-MM-DD'
                ) AS THIS_END,
                PMRA.PLAN_BGN_DATE,
                PMRA.PLAN_END_DATE,
                PMRA.ACTUAL_BGN_DATE,
                PMRA.ACTUAL_END_DATE,
                (
                    SELECT  SC.CMN_CD_NM_KRN
                    FROM    SM_COM_CODE SC
                    WHERE   SC.CMN_GRP_CD = 'b5af6b1b-224f-3ce1-ab98-0c8db36c2955'
                    AND     SC.CMN_CD = PMRA.PSTATS
                ) AS PSTATS_NM,
                CASE
                    WHEN COALESCE(PMRA.PLAN_END_DATE, '') != '' AND COALESCE(PMRA.PLAN_BGN_DATE, '') != ''
                        THEN TO_DATE(PMRA.PLAN_END_DATE, 'YYYY-MM-DD') - TO_DATE(PMRA.PLAN_BGN_DATE, 'YYYY-MM-DD') + 1
                    ELSE NULL
                END AS PLAN_REQRE_DAYNUM,
                CASE
                    WHEN COALESCE(PMRA.ACTUAL_END_DATE, '') != '' AND COALESCE(PMRA.ACTUAL_BGN_DATE, '') != ''
                        THEN TO_DATE(PMRA.ACTUAL_END_DATE, 'YYYY-MM-DD') - TO_DATE(PMRA.ACTUAL_BGN_DATE, 'YYYY-MM-DD') + 1
                    ELSE NULL
                END AS ACTUAL_REQRE_DAYNUM,
                PMRA.REVISION_ID,
                PMRA.DLY_DIV,
                PMRA.DLY_RSN,
                PMRA.PSTATS,
                PMRA.THISMTH_PLAN_RATE,
                PMRA.THISMTH_EXE_RATE,
                TRUNC(PA.EXPT_COST) AS EXPT_COST
		FROM    PR_MONTHLY_REPORT_ACTIVITY PMRA
		JOIN    PR_MONTHLY_REPORT PMR
        ON      PMR.MONTHLY_REPORT_ID = PMRA.MONTHLY_REPORT_ID
        AND     PMR.CNTRCT_CHG_ID = PMRA.CNTRCT_CHG_ID
        AND     PMR.DLT_YN = 'N'
        JOIN    PR_ACTIVITY PA
        ON      PA.ACTIVITY_ID = PMRA.ACTIVITY_ID
        AND     PA.CNTRCT_CHG_ID = #{cntrctChgId}
        AND     PA.REVISION_ID = (
                SELECT  REVISION_ID
                FROM    PR_REVISION
                WHERE   DLT_YN = 'N'
                AND     LAST_REVISION_YN = 'Y'
                AND     CNTRCT_CHG_ID = #{cntrctChgId}
           )
        JOIN    WBS_PATH_TBL WPT
        ON      WPT.WBS_CD = PMRA.WBS_CD
        WHERE   PMRA.CNTRCT_CHG_ID = #{cntrctChgId}
        AND     PMRA.MONTHLY_REPORT_ID = #{monthlyReportId}
        AND     PMRA.WORK_DT_TYPE = 'T'
        AND     PMRA.DLT_YN = 'N'
        ORDER BY WBS_CD, ACTIVITY_ID;
	</select>

	<select id="selectDelayActivityList" parameterType="monthlyreportActivityDetailInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectDelayActivityList][dhjung]  */
		WITH RECURSIVE
		wbs_path_tbl AS (
		SELECT wbs_cd
		, wbs_nm
		, up_wbs_cd
		, 1 AS DEPTH
		, ARRAY[wbs_nm]::varchar[] AS PATH
		, cntrct_chg_id
		FROM pr_wbs
		WHERE wbs_level = '1'
		AND cntrct_chg_id = #{cntrctChgId}
		AND dlt_yn = 'N'
		UNION ALL
		SELECT pw.wbs_cd
		, pw.wbs_nm
		, pw.up_wbs_cd
		, wpt.depth + 1
		, wpt.path || pw.wbs_nm
		, pw.cntrct_chg_id
		FROM pr_wbs pw
		JOIN wbs_path_tbl wpt ON pw.up_wbs_cd = wpt.wbs_cd AND pw.cntrct_chg_id = wpt.cntrct_chg_id
		WHERE pw.dlt_yn = 'N'
		)
		SELECT DISTINCT
		array_to_string(wpt.path, ' / ') AS path_nm
		, pmra.cntrct_chg_id
		, pmra.monthly_report_id
		, pmra.monthly_activity_id
		,	pa.activity_nm
		, TO_CHAR((TO_DATE(CONCAT(pmr.report_ym, '-01'), 'YYYY-MM-DD') + INTERVAL '1 month')::DATE - 1, 'YYYY-MM-DD') AS this_end
		, pmra.wbs_cd
		, pmra.activity_id
		, pmra.plan_bgn_date
		, pmra.plan_end_date
		, pmra.actual_bgn_date
		, pmra.actual_end_date
		, (SELECT sc.cmn_cd_nm_krn FROM sm_com_code sc WHERE cmn_grp_cd = 'b5af6b1b-224f-3ce1-ab98-0c8db36c2955' AND sc.cmn_cd = pmra.pstats) AS pstats_nm
		, CASE WHEN COALESCE(pmra.plan_end_date, '') != '' AND COALESCE(pmra.plan_bgn_date, '') != ''
		THEN TO_DATE(pmra.plan_end_date, 'YYYY-MM-DD') - TO_DATE(pmra.plan_bgn_date, 'YYYY-MM-DD') + 1
		ELSE NULL
		END AS plan_reqre_daynum
		, pmra.revision_id
		, pmra.pstats
		, pmra.dly_div
		, pmra.major_prcs_yn
		, COALESCE(pmra.dly_rsn, '') AS dly_rsn
		, TRUNC(pa.expt_cost) AS expt_cost
		FROM pr_monthly_report_activity pmra
		JOIN pr_monthly_report pmr ON pmr.monthly_report_id = pmra.monthly_report_id AND pmr.cntrct_chg_id = pmra.cntrct_chg_id AND pmr.dlt_yn = 'N' AND pmr.monthly_report_id = #{monthlyReportId}
		JOIN pr_activity pa ON pa.activity_id = pmra.activity_id AND pa.cntrct_chg_id = #{cntrctChgId} AND pa.revision_id = (SELECT revision_id FROM pr_revision WHERE dlt_yn = 'N' AND last_revision_yn = 'Y' AND cntrct_chg_id = #{cntrctChgId})
		JOIN wbs_path_tbl wpt ON wpt.wbs_cd = pmra.wbs_cd
		WHERE pmra.cntrct_chg_id = #{cntrctChgId}
		AND pmra.monthly_report_id = #{monthlyReportId}
		AND pmra.work_dt_type = 'D'
		AND pmra.dlt_yn = 'N'
		ORDER BY wbs_cd, activity_id;
	</select>

	<select id="selectNextActivityList" parameterType="monthlyreportActivityDetailInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectNextActivityList][dhjung]  */
		WITH RECURSIVE
		wbs_path_tbl AS (
		SELECT wbs_cd
		, wbs_nm
		, up_wbs_cd
		, 1 AS DEPTH
		, ARRAY[wbs_nm]::varchar[] AS PATH
		, cntrct_chg_id
		FROM pr_wbs
		WHERE wbs_level = '1'
		AND cntrct_chg_id = #{cntrctChgId}
		AND dlt_yn = 'N'
		UNION ALL
		SELECT pw.wbs_cd
		, pw.wbs_nm
		, pw.up_wbs_cd
		, wpt.depth + 1
		, wpt.path || pw.wbs_nm
		, pw.cntrct_chg_id
		FROM pr_wbs pw
		JOIN wbs_path_tbl wpt ON pw.up_wbs_cd = wpt.wbs_cd AND pw.cntrct_chg_id = wpt.cntrct_chg_id
		WHERE pw.dlt_yn = 'N'
		)
		SELECT DISTINCT
		array_to_string(wpt.path, ' / ') AS path_nm
		, pmra.cntrct_chg_id
		, pmra.monthly_report_id
		, pmra.monthly_activity_id
		,	pa.activity_nm
		, pmra.wbs_cd
		, pmra.activity_id
		, pmra.plan_bgn_date
		, pmra.plan_end_date
		, pmra.actual_bgn_date
		, pmra.actual_end_date
		, (SELECT sc.cmn_cd_nm_krn FROM sm_com_code sc WHERE cmn_grp_cd = 'b5af6b1b-224f-3ce1-ab98-0c8db36c2955' AND sc.cmn_cd = pmra.pstats) AS pstats_nm
		, CASE WHEN COALESCE(pmra.plan_end_date, '') != '' AND COALESCE(pmra.plan_bgn_date, '') != ''
		THEN TO_DATE(pmra.plan_end_date, 'YYYY-MM-DD') - TO_DATE(pmra.plan_bgn_date, 'YYYY-MM-DD') + 1
		ELSE NULL
		END AS plan_reqre_daynum
		, pmra.revision_id
		, pmra.pstats
		, pmra.dly_div
		, pmra.dly_rsn
		, TRUNC(pa.expt_cost) AS expt_cost
		FROM pr_monthly_report_activity pmra
		JOIN pr_activity pa ON pa.activity_id = pmra.activity_id AND pa.cntrct_chg_id = #{cntrctChgId} AND pa.revision_id = (SELECT revision_id FROM pr_revision WHERE dlt_yn = 'N' AND last_revision_yn = 'Y' AND cntrct_chg_id = #{cntrctChgId})
		JOIN wbs_path_tbl wpt ON wpt.wbs_cd = pmra.wbs_cd
		WHERE pmra.cntrct_chg_id = #{cntrctChgId}
		AND pmra.monthly_report_id = #{monthlyReportId}
		AND pmra.work_dt_type = 'N'
		AND pmra.dlt_yn = 'N'
		ORDER BY wbs_cd, activity_id;
	</select>

	<select id="selectAddMajorActivityList" parameterType="searchAddActivityInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectAddMajorActivityList][dhjung]  */
		WITH RECURSIVE wbs_path_tbl AS (
            SELECT wbs_cd
                 , wbs_nm
                 , up_wbs_cd
                 , 1 AS DEPTH
                 , ARRAY[wbs_nm]::varchar[] AS PATH
                 , cntrct_chg_id
              FROM pr_wbs
             WHERE wbs_level = '1'
               AND cntrct_chg_id LIKE #{cntrctNo}||'%'
            UNION ALL
            SELECT pw.wbs_cd
                 , pw.wbs_nm
                 , pw.up_wbs_cd
                 , wpt.depth + 1
                 , wpt.path || pw.wbs_nm
                 , pw.cntrct_chg_id
              FROM pr_wbs pw
              JOIN wbs_path_tbl wpt ON pw.up_wbs_cd = wpt.wbs_cd
               AND pw.cntrct_chg_id = wpt.cntrct_chg_id
             WHERE pw.dlt_yn = 'N'
		),
		pstats_tbl AS (
            SELECT cdra.cntrct_chg_id
                 , cdra.wbs_cd
                 , cdra.activity_id
                 , cdra.pstats
                 , ROW_NUMBER() OVER (PARTITION BY cdra.activity_id, cdra.cntrct_chg_id, cdra.wbs_cd ORDER BY drt.daily_report_date desc) AS rn
              FROM cw_daily_report_activity cdra
              JOIN cw_daily_report drt ON drt.daily_report_id = cdra.daily_report_id
             WHERE cdra.dlt_yn = 'N'
               AND cdra.cntrct_chg_id LIKE #{cntrctNo}||'%'
               AND cdra.revision_id = (SELECT revision_id
                                         FROM pr_revision
                                        WHERE dlt_yn = 'N'
                                          AND last_revision_yn = 'Y'
                                          AND cntrct_chg_id = cdra.cntrct_chg_id)
                                          AND drt.dlt_yn = 'N'
                                          AND cdra.work_dt_type = 'TD'
                                          AND TO_DATE(drt.daily_report_date, 'YYYY-MM' ) = TO_DATE(#{reportYm}, 'YYYY-MM')
                                     GROUP BY cdra.cntrct_chg_id, cdra.wbs_cd, cdra.activity_id, cdra.pstats, drt.daily_report_date),
		pr_activity_tbl AS (
            SELECT pa.cntrct_chg_id
                 , pa.revision_id
                 , pa.wbs_cd
                 , pa.activity_id
                 , pa.activity_nm
                 , pa.expt_cost
                 , pa.plan_start
                 , pa.plan_finish
                 , pa.actual_start
                 , pa.actual_finish
                 , CASE WHEN COALESCE(pa.plan_finish, '') != '' AND COALESCE(pa.plan_start, '') != '' THEN TO_DATE(pa.plan_finish, 'YYYY-MM-DD') - TO_DATE(pa.plan_start, 'YYYY-MM-DD') + 1
                        ELSE NULL
                   END AS plan_reqre_daynum
                 , CASE WHEN COALESCE(pa.actual_finish, '') != '' AND COALESCE(pa.actual_start, '') != '' THEN TO_DATE(pa.actual_finish, 'YYYY-MM-DD') - TO_DATE(pa.actual_start, 'YYYY-MM-DD') + 1
                        ELSE NULL
                   END AS actual_reqre_daynum
                <![CDATA[
                 , CASE	WHEN COALESCE(NULLIF(pa.plan_start, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_start, '')::DATE, CURRENT_DATE) THEN 'ST'
                        WHEN COALESCE(NULLIF(pa.plan_finish, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_finish, '')::DATE, CURRENT_DATE) THEN 'FN'
                        ELSE ''
                    END AS dly_div
                 ]]>
                 , pst.pstats
                 , (SELECT sc.cmn_cd_nm_krn FROM sm_com_code sc WHERE cmn_grp_cd = #{cmnGrpCd} AND sc.cmn_cd = pst.pstats) AS pstats_nm
                 , pa.activity_kind
                 , CASE WHEN COALESCE(pa.actual_start, '') != '' AND COALESCE(pa.actual_finish, '') != '' THEN TO_DATE(pa.actual_finish, 'YYYY-MM-DD') - TO_DATE(pa.actual_start, 'YYYY-MM-DD') +1
                        ELSE TO_DATE(COALESCE(NULLIF(pa.plan_finish, ''), pa.plan_start), 'YYYY-MM-DD') - TO_DATE(COALESCE(NULLIF(pa.plan_start, ''), pa.plan_finish), 'YYYY-MM-DD') +1
                   END AS thismth_total_duration
                 , TO_DATE(COALESCE(NULLIF(pa.actual_finish, ''), TO_CHAR((TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 month')::DATE - 1, 'YYYY-MM-DD')), 'YYYY-MM-DD') - to_date(pa.actual_start, 'YYYY-MM-DD') +1 AS thismth_duration
                 , TO_DATE(COALESCE(NULLIF(pa.plan_finish, ''), pa.plan_start), 'YYYY-MM-DD') - TO_DATE(COALESCE(NULLIF(pa.plan_start, ''), pa.plan_finish), 'YYYY-MM-DD') +1  AS plan_total_duration
                 , TO_DATE(COALESCE(NULLIF(pa.plan_finish, ''), TO_CHAR((TO_DATE(CONCAT(#{reportYm}, '-01'), 'YYYY-MM-DD') + INTERVAL '1 month')::DATE - 1, 'YYYY-MM-DD')), 'YYYY-MM-DD') - TO_DATE(COALESCE(NULLIF(pa.plan_start, ''), pa.plan_finish), 'YYYY-MM-DD') +1 AS plan_duration
                 , (SELECT COUNT(*)
              FROM pr_monthly_report pmr
              JOIN pr_monthly_report_activity pmra ON pmr.monthly_report_id = pmra.monthly_report_id
             WHERE 1=1
               AND pmra.activity_id = pa.activity_id
               AND pmra.cntrct_chg_id = #{cntrctChgId}
               AND pmra.monthly_report_id = #{monthlyReportId}
               AND pmra.work_dt_type = 'T'
               AND pmr.dlt_yn = 'N'
               AND pmra.dlt_yn = 'N') AS chk
              FROM pr_activity pa
         LEFT JOIN pstats_tbl pst ON pa.cntrct_chg_id = pst.cntrct_chg_id
               AND pa.activity_id = pst.activity_id
               AND rn = 1
             WHERE pa.cntrct_chg_id LIKE #{cntrctNo}||'%'
               AND COALESCE(pa.actual_start, '') != ''
               AND ((date_trunc('month', TO_DATE(COALESCE(NULLIF(pa.actual_finish, ''), to_char(now(), 'YYYY-MM-DD')), 'YYYY-MM-DD')) = date_trunc('month', CURRENT_DATE))
                    OR (COALESCE(pa.actual_finish, '') = ''))
               AND pa.revision_id = (SELECT revision_id
              FROM pr_revision
             WHERE dlt_yn = 'N'
               AND last_revision_yn = 'Y'
               AND cntrct_chg_id = #{cntrctChgId})
		)
		SELECT DISTINCT
		       array_to_string(wpt.path, ' / ') AS path_nm
		     , pat.cntrct_chg_id
		     , pat.revision_id
		     , pat.wbs_cd
		     , pat.activity_id
		     , pat.activity_nm
		     , TRUNC(pat.expt_cost) AS expt_cost
		     , pat.plan_start
		     , pat.plan_finish
		     , pat.actual_start
		     , pat.actual_finish
		     , pat.plan_reqre_daynum
		     , pat.actual_reqre_daynum
		     , pat.dly_div
		     , pat.pstats
		     , pat.pstats_nm
		     , pat.chk
		     , CASE WHEN activity_kind IN ('SM', 'FN') AND (COALESCE(actual_start, '') != '' OR COALESCE(actual_finish, '') != '') THEN 100.00
		           ELSE ROUND((plan_duration::NUMERIC / plan_total_duration::NUMERIC) * 100, 2)
		       END AS thismth_plan_rate
		     , CASE WHEN activity_kind IN ('SM', 'FN') AND (COALESCE(actual_start, '') != '' OR COALESCE(actual_finish, '') != '') THEN 100.00
		           ELSE ROUND((thismth_duration::NUMERIC / thismth_total_duration::NUMERIC) * 100, 2)
		       END AS thismth_exe_rate
		  FROM pr_activity_tbl pat
		  JOIN wbs_path_tbl wpt ON pat.wbs_cd = wpt.wbs_cd
		 WHERE pat.chk = 0
		<if test="searchText != null and searchText != ''">
			AND (array_to_string(wpt.path, ' / ') LIKE '%'||#{searchText}||'%' OR activity_id LIKE '%'||#{searchText}||'%' OR activity_nm LIKE '%'||#{searchText}||'%')
		</if>
		<if test="startDate != null and startDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ >= ]]> TO_DATE(#{startDate},'YYYY-MM-DD')
		</if>
		<if test="endDate != null and endDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ <= ]]> TO_DATE(#{endDate},'YYYY-MM-DD')
		</if>
		ORDER BY pat.wbs_cd;
	</select>

	<select id="selectAddDelayActivityList" parameterType="searchAddActivityInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectAddDelayActivityList][dhjung]  */
		WITH RECURSIVE wbs_path_tbl AS (
            SELECT wbs_cd
                 , wbs_nm
                 , up_wbs_cd
                 , 1 AS DEPTH
                 , ARRAY[wbs_nm]::varchar[] AS PATH
                 , cntrct_chg_id
              FROM pr_wbs
             WHERE wbs_level = '1'
               AND cntrct_chg_id LIKE #{cntrctNo}||'%'
               AND dlt_yn = 'N'
            UNION ALL
            SELECT pw.wbs_cd
                 , pw.wbs_nm
                 , pw.up_wbs_cd
                 , wpt.depth + 1
                 , wpt.path || pw.wbs_nm
                 , pw.cntrct_chg_id
              FROM pr_wbs pw
              JOIN wbs_path_tbl wpt ON pw.up_wbs_cd = wpt.wbs_cd AND pw.cntrct_chg_id = wpt.cntrct_chg_id
             WHERE pw.dlt_yn = 'N'
		),
		pstats_tbl AS (
            SELECT cdra.cntrct_chg_id
                 , cdra.wbs_cd
                 , cdra.activity_id
                 , cdra.pstats
                 , ROW_NUMBER() OVER (PARTITION BY cdra.activity_id, cdra.cntrct_chg_id, cdra.wbs_cd ORDER BY drt.daily_report_date desc) AS rn
              FROM cw_daily_report_activity cdra
              JOIN cw_daily_report drt ON drt.daily_report_id = cdra.daily_report_id
             WHERE cdra.dlt_yn = 'N'
               AND cdra.cntrct_chg_id LIKE #{cntrctNo}||'%'
               AND cdra.revision_id = (SELECT revision_id
		                                 FROM pr_revision
		                                WHERE dlt_yn = 'N'
		                                  AND last_revision_yn = 'Y'
		                                  AND cntrct_chg_id = cdra.cntrct_chg_id)
               AND drt.dlt_yn = 'N'
               AND cdra.work_dt_type = 'TD'
               AND TO_DATE(drt.daily_report_date, 'YYYY-MM' ) = TO_DATE(#{reportYm}, 'YYYY-MM')
          GROUP BY cdra.cntrct_chg_id, cdra.wbs_cd, cdra.activity_id, cdra.pstats, drt.daily_report_date
		),
		pr_activity_tbl AS (
            SELECT pa.cntrct_chg_id
                 , pa.revision_id
                 , pa.wbs_cd
                 , pa.activity_id
                 , pa.activity_nm
                 , TRUNC(pa.expt_cost) AS expt_cost
                 , pa.plan_start
                 , pa.plan_finish
                 , pa.actual_start
                 , pa.actual_finish
                 , CASE WHEN COALESCE(pa.plan_finish, '') != '' AND COALESCE(pa.plan_start, '') != '' THEN TO_DATE(pa.plan_finish, 'YYYY-MM-DD') - TO_DATE(pa.plan_start, 'YYYY-MM-DD') + 1
                        ELSE NULL
                   END AS plan_reqre_daynum
                 <![CDATA[
                 , CASE	WHEN COALESCE(NULLIF(pa.plan_start, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_start, '')::DATE, CURRENT_DATE) THEN 'ST'
                        WHEN COALESCE(NULLIF(pa.plan_finish, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_finish, '')::DATE, CURRENT_DATE) THEN 'FN'
                        ELSE ''
                   END AS dly_div
                 ]]>
                 , pst.pstats
                 , (SELECT COUNT(*)
                      FROM pr_monthly_report pmr
                      JOIN pr_monthly_report_activity pmra ON pmr.monthly_report_id = pmra.monthly_report_id
                     WHERE 1=1
                       AND pmra.activity_id = pa.activity_id
                       AND pmra.cntrct_chg_id = #{cntrctChgId}
                       AND pmra.monthly_report_id = #{monthlyReportId}
                       AND pmra.work_dt_type = 'D'
                       AND pmr.dlt_yn = 'N'
                       AND pmra.dlt_yn = 'N') AS chk
                      FROM pr_activity pa
                 LEFT JOIN pstats_tbl pst ON pa.cntrct_chg_id = pst.cntrct_chg_id AND pa.activity_id = pst.activity_id AND rn = 1
                     WHERE pa.cntrct_chg_id LIKE #{cntrctNo}||'%'
                       AND COALESCE(pa.actual_finish, '') = ''
                       AND pa.revision_id = (SELECT revision_id
                      FROM pr_revision
                     WHERE dlt_yn = 'N'
                       AND last_revision_yn = 'Y'
                       AND cntrct_chg_id = #{cntrctChgId})
        )
		SELECT DISTINCT
		       array_to_string(wpt.path, ' / ') AS path_nm
		     , pat.*
		  FROM pr_activity_tbl pat
		  JOIN wbs_path_tbl wpt ON pat.wbs_cd = wpt.wbs_cd
		 WHERE pat.chk = 0
		<if test="searchText != null and searchText != ''">
			AND (array_to_string(wpt.path, ' / ') LIKE '%'||#{searchText}||'%' OR activity_id LIKE '%'||#{searchText}||'%' OR activity_nm LIKE '%'||#{searchText}||'%')
		</if>
		<if test="startDate != null and startDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ >= ]]> TO_DATE(#{startDate},'YYYY-MM-DD')
		</if>
		<if test="endDate != null and endDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ <= ]]> TO_DATE(#{endDate},'YYYY-MM-DD')
		</if>
		ORDER BY pat.wbs_cd;
	</select>

	<select id="selectAddNextActivityList" parameterType="searchAddActivityInput" resultType="map">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectAddNextActivityList][dhjung]  */
		WITH RECURSIVE wbs_path_tbl AS (
            SELECT wbs_cd
                 , wbs_nm
                 , up_wbs_cd
                 , 1 AS DEPTH
                 , ARRAY[wbs_nm]::varchar[] AS PATH
                 , cntrct_chg_id
              FROM pr_wbs
             WHERE wbs_level = '1'
               AND cntrct_chg_id LIKE #{cntrctNo}||'%'
               AND dlt_yn = 'N'
            UNION ALL
            SELECT pw.wbs_cd
                 , pw.wbs_nm
                 , pw.up_wbs_cd
                 , wpt.depth + 1
                 , wpt.path || pw.wbs_nm
                 , pw.cntrct_chg_id
              FROM pr_wbs pw
              JOIN wbs_path_tbl wpt ON pw.up_wbs_cd = wpt.wbs_cd AND pw.cntrct_chg_id = wpt.cntrct_chg_id
             WHERE pw.dlt_yn = 'N'
		),
		pr_activity_tbl AS (
            SELECT pa.cntrct_chg_id
                 , pa.revision_id
                 , pa.wbs_cd
                 , pa.activity_id
                 , pa.activity_nm
                 , TRUNC(pa.expt_cost) AS expt_cost
                 , pa.plan_start
                 , pa.plan_finish
                 , pa.actual_start
                 , CASE WHEN pa.actual_finish IS NOT NULL or pa.actual_finish != '' THEN actual_finish
                        ELSE ''
                   END AS actual_finish
                 , CASE WHEN COALESCE(pa.plan_finish, '') != '' AND COALESCE(pa.plan_start, '') != '' THEN TO_DATE(pa.plan_finish, 'YYYY-MM-DD') - TO_DATE(pa.plan_start, 'YYYY-MM-DD') + 1
                   ELSE NULL
                   END AS plan_reqre_daynum
                 <![CDATA[
                 , CASE	WHEN COALESCE(NULLIF(pa.plan_start, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_start, '')::DATE, CURRENT_DATE) THEN 'ST'
                        WHEN COALESCE(NULLIF(pa.plan_finish, '')::DATE, CURRENT_DATE) < COALESCE(NULLIF(pa.actual_finish, '')::DATE, CURRENT_DATE) THEN 'FN'
                        ELSE ''
                   END AS dly_div
                 ]]>
                 , (SELECT COUNT(*)
                      FROM pr_monthly_report pmr
                      JOIN pr_monthly_report_activity pmra ON pmr.monthly_report_id = pmra.monthly_report_id
                     WHERE 1=1
                       AND pmra.activity_id = pa.activity_id
                       AND pmra.cntrct_chg_id = #{cntrctChgId}
                       AND pmra.monthly_report_id = #{monthlyReportId}
                       AND pmra.work_dt_type = 'N'
                       AND pmr.dlt_yn = 'N'
                       AND pmra.dlt_yn = 'N') AS chk
                      FROM pr_activity pa
                     WHERE pa.cntrct_chg_id LIKE #{cntrctNo}||'%'
                       AND COALESCE(pa.actual_finish, '') = ''
                       AND pa.revision_id = (SELECT revision_id
                                               FROM pr_revision
                                              WHERE dlt_yn = 'N'
                                                AND last_revision_yn = 'Y'
                                                AND cntrct_chg_id = #{cntrctChgId})
        )
		SELECT DISTINCT
		       array_to_string(wpt.path, ' / ') AS path_nm
		     , pat.*
		  FROM pr_activity_tbl pat
		  JOIN wbs_path_tbl wpt ON pat.wbs_cd = wpt.wbs_cd
		 WHERE 1=1
		   AND pat.chk = 0
		<if test="searchText != null and searchText != ''">
			AND (array_to_string(wpt.path, ' / ') LIKE '%'||#{searchText}||'%' OR pat.activity_id LIKE '%'||#{searchText}||'%' OR pat.activity_nm LIKE '%'||#{searchText}||'%')
		</if>
		<if test="startDate != null and startDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ >= ]]> TO_DATE(#{startDate},'YYYY-MM-DD')
		</if>
		<if test="endDate != null and endDate != ''">
			AND TO_DATE(pat.plan_start,'YYYY-MM-DD') <![CDATA[ <= ]]> TO_DATE(#{endDate},'YYYY-MM-DD')
		</if>
		ORDER BY pat.wbs_cd;
	</select>

	<select id="selectLastCntrctChgId" parameterType="String" resultType="String">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectLastCntrctChgId][dhjung]  */
            SELECT  CNTRCT_CHG_ID
            FROM    CN_CONTRACT_CHANGE
            WHERE   CNTRCT_NO = #{cntrctNo}
            AND     DLT_YN = 'N'
            AND     LAST_CHG_YN = 'Y';
    </select>

	<select id="selectLastRevisionId" parameterType="String" resultType="String">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectLastRevisionId][dhjung]  */
            SELECT  REVISION_ID
            FROM    PR_REVISION PR
            WHERE   CNTRCT_CHG_ID = #{cntrctChgId}
            AND     DLT_YN = 'N'
            AND     PR.LAST_REVISION_YN = 'Y';
    </select>


	<select id="selectSumBohalRate" parameterType="bohalRateInput" resultType="bohalRate">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectSumBohalRate][dhjung]  */
		/* 월간공정보고 공정률 계산*/
		SELECT COALESCE(SUM(lsmth_plan_bohal_rate), 0) AS lsmth_plan_bohal_rate
             , COALESCE(SUM(thismth_plan_bohal_rate), 0) AS thismth_plan_bohal_rate
             , COALESCE(SUM(acmlt_plan_bohal_rate), 0) AS acmlt_plan_bohal_rate
             , COALESCE(SUM(lsmth_arslt_bohal_rate), 0) AS lsmth_arslt_bohal_rate
             , COALESCE(SUM(thismth_arslt_bohal_rate), 0) AS thismth_arslt_bohal_rate
             , COALESCE(SUM(acmlt_arslt_bohal_rate),0) AS acmlt_arslt_bohal_rate
		FROM ( SELECT (cntrct_bohal_rate * lsmth_plan_bohal_rate) / 100 AS lsmth_plan_bohal_rate
                    , (cntrct_bohal_rate * thismth_plan_bohal_rate) / 100 AS thismth_plan_bohal_rate
                    , (cntrct_bohal_rate * acmlt_plan_bohal_rate) / 100 AS acmlt_plan_bohal_rate
                    , (cntrct_bohal_rate * lsmth_arslt_bohal_rate) / 100 AS lsmth_arslt_bohal_rate
                    , (cntrct_bohal_rate * thismth_arslt_bohal_rate) / 100 AS thismth_arslt_bohal_rate
                    , (cntrct_bohal_rate * acmlt_arslt_bohal_rate) / 100 AS acmlt_arslt_bohal_rate
                 FROM pr_monthly_report_progress
                WHERE cntrct_chg_id = #{cntrctChgId}
                  AND monthly_report_id = #{monthlyReportId}
                  AND dlt_yn = 'N'
            ) AS bohal_tbl;
	</select>

	<select id="getUnitCnstType" parameterType="String" resultType="unitCnstTypeOutput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.getUnitCnstType][dhjung]  */
	    SELECT DISTINCT
               cc.cntrct_chg_id
             , cc.unit_cnst_type
             , scc.cmn_cd_nm_krn AS unit_cnst_nm
          FROM ct_cbs cc
     LEFT JOIN sm_com_code scc ON cc.unit_cnst_type = scc.cmn_cd
          JOIN cn_contract_change ccc ON ccc.cntrct_chg_id = cc.cntrct_chg_id
         WHERE ccc.cntrct_no = #{cntrctNo}
           AND ccc.last_chg_yn = 'Y'
           AND ccc.dlt_yn = 'N'
           AND cc.dlt_yn = 'N'
           AND scc.cmn_grp_cd = 'ce229e27-98c6-8c89-7be7-cbc27b0b1fc8'
           AND scc.dlt_yn = 'N';
    </select>

    <insert id="insertPrMonthlyReportStatus" parameterType="monthlyreportStatus">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.getUnitCnstType][dhjung]  */
        INSERT INTO
            pr_monthly_report_status (
              cntrct_chg_id
            , monthly_report_id
            , cnstrct_cd
            , cnstrct_perf
            , cnstrct_plan
            , cnstrct_note
            , current_issues
            , current_action_plan
            , current_note
            , dlt_yn
            , rgstr_id
            , rgst_dt
            , chg_id
            , chg_dt
        ) VALUES (
              #{cntrctChgId}
            , #{monthlyReportId}
            , #{cnstrctCd}
            , #{cnstrctPerf}
            , #{cnstrctPlan}
            , #{cnstrctNote}
            , #{currentIssues}
            , #{currentActionPlan}
            , #{currentNote}
            , #{dltYn}
            , #{rgstrId}
            , NOW()
            , #{chgId}
            , NOW()
        )
    </insert>

    <select id="selectMonthlyStatusList" parameterType="input" resultType="monthlyreportStatus">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyStatusList][dhjung]  */
        SELECT pmrs.cntrct_chg_id
             , pmrs.monthly_report_id
             , pmrs.cnstrct_cd
             , scc.cmn_cd_nm_krn AS cnstrct_nm
             , pmrs.cnstrct_perf
             , pmrs.cnstrct_plan
             , pmrs.cnstrct_note
             , pmrs.current_issues
             , pmrs.current_action_plan
             , pmrs.current_note
          FROM pr_monthly_report_status pmrs
     LEFT JOIN sm_com_code scc ON scc.cmn_cd = pmrs.cnstrct_cd
         WHERE pmrs.monthly_report_id = #{monthlyReportId}
           AND pmrs.cntrct_chg_id = #{cntrctChgId}
           AND pmrs.dlt_yn = 'N'
           AND scc.cmn_grp_cd = 'ce229e27-98c6-8c89-7be7-cbc27b0b1fc8'
           AND scc.dlt_yn = 'N';
    </select>

    <select id="selectPrAttachmentMaxFileNo" resultType="Integer">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectPrAttachmentMaxFileNo][dhjung]  */
        SELECT COALESCE(max(file_no), 0) FROM pr_attachments;
    </select>

    <select id="selectPrAttachmentMaxSno" parameterType="Integer" resultType="short">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectPrAttachmentMaxSno][dhjung]  */
        SELECT COALESCE(max(sno), 0)
          FROM pr_attachments
         WHERE file_no = #{fileNo};
    </select>

    <select id="selectMonthlyAttachments" parameterType="Integer" resultType="prAttachments">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyAttachments][dhjung]  */
        SELECT *
          FROM pr_attachments
         WHERE file_no = #{fileNo};
    </select>

    <select id="selectPrAttachmentMaxFileNoById" parameterType="input" resultType="Integer">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectPrAttachmentMaxFileNoById][dhjung]  */
        SELECT COALESCE(max(file_no), NULL) FROM pr_monthly_report_photo pmrp
        WHERE cntrct_chg_id = #{cntrctChgId}
          AND monthly_report_id = #{monthlyReportId};
    </select>

    <update id="updateMonthlyreportStatus" parameterType="monthlyreportStatus">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateMonthlyreportStatus][dhjung]  */
        UPDATE pr_monthly_report_status
           SET cnstrct_perf        = #{cnstrctPerf}
             , cnstrct_plan        = #{cnstrctPlan}
             , cnstrct_note        = #{cnstrctNote}
             , current_issues      = #{currentIssues}
             , current_action_plan = #{currentActionPlan}
             , current_note        = #{currentNote}
             , chg_id              = #{chgId}
             , chg_dt              = NOW()
         WHERE monthly_report_id   = #{monthlyReportId}
           AND cntrct_chg_id       = #{cntrctChgId}
           AND cnstrct_cd          = #{cnstrctCd}
           AND dlt_yn              = 'N'
    </update>

    <insert id="savedPrAttachment" parameterType="prAttachments">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.savedPrAttachment][dhjung]  */
            INSERT INTO
                pr_attachments (
                     file_no
                  ,  sno
                  , file_nm
                  , file_disk_nm
                  , file_disk_path
                  , file_size
                  , file_hit_num
                  , dlt_yn
                  , rgstr_id
                  , rgst_dt
                  , chg_id
                  , chg_dt
            )
            VALUES (
                #{fileNo}
              , #{sno}
              , #{fileNm}
              , #{fileDiskNm}
              , #{fileDiskPath}
              , #{fileSize}
              , #{fileHitNum}
              , #{dltYn}
              , #{rgstrId}
              , NOW()
              , #{chgId}
              , NOW()
            )
    </insert>

    <insert id="insertPrMonthlyReportPhoto" parameterType="prMonthlyReportPhoto">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.insertPrMonthlyReportPhoto][dhjung]  */
        INSERT INTO
            pr_monthly_report_photo (
                cntrct_chg_id,
                monthly_report_id,
                sno,
                file_no,
                titl_nm,
                dscrpt,
                shot_date,
                dlt_yn,
                rgst_dt,
                rgstr_id,
                chg_dt,
                chg_id
        )
        VALUES (
            #{cntrctChgId},
            #{monthlyReportId},
            #{sno},
            #{fileNo},
            #{titlNm},
            #{dscrpt},
            #{shotDate},
            #{dltYn},
            NOW(),
            #{rgstrId},
            NOW(),
            #{chgId}
        )
    </insert>

    <select id="selectMonthlyPhoto" parameterType="input" resultType="map">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyPhoto][dhjung]  */
        SELECT pmrp.titl_nm
             , pmrp.dscrpt
             , pmrp.shot_date
             , pa.file_no
             , pa.sno
             , pa.file_nm
             , pa.file_disk_nm
             , pa.file_disk_path
          FROM pr_monthly_report_photo pmrp
          JOIN pr_attachments pa ON pmrp.file_no = pa.file_no AND pmrp.sno = pa.sno
         WHERE pmrp.cntrct_chg_id = #{cntrctChgId}
           AND pmrp.monthly_report_id = #{monthlyReportId}
           AND pmrp.dlt_yn = 'N'
           AND pa.dlt_yn = 'N'
      ORDER BY pmrp.sno;
    </select>

    <select id="selectMonthlyPhotoById" parameterType="input" resultType="prMonthlyReportPhoto">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyPhotoById][dhjung]  */
        SELECT *
          FROM pr_monthly_report_photo
         WHERE cntrct_chg_id = #{cntrctChgId}
           AND monthly_report_id = #{monthlyReportId}
           AND dlt_yn = 'N';
    </select>

    <update id="updateDeleteMonthlyreportPhoto" parameterType="prMonthlyReportPhoto">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateDeleteMonthlyreportPhoto][dhjung]  */
        UPDATE pr_monthly_report_photo
           SET dlt_yn  = 'Y'
             , dlt_id  = #{dltId}
             , dlt_dt  = NOW()
         WHERE file_no = #{fileNo}
           AND sno     = #{sno}
    </update>

    <update id="updateDeletePrAttachments" parameterType="prAttachments">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.updateDeletePrAttachments][dhjung]  */
        UPDATE pr_attachments
           SET dlt_yn  = 'Y'
             , dlt_id  = #{dltId}
             , dlt_dt  = NOW()
         WHERE file_no = #{fileNo}
           AND sno     = #{sno}
    </update>

    <select id="selectMonthlyStatusById" parameterType="input" resultType="prMonthlyReportStatus">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.progress.monthlyreport.selectMonthlyStatusById][dhjung]  */
        SELECT *
          FROM pr_monthly_report_status
         WHERE cntrct_chg_id = #{cntrctChgId}
           AND monthly_report_id = #{monthlyReportId}
           AND dlt_yn = 'N';
    </select>
</mapper>