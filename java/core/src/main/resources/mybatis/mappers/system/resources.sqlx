<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources">

	<!--프로그램 목록조회-->
	<select id="selectResourcesList" resultType="resourcesListOutput" parameterType="resourcesListInput">
		/*[kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.selectResourcesList][gwlee]*/
		SELECT 	A.RESC_ID,
				A.MENU_NM,
				A.MENU_DEPTH,
				A.MENU_CD,
				A.RGHT_KIND,
				A.RGHT_KIND_NM_KR,
				A.RGHT_KIND_NM_EN,
				A.RESC_NM,
				A.RESC_URL,
				A.USE_YN,
				(	SELECT 	COUNT(B.*) as CNT
					FROM  	(	SELECT 	A.RESC_ID AS RESC_ID
								FROM SM_RESOURCES A
								LEFT JOIN SM_MENU B 
									ON 	A.MENU_CD = B.MENU_CD 
									AND B.DLT_YN = 'N'
								LEFT JOIN (	SELECT 	CMN_CD, 
													CMN_CD_NM_KRN, 
													CMN_CD_NM_ENG 
											FROM 	SM_COM_CODE 
											WHERE 	CMN_GRP_CD = #{cmnGrpCd}
											AND 	USE_YN = 'Y' 
											AND 	DLT_YN = 'N') C 
									ON A.RGHT_KIND = C.CMN_CD
								WHERE 	A.DLT_YN = 'N'
								<choose>
									<when test="searchType != null and searchType != ''">
										<if test="searchType == 'menuNm'">
								AND B.MENU_NM LIKE '%' || #{searchValue} || '%'
										</if>
										<if test="searchType == 'rghtKindNm'">
								AND C.CMN_CD_NM_KRN LIKE '%' || #{searchValue} || '%'
										</if>
									</when>
									<otherwise>
										<if test="searchValue != null and searchValue != ''">
								AND (A.RESC_ID LIKE '%' || #{searchValue} || '%' OR A.RESC_NM LIKE '%' || #{searchValue} || '%' OR A.RESC_URL LIKE '%' || #{searchValue} || '%' OR B.MENU_NM LIKE '%' || #{searchValue} || '%' OR C.CMN_CD_NM_KRN LIKE '%' || #{searchValue} || '%' )
										</if>
									</otherwise>
								</choose>) AS B) as CNT
		FROM  	(	SELECT 	A.RESC_ID AS RESC_ID,
							B.MENU_NM AS MENU_NM,
							A.MENU_CD AS MENU_CD,
							A.RGHT_KIND AS RGHT_KIND,
							CASE 	WHEN (C.CMN_CD_NM_KRN IS NULL OR C.CMN_CD_NM_KRN = '') AND (A.RGHT_KIND IS NULL OR A.RGHT_KIND = '')
										THEN '공통'
									WHEN (C.CMN_CD_NM_KRN IS NULL OR C.CMN_CD_NM_KRN = '') AND (A.RGHT_KIND IS not NULL OR A.RGHT_KIND != '')
										THEN '사용불가'
									ELSE C.CMN_CD_NM_KRN
							END AS RGHT_KIND_NM_KR,
							CASE 	WHEN (C.CMN_CD_NM_ENG IS NULL OR C.CMN_CD_NM_ENG = '') AND (A.RGHT_KIND IS NULL OR A.RGHT_KIND = '')
										THEN 'COMMON'
									WHEN (C.CMN_CD_NM_ENG IS NULL OR C.CMN_CD_NM_ENG = '') AND (A.RGHT_KIND IS not NULL OR A.RGHT_KIND != '')
										THEN 'Disabled'
									ELSE C.CMN_CD_NM_ENG
							END AS RGHT_KIND_NM_EN,
							A.RESC_NM AS RESC_NM,
							A.RESC_URL AS RESC_URL,
							CASE WHEN A.USE_YN = 'Y' 
								THEN '사용'
								ELSE '미사용'
							END AS USE_YN,
							( 	WITH RECURSIVE SM_MENU_LIST (	MENU_CD,
																UP_MENU_CD,
																MENU_LVL,
																MENU_NM,
																DEPTH,
																PATH,
																CYCLE ) 
								AS ( 	SELECT  AA.MENU_CD,
												AA.UP_MENU_CD,
												AA.MENU_LVL,
												AA.MENU_NM AS MENU_NM,
												1,
												ARRAY[AA.MENU_NM::TEXT],
												FALSE
										FROM    SM_MENU AA
										WHERE   AA.MENU_CD = A.MENU_CD
										AND     AA.DLT_YN = 'N'
										UNION ALL
										SELECT  AA.MENU_CD,
												AA.UP_MENU_CD,
												AA.MENU_LVL,
												AA.MENU_NM AS MENU_NM,
												BB.DEPTH + 1,
												ARRAY_APPEND(BB.PATH,
												CAST(AA.MENU_NM AS TEXT)::TEXT),
												AA.UP_MENU_CD = ANY(BB.PATH)
										FROM    SM_MENU AA,
												SM_MENU_LIST BB
										WHERE   AA.MENU_CD = BB.UP_MENU_CD
										AND     AA.DLT_YN = 'N'
										AND     NOT CYCLE )   
								SELECT  PATH
								FROM    SM_MENU_LIST
								WHERE MENU_LVL = 1) AS MENU_DEPTH
					FROM SM_RESOURCES A
					LEFT JOIN SM_MENU B 
						ON 	A.MENU_CD = B.MENU_CD 
						AND B.DLT_YN = 'N'
					LEFT JOIN (	SELECT 	CMN_CD, 
										CMN_CD_NM_KRN, 
										CMN_CD_NM_ENG 
								FROM 	SM_COM_CODE 
								WHERE 	CMN_GRP_CD = #{cmnGrpCd}
								AND 	USE_YN = 'Y' 
								AND 	DLT_YN = 'N') C 
						ON A.RGHT_KIND = C.CMN_CD
					WHERE 	A.DLT_YN = 'N'
					<choose>
						<when test="searchType != null and searchType != ''">
							<if test="searchType == 'menuNm'">
					AND B.MENU_NM LIKE '%' || #{searchValue} || '%'
							</if>
							<if test="searchType == 'rghtKindNm'">
					AND C.CMN_CD_NM_KRN LIKE '%' || #{searchValue} || '%'
							</if>
						</when>
						<otherwise>
							<if test="searchValue != null and searchValue != ''">
					AND (A.RESC_ID LIKE '%' || #{searchValue} || '%' OR A.RESC_NM LIKE '%' || #{searchValue} || '%' OR A.RESC_URL LIKE '%' || #{searchValue} || '%' OR B.MENU_NM LIKE '%' || #{searchValue} || '%' OR C.CMN_CD_NM_KRN LIKE '%' || #{searchValue} || '%' )
							</if>
						</otherwise>
					</choose>) AS A
		ORDER BY A.MENU_CD, A.RGHT_KIND
		<include refid="sqlx.commonPageable"></include>
	</select>

	<!--프로그램 아이디 중복체크-->
	<select id="rescIdExist" resultType="map" parameterType="String">
		/*[kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.rescIdExist][gwlee]*/
		SELECT 	CASE
					WHEN COUNT(*) = 1 THEN 'N'
					ELSE 'Y'
				END AS USE_YN
		FROM 	SM_RESOURCES
		WHERE 	DLT_YN = 'N'
		AND 	RESC_ID = #{rescId}
	</select>

	<!--프로그램 URL 중복체크-->
	<select id="rescUrlExist" resultType="map" parameterType="String">
		/*[kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.rescIdExist][gwlee]*/
		SELECT 	CASE
					WHEN COUNT(*) = 1 THEN 'N'
					ELSE 'Y'
				END AS USE_YN
		FROM 	SM_RESOURCES
		WHERE 	DLT_YN = 'N'
		AND 	RESC_URL = #{rescUrl}
	</select>

	<!--프로그램 등록 쿼리-->
	<insert id="insertResourcesInfo" parameterType="resourcesInsertInput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.insertResourcesInfo][gwLee]  */
		INSERT INTO GAIA_CMIS.SM_RESOURCES (	RESC_ID, 
												MENU_CD, 
												RGHT_KIND, 
												RESC_NM, 
												RESC_DSCR, 
												RESC_URL, 
												USE_YN, 
												DLT_YN, 
												RGSTR_ID, 
												RGST_DT, 
												CHG_ID, 
												CHG_DT)
		VALUES(	#{rescId},
				#{menuCd},
				#{rghtKind},
				#{rescNm},
				#{rescDscr},
				#{rescUrl},
				#{useYn},
				'N', 
				#{usrId},
				now(),
				#{usrId},
				now())
    </insert>

	<!--프로그램 등록 논리 삭제-->
	<update id="deleteResourcesInfo" parameterType="list">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.deleteResourcesInfo][gwLee]  */
		<foreach collection="list" item="item" index="index" separator=";">
		UPDATE 	GAIA_CMIS.SM_RESOURCES
        SET 	DLT_ID = #{item.usrId},
        		DLT_YN = 'Y',
        		DLT_DT = NOW()
        WHERE 	RESC_ID = #{item.rescId}
		</foreach>
    </update>

	<!--프로그램 상세조회-->
	<select id="selectResourcesInfo" resultType="map" parameterType="resourcesInfoInput">
		/*[kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.selectResourcesInfo][gwlee]*/
		SELECT 	A.RESC_ID AS RESC_ID,
				B.MENU_NM AS MENU_NM,
				A.MENU_CD AS MENU_CD,
				A.RGHT_KIND AS RGHT_KIND,
				CASE 	WHEN (C.CMN_CD_NM_KRN IS NULL OR C.CMN_CD_NM_KRN = '') AND (A.RGHT_KIND IS NULL OR A.RGHT_KIND = '')
							THEN '공통'
						WHEN (C.CMN_CD_NM_KRN IS NULL OR C.CMN_CD_NM_KRN = '') AND (A.RGHT_KIND IS not NULL OR A.RGHT_KIND != '')
							THEN '사용불가'
						ELSE C.CMN_CD_NM_KRN
				END AS RGHT_KIND_NM_KR,
				CASE 	WHEN (C.CMN_CD_NM_ENG IS NULL OR C.CMN_CD_NM_ENG = '') AND (A.RGHT_KIND IS NULL OR A.RGHT_KIND = '')
							THEN 'COMMON'
						WHEN (C.CMN_CD_NM_ENG IS NULL OR C.CMN_CD_NM_ENG = '') AND (A.RGHT_KIND IS not NULL OR A.RGHT_KIND != '')
							THEN 'Disabled'
						ELSE C.CMN_CD_NM_ENG
				END AS RGHT_KIND_NM_EN,
				A.RESC_NM AS RESC_NM,
				A.RESC_URL AS RESC_URL,
				A.RESC_DSCR AS RESC_DSCR,
				CASE WHEN A.USE_YN = 'Y' 
					THEN '사용'
					ELSE '미사용'
				END AS USE_NM,
				A.USE_YN AS USE_YN,
				( 	WITH RECURSIVE SM_MENU_LIST (	MENU_CD,
													UP_MENU_CD,
													MENU_LVL,
													MENU_NM,
													DEPTH,
													PATH,
													CYCLE ) 
					AS ( 	SELECT  AA.MENU_CD,
									AA.UP_MENU_CD,
									AA.MENU_LVL,
									AA.MENU_NM AS MENU_NM,
									1,
									ARRAY[AA.MENU_NM::TEXT],
									FALSE
							FROM    SM_MENU AA
							WHERE   AA.MENU_CD = A.MENU_CD
							AND     AA.DLT_YN = 'N'
							UNION ALL
							SELECT  AA.MENU_CD,
									AA.UP_MENU_CD,
									AA.MENU_LVL,
									AA.MENU_NM AS MENU_NM,
									BB.DEPTH + 1,
									ARRAY_APPEND(BB.PATH,
									CAST(AA.MENU_NM AS TEXT)::TEXT),
									AA.UP_MENU_CD = ANY(BB.PATH)
							FROM    SM_MENU AA,
									SM_MENU_LIST BB
							WHERE   AA.MENU_CD = BB.UP_MENU_CD
							AND     AA.DLT_YN = 'N'
							AND     NOT CYCLE )   
					SELECT  PATH
					FROM    SM_MENU_LIST
					WHERE MENU_LVL = 1) AS MENU_DEPTH
		FROM SM_RESOURCES A
		LEFT JOIN SM_MENU B 
			ON 	A.MENU_CD = B.MENU_CD 
			AND B.DLT_YN = 'N'
		LEFT JOIN (	SELECT 	CMN_CD, 
							CMN_CD_NM_KRN, 
							CMN_CD_NM_ENG 
					FROM 	SM_COM_CODE 
					WHERE 	CMN_GRP_CD = #{cmnGrpCd}
					AND 	USE_YN = 'Y' 
					AND 	DLT_YN = 'N') C 
			ON A.RGHT_KIND = C.CMN_CD
		WHERE 	A.DLT_YN = 'N'
		AND 	A.RESC_ID = #{rescId}
	</select>

	<!--프로그램 수정-->
	<update id="updateResourcesInfo" parameterType="resourcesInsertInput">
        /* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.updateResourcesInfo][gwLee]  */
		UPDATE 	SM_RESOURCES
        SET 	MENU_CD = #{menuCd},
				RGHT_KIND = #{rghtKind},
				RESC_NM = #{rescNm},
				RESC_DSCR = #{rescDscr},
				RESC_URL = #{rescUrl},
				USE_YN = #{useYn},
				CHG_ID = #{usrId},
        		CHG_DT = NOW()
        WHERE 	RESC_ID = #{rescId}
    </update>

	<!-- 리소스 역할 변경 시 매핑에서 삭제된 역할은 삭제 (수정으로 삭제) -->
	<delete id="deleteAuthorityMapping" parameterType="input">
		/* [kr.co.ideait.platform.gaiacairos.mybatis.mappers.system.resources.deleteAuthorityMapping][gwlee] */		
		WITH DELETED AS (
    		DELETE 
			FROM 	SM_MENU_AUTHORITY_MAPPING 
			WHERE 	MENU_CD = #{menuCd} 
			AND 	RGHT_KIND NOT IN 	(	SELECT 	A.RGHT_KIND 
											FROM 	SM_RESOURCES A,
													SM_COM_CODE B
											WHERE 	A.MENU_CD = #{menuCd}
											AND 	A.RGHT_KIND = B.CMN_CD
											AND 	B.CMN_GRP_CD = #{cmnGrpCd}
											AND 	B.DLT_YN = 'N'
											GROUP BY RGHT_KIND
										) RETURNING *
		)
		INSERT INTO SM_MENU_AUTHORITY_MAPPING_DEL_LOG 	(	MENU_CD, 
															RGHT_GRP_CD, 
															RGHT_KIND, 
															RGSTR_ID, 
															RGST_DT
														)
		SELECT 	MENU_CD, 
				RGHT_GRP_CD, 
				RGHT_KIND, 
				#{usrId}, 
				NOW()
		FROM 	DELETED		
	</delete>

</mapper>







